<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
	<title>My new best friend - PHP's create_function() &raquo; Debuggable - Node.js Consulting</title>

	<link href="http://feeds.feedburner.com/debuggable" type="application/rss+xml" rel="alternate" title="RSS 2.0" />	<link rel="pingback" href="Debuggable.com/pingback" />
	<link rel="stylesheet" type="text/css" href="/css/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/4026ee2275e22a4e5ec8aea13747c557.php" /></head>
	<body>
		<div class="container_16">
			<h1 id="logo-text"><a href="/">debuggable</a></h1>
			<ul id="navigation">
				<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>			</ul>
			<div class="clear">&nbsp;</div>

			<div id="blueprint">
				<a href="/contact" class="contact">Contact Us</a>			</div>

			<div class="clear">&nbsp;</div>
			<div class="grid_11 alpha" id="content">
	<cake:nocache>
			<div class="messages empty"></div>
	</cake:nocache>
	<div class="post">
	<h2><a href="/posts/my-new-best-friend-phps-create_function:480f4dd6-b9b0-47e3-b3e5-4c57cbdd56cb">My new best friend - PHP's create_function()</a></h2>	<div class="posted-on">
		<p>Posted on 18/5/07 by 
		<a href="/felix">Felix Geisendörfer</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/felix_thumb.jpg"/>		</div>
	</div>
	<div class="body">
		<div class="deprecated-post">
	<h3>Deprecated post</h3>
	<p>
		The authors of this post have marked it as deprecated. This means the information displayed is most likely
		<strong>outdated, inaccurate, boring</strong> or a combination of all three.
	</p>
	<p><strong>Policy:</strong> We never delete deprecated posts, but they are not listed in our categories or show up in the search anymore.</p>
	<p>
		<strong>Comments:</strong> You can continue to leave comments on this post, but please consult
		<a href="http://www.google.com">Google</a> or <a href="/posts/search/conditions:posts">our search</a>		first if you want to get an answer ; ).
	</p>
</div>		<p>Hey folks,</p>
<p>I meant to introduce you to my new best friend for quite a while but didn't get around to do it so far. His name is '<a href="http://php.net/create_function">create_function</a>' and he's a really useful co-worker. For those of you who just vaguely know him - don't worry, he's not so much like his <a href="http://php.net/eval">ev(a|i)l cousin</a>. Well, that doesn't mean he can't be harmful, but he's more likely to help you instead.</p>
<p>Alright enough of that non-sense ; ). But I really recommend everybody to give this function a closer look. One does not need it very often, but there are things that can be incredibly simplified and made very powerful using create_function. I mostly use it for quick conversion / manipulation functions that I just need temporally, for filtering items or for advanced mappings based on rules. So for those of you who haven't done any of this so far, or used verbose and complex solutions for it, here is a neat little example:</p>
<p>The task is the following, you are the project manager of a big PHP application and want to hire some new programmers. However all the ones on your list kind of sound the same and you don't really feel like reading their long résumés. So in order to speed things up you make yourself a little PHP array with the most important facts about all of them:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$programmers</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><br />
&nbsp; &nbsp; <span class="st0">'Jim'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'languages'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'PHP'</span>, <span class="st0">'C++'</span>, <span class="st0">'JavaScript'</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'rate'</span> =&gt; <span class="nu0">50</span><br />
&nbsp; &nbsp; <span class="br0">&#41;</span>,<br />
&nbsp; &nbsp; <span class="st0">'John'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'languages'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'Java'</span>, <span class="st0">'Visual Basic'</span>, <span class="st0">'PHP'</span>, <span class="st0">'C++'</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'rate'</span> =&gt; <span class="nu0">55</span><br />
&nbsp; &nbsp; <span class="br0">&#41;</span>,<br />
&nbsp; &nbsp; <span class="st0">'Jack'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'languages'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'ActionScript'</span>, <span class="st0">'PHP'</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'rate'</span> =&gt; <span class="nu0">45</span><br />
&nbsp; &nbsp; <span class="br0">&#41;</span>,<br />
&nbsp; &nbsp; <span class="st0">'James'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'languages'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'C++'</span>, <span class="st0">'C'</span>, <span class="st0">'JavaScript'</span>, <span class="st0">'Python'</span>, <span class="st0">'Ruby'</span>, <span class="st0">'PHP'</span>, <span class="st0">'ActionScript'</span>, <span class="st0">'VB.NET'</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'rate'</span> =&gt; <span class="nu0">75</span><br />
&nbsp; &nbsp; <span class="br0">&#41;</span>,<br />
&nbsp; &nbsp; <span class="st0">'Jeff'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'languages'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'PHP'</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'rate'</span> =&gt; <span class="nu0">25</span><br />
&nbsp; &nbsp; <span class="br0">&#41;</span>,<br />
&nbsp; &nbsp; <span class="st0">'Joe'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'languages'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'Lisp'</span>, <span class="st0">'Haskell'</span>, <span class="st0">'Python'</span>, <span class="st0">'Ruby'</span>, <span class="st0">'Scheme'</span>, <span class="st0">'Ada'</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'rate'</span> =&gt; <span class="nu0">60</span><br />
&nbsp; &nbsp; <span class="br0">&#41;</span><br />
<span class="br0">&#41;</span>;</div>
<p>Now that you have that list you start to think about what kind of people you want to hire, and come up with the following criterias:</p>
<ul>
<li>The programmer must know PHP</li>
<li>The programmer should have no Java background (no offense if you are one, this is just an example ^^)</li>
<li>The programmer should not charge too much, less or equal to $50 / hour is ok.</li>
<li>The programmer needs to know at least 2 different languages.</li>
</ul>
<p>So most people (including me until a while ago) would solve this by looping through all $programmers and then nest a long if-else chain in it that will unset() the current programmer if one of the if statements evaluates to true. However, a much more readable and extendable approach is to define the $conditions in an array of short PHP code snippets that return true or false depending whether the condition is met. This way we can implement a neat little 'filter' function that can be used to filter items fairly comfortable from now on like this:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">function</span> filter<span class="br0">&#40;</span><span class="re0">$items</span>, <span class="re0">$conditions</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="re0">$conditions</span> <span class="kw1">as</span> <span class="re0">$name</span> =&gt; <span class="re0">$condition</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$condition</span> = <a href="http://www.php.net/create_function"><span class="kw3">create_function</span></a><span class="br0">&#40;</span><span class="st0">'$item'</span>, <span class="re0">$condition</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="re0">$items</span> <span class="kw1">as</span> <span class="re0">$i</span> =&gt; <span class="re0">$item</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$condition</span><span class="br0">&#40;</span><span class="re0">$item</span><span class="br0">&#41;</span> != <span class="kw2">true</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.php.net/unset"><span class="kw3">unset</span></a><span class="br0">&#40;</span><span class="re0">$items</span><span class="br0">&#91;</span><span class="re0">$i</span><span class="br0">&#93;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; <span class="kw1">return</span> <span class="re0">$items</span>;<br />
<span class="br0">&#125;</span><br />
<br />
<span class="re0">$conditions</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><br />
&nbsp; &nbsp; <span class="st0">'knows-php'</span> =&gt; <span class="st0">'return in_array(&quot;PHP&quot;, $item[&quot;languages&quot;]);'</span>,<br />
&nbsp; &nbsp; <span class="st0">'no-java-background'</span> =&gt; <span class="st0">'return !in_array(&quot;Java&quot;, $item[&quot;languages&quot;]);'</span>,<br />
&nbsp; &nbsp; <span class="st0">'cheap'</span> =&gt; <span class="st0">'return $item[&quot;rate&quot;] &lt;= 50;'</span>,<br />
&nbsp; &nbsp; <span class="st0">'multi-lingual'</span> =&gt; <span class="st0">'return count($item[&quot;languages&quot;]) &gt;= 2;'</span>,<br />
<span class="br0">&#41;</span>;<br />
<br />
<span class="re0">$programmers</span> = filter<span class="br0">&#40;</span><span class="re0">$programmers</span>, <span class="re0">$conditions</span><span class="br0">&#41;</span>;<br />
<a href="http://www.php.net/echo"><span class="kw3">echo</span></a> <a href="http://www.php.net/join"><span class="kw3">join</span></a><span class="br0">&#40;</span><span class="st0">', '</span>, <a href="http://www.php.net/array_keys"><span class="kw3">array_keys</span></a><span class="br0">&#40;</span><span class="re0">$programmers</span><span class="br0">&#41;</span><span class="br0">&#41;</span>; <span class="co1">// Outputs &quot;Jim, Jack&quot;</span></div>
<p>Of course this is just a very simple example but you should get my point: create_function allows you to create very flexible functions that help you to save many lines of code.  Also note that the filter function I showed here just takes code snippets as conditions and takes care of calling create_function for you. While this is neat in certain situations, you get more flexibility if you allow your conditions to be callbacks so you can use new functions created using 'create_function' or existing functions to do your filtering.</p>
<p>Another neat way to use create_function is to create temporary shortcuts to already existing functions with some parameters being pre-populated:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$formatDate</span>= <a href="http://www.php.net/create_function"><span class="kw3">create_function</span></a><span class="br0">&#40;</span><span class="st0">'$date = null'</span>, <span class="st0">'return date('</span>.<span class="re0">$user</span><span class="br0">&#91;</span><span class="st0">&quot;User&quot;</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="st0">&quot;date_format&quot;</span><span class="br0">&#93;</span>.<span class="st0">', $date)'</span><span class="br0">&#41;</span>;<br />
<br />
<a href="http://www.php.net/echo"><span class="kw3">echo</span></a> <span class="st0">&quot;Hello &quot;</span>.<span class="re0">$user</span><span class="br0">&#91;</span><span class="st0">'User'</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="st0">'name'</span><span class="br0">&#93;</span>.<span class="st0">' today is '</span>.<span class="re0">$formatDate</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="st0">&quot;<span class="es0">\n</span><span class="es0">\n</span>&quot;</span>;<br />
<a href="http://www.php.net/echo"><span class="kw3">echo</span></a> <span class="st0">&quot;Your most recent emails are:<span class="es0">\n</span>&quot;</span>;<br />
<span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="re0">$user</span><span class="br0">&#91;</span><span class="st0">'Email'</span><span class="br0">&#93;</span> <span class="kw1">as</span> <span class="re0">$email</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <a href="http://www.php.net/echo"><span class="kw3">echo</span></a> <span class="re0">$formatDate</span><span class="br0">&#40;</span><span class="re0">$email</span><span class="br0">&#91;</span><span class="st0">'date'</span><span class="br0">&#93;</span><span class="br0">&#41;</span>.<span class="st0">' - '</span>.<span class="re0">$email</span><span class="br0">&#91;</span><span class="st0">'Subject'</span><span class="br0">&#93;</span>.<span class="st0">&quot;<span class="es0">\n</span>&quot;</span>;<br />
<span class="br0">&#125;</span></div>
<p>Now of course this style of coding is not for the faint of heart and I would not recommend it to everybody / every environment. But if you decide to use it make sure to validate eventual user-enterable data for not containing PHP code to avoid security problems.</p>
<p>Alright, I hope some of you find this useful and I'd be interested in what ways you have discovered to use those lambda style functions in PHP.</p>
<p>-- Felix Geisendörfer aka the_undefined</p>
<p>PS: The filter function from above can be simplified further like this:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">function</span> filter<span class="br0">&#40;</span><span class="re0">$items</span>, <span class="re0">$conditions</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="re0">$conditions</span> <span class="kw1">as</span> <span class="re0">$name</span> =&gt; <span class="re0">$condition</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$items</span> = <a href="http://www.php.net/array_filter"><span class="kw3">array_filter</span></a><span class="br0">&#40;</span><span class="re0">$items</span>, <a href="http://www.php.net/create_function"><span class="kw3">create_function</span></a><span class="br0">&#40;</span><span class="st0">'$item'</span>, <span class="re0">$condition</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; <span class="kw1">return</span> <span class="re0">$items</span>;<br />
<span class="br0">&#125;</span></div>
<p>I just wanted to keep things simple for the example.<br />
<img style="display: none;" src="http://debuggable.com/posts/tick/480f4dd6-b9b0-47e3-b3e5-4c57cbdd56cb"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fmy-new-best-friend-phps-create_function%3A480f4dd6-b9b0-47e3-b3e5-4c57cbdd56cb &amp;title=My+new+best+friend+-+PHP%27s+create_function%28%29';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fmy-new-best-friend-phps-create_function%3A480f4dd6-b9b0-47e3-b3e5-4c57cbdd56cb';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fmy-new-best-friend-phps-create_function%3A480f4dd6-b9b0-47e3-b3e5-4c57cbdd56cb&amp;title=My+new+best+friend+-+PHP%27s+create_function%28%29&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fmy-new-best-friend-phps-create_function%3A480f4dd6-b9b0-47e3-b3e5-4c57cbdd56cb&amp;title=My+new+best+friend+-+PHP%27s+create_function%28%29';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>

			<p>You can <a href="#comment_form">skip to the end</a> and add a comment.</p>
	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/my-new-best-friend-phps-create_function:480f4dd6-b9b0-47e3-b3e5-4c57cbdd56cb">15 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/my-new-best-friend-phps-create_function:480f4dd6-b9b0-47e3-b3e5-4c57cbdd56cb#CommentAddForm">Add Comment</a>	</div>
	<div class="post_comments">
	<div class="clear"></div>
									<div id="comment-480f4de9-ae2c-45c1-80b9-46d2cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=160ccf32d182943c355d6ac054148b34&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://freakcode.wordpress.com" rel="nofollow">Henrique</a>						</strong>
						<strong>said 
						on May 18, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Wow, I wasn't aware of this neat function! It looks very flexible and gave me some ideas. Also, I guess it can be very harmful too, as the "code snippets" on the array aren't parsed by PHP before they get used/created, you can have your app throwing some very unexpected errors which can be hard to debug right? Maybe test driven development can be used to solve this issue.</p>
<p>PS: Nice blog, I'm subscribing to the feed!</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dea-2370-497f-baa5-47d7cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=b270646960f33150e9f50a67137bd6b1&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Georgi&nbsp;						</strong>
						<strong>said 
						on May 18, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Hey there,<br />
nice code but...</br><br />
have you tested if there are performance hits? because I'm think that if we make a cost-benefit analysis( op-code cache, memory allocation, debugging ), the traditional approach will prove to be far more efficient.</br><br />
however, that's a cool idea which may quite be useful in some cases.</br></p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dea-77fc-4554-a470-4d27cbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/felix" rel="nofollow">Felix Geisendörfer</a>						</strong>
						<strong>said 
						on May 18, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Henrique: Yeah create_function is not for the faint of heart and I don't recommend you to go out and throw it in wherever you can. But I think there are many legitimate use-cases for it and it should be a neat little asset in any PHP coders bag of tricks ; ).</p>
<p>Georgi: No I have not : ). The reason I smile is because this is very unlikely to ever become a performance leak. Not because it might not be slower then the traditional approaches (not even sure if it is), but because bottlenecks are usually on the database side of big applications. So unless you are going to filter a million items with this on a heavy traffic site please check out what chris hartjes thinks about things like this:</p>
<p>http://www.littlehart.net/atthekeyboard/2007/01/02/just-build-it-damnit/</p>
<p>And also: Anything I will blog about here will show you how to solve programming problems faster and save development time rather then CPU cycles. The reason for that is that the latter is getting increasingly cheaper allowing us to be much more wasteful with it. If you are unwilling to accept the idea of writing unoptimized code and knowing it, checkout http://paulgraham.com/hundred.html and read how wasteful programming languages have gotten in the past and will more and more do so in future : ).</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dea-94ac-40ec-9466-4983cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.phpdeveloper.org/news/7874" rel="nofollow">PHPDeveloper.org</a>						</strong>
						<strong>said 
						on May 18, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p><strong>Felix Geisendorfer's Blog: My new best friend - PHP's create_function()...</strong></p>
<p>...</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dea-ddc8-4d0d-8748-4c0dcbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.developercast.com/2007/05/18/felix-geisendorfers-blog-my-new-best-friend-phps-create_function/" rel="nofollow">developercast.com &raquo; Felix Geisendorfer&#8217;s Blog: My ne</a>						</strong>
						<strong>said 
						on May 18, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>[...] In a new post to his blog today, Felix Geisendorfer wants to introduce you to his new best friend in the wonderful world of PHP - the create_function function.   His name is &#8216;create_function&#8216; and he&#8217;s a really useful co-worker. For those of you who just vaguely know him - don&#8217;t worry, he&#8217;s not so much like his ev(a|i)l cousin. Well, that doesn&#8217;t mean he can&#8217;t be harmful, but he&#8217;s more likely to help you instead. [...]</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dea-4750-423f-b333-4ebbcbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=b270646960f33150e9f50a67137bd6b1&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Georgi&nbsp;						</strong>
						<strong>said 
						on May 18, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Hey Felix,<br />
yes, I read Chris Hartjes' blog, too :) the main problem I have is that I try to optimise my code even when it works relatively fine ( stupid maximalism.. )</br><br />
you're absolutely right that hardware time is much more cheaper than your own. And I agree that the snippet of code you suggest is at least very interesting. I have personally witnessed large sites being lagged because of web servers' performance ( which is rare, as you mentioned ) but is worth being noted.</br><br />
Wonderful blog entry ( all of your blogs are quite interesting, indeed ) - it's just me being too traditional :)</br></p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dea-0d2c-4773-857c-4bb1cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=32f1342706af2f1b5dfa66378d96036a&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://metapundit.net/sections/blog" rel="nofollow">metapundit</a>						</strong>
						<strong>said 
						on May 19, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Georgi said<br />
&gt;have you tested if there are performance hits?</br></p>
<p>This is a problem with create_function. Especially if you're doing it in a loop or calling it repeatedly in any way the memory usage goes up dramatically as compared to more traditional methods.  It's basically a memory leak in that you've created a function but when the variable that holds its name goes out of scope the function is orphaned but not garbage collected.</p>
<p>I really like the technique though for making succinct code that uses array_map and friends. Especially for pre-filling the arguments to an existing function for repeated reuse - this technique is called partial function application and I wrote a blog post about writing a class to implement the technique but make sure the result gets garbage collected.  See the post (http://metapundit.net/sections/blog/partial_function_application_in_php) with the results table (http://metapundit.net/samples/test.php.html) and sample code (http://metapundit.net/samples/test.php.html).</p>
<p>I should warn that I'm incapable of brevity when tech blogging...</p>
<p>Good write, up, btw...</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dea-7b64-42a1-b092-429acbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://richardathome.wordpress.com/2007/05/19/links-for-2007-05-19/" rel="nofollow">links for 2007-05-19 &laquo; Richard@Home</a>						</strong>
						<strong>said 
						on May 19, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>[...] ThinkingPHP and beyond » My new best friend - PHP’s create_function() I need to re-read this without the benefit of 1/2 a bottle of peach snapps&#8230; (tags: php create_function toread) [...]</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dea-fbdc-4c2b-b2d7-4787cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=8ea6a61a387bf2b2d99e664735d99a99&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://millenomigmail.com" rel="nofollow">l0ne</a>						</strong>
						<strong>said 
						on May 19, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>The huge problem with create_function is that functions created with it are kept in memory for the duration of the program -- even if $formatDate is later unset! -- making them unsuitable to be used as one would use closures. Luckily PHP processes die quickly enough that this might not be a problem if used sparingly.</p>
<p>The best way to use them is to assign them to static vars:</p>
<p> static $formatDate = null; if (!$formatDate) $formatDate = create_function...</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dea-2be0-49f8-aa6d-4b18cbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/felix" rel="nofollow">Felix Geisendörfer</a>						</strong>
						<strong>said 
						on May 19, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Georgi: Good : ). I was one of the pre-optimizers for years. Not as much as some folks, but bad enough to turn good functions into unreadable pieces of optimized maintenance nightmares every once in a while ^^.</p>
<p>l0ne: If you let me know where I'll donate you some kb of RAM so you can get fancy with this : p. No I agree, this is not going to get equally good as JS closures for several reasons. For one, you have to write your code within a string which is unsuitable for anything more difficult then a quick 2-3 liner. There also is the lack of lexical scoping that sucks (if it wasn't for that, my filter function above could be turned into a 1-liner).</p>
<p>So again, I was not suggesting the $formatDate function would be an ideal use case. Personally I only use this shortcut approach in one function in a very big application. The scenario is that I need to call another function with lots of parameters from within this function. But since most of the parameters besides 1/2 are always the same, I made a shortcut using create_function to save myself typing work and keep my code more DRY. For filtering / temporary transformation functions however, I use this quite a lot as it gives me the kind of power I like to have as a programmer ^^.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dea-651c-4f24-8f8c-4257cbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/felix" rel="nofollow">Felix Geisendörfer</a>						</strong>
						<strong>said 
						on May 19, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>metapundit: Interesting. Thanks for sharing.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dea-9f28-4787-89cd-4276cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=994aa91c4ebf600ab3a6a3c91d599dcd&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							How&nbsp;						</strong>
						<strong>said 
						on May 19, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>function filter($items, $conditions = array()) {<br />
...</br><br />
   $items = ... create_function('$item', ((stpos('return ')===false)?'return '.$condition.';':$condition) ));</br><br />
...</br></p>
<p>and your conditions will be simplified (no "return " and ";" needed):</p>
<p>$conditions = array(<br />
    'knows-php' =&gt; 'in_array("PHP", $item["languages"])',</br><br />
    'no-java-background' =&gt; '!in_array("Java", $item["languages"])',</br><br />
    'cheap' =&gt; '$item["rate"]  'count($item["languages"])&gt;= 2',</br><br />
);</br></p>
<p>P.S. there might be problem using "return " inside the function: =&gt;'in_array('return ',$a)'</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dea-13c8-4e92-991d-4b3dcbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/felix" rel="nofollow">Felix Geisendörfer</a>						</strong>
						<strong>said 
						on May 19, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>How: I'm aware about this possibility for code reduction but thx for sharing it with the others. When I post things here I will usually only focus on one particular code simplification and not apply every single one I might be able to come up with for keeping things easier to understand and follow.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dea-f3a4-4bfa-a9cb-4c17cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=f0b8fa14cbee5edfdeeac6b8f9ad062d&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://sanisoft.com/" rel="nofollow">Tarique Sani</a>						</strong>
						<strong>said 
						on May 21, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>http://blog.libssh2.org/index.php?/archives/60-create_function-is-not-your-friend.html#extended  </p>
<p>I agree :)</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4b04c473-51d0-4b33-aa6d-33c7cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=f97c0d31f4ca734397a7966e980d4db9&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.scribd.com/doc/460225/Lotro-Guide" rel="nofollow">Romihoumb</a>						</strong>
						<strong>said 
						on Nov 19, 2009:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p><a rel="nofollow" href=<a rel="nofollow" href="http://www.scribd.com/doc/460225/Lotro-Guide><img />http://potshot.files.wordpress.com/2007/12/lotro-horse.jpg</a>">http://www.scribd.com/doc/460225/Lotro-Guide><img />http://potshot.files.wordpress.com/2007/12/lotro-horse.jpg</p>
<p><b>lotro leveling guide</b><br />
If leveling takes you alot of time and you are always running out of gold, or you are just not sure which vocation is the correct choice for your character.</br><br />
Then you have to visit <a rel="nofollow" href=<a rel="nofollow" href="http://www.scribd.com/doc/460225/Lotro-Guide><b>lotro">http://www.scribd.com/doc/460225/Lotro-Guide></b><b>lotro</b></a> leveling guide</br></p>
				</div>
				<div class="clear"></div>
							</div>
	  	
				<div class="divider"></div>
		<a name="comment_form"></a>
		<p>This post is too old. We do not allow comments here anymore in order to fight spam. If you have real feedback or questions for the post, please <a href="/contact">contact us</a>.</p>
	</div></div>
	
</div>
<div class="grid_4 prefix_1 omega" id="sidebar">
	<cake:nocache>
			</cake:nocache>

	<h3>RSS Feeds</h3>
	<div id="bug">
		<img src="/img/rss_bug.png" alt="" />	</div>
	<div class="rss">
		<p class="bug-message"></p>
		<a href="http://feeds.feedburner.com/debuggable">Blog RSS</a><br/>
		<a href="http://feeds.feedburner.com/debuggable-comments">Comments RSS</a><br/><br/>
		<img width="88" height="26" alt="" style="border: 0pt none ;" src="http://feeds.feedburner.com/~fc/debuggable?bg=FF9933&amp;fg=444444&amp;anim=0"/>
		<div class="clear"></div>
	</div>

	<h3>Recent Posts</h3>
	<ul>
<li class=""><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb">Releasing node-mysql 2.0.0-alpha</a></li><li class=""><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb">How to write jQuery plugins</a></li><li class=""><a href="/posts/vim-workshop-in-berlin-april-20:4f702b83-ce24-429c-9403-0e39cbdd56cb">Vim Workshop in Berlin (April 20)</a></li><li class=""><a href="/posts/npm-an-intervention:4f44dd25-a114-4361-ada1-6cefcbdd56cb">NPM - An intervention</a></li><li class="active"><a href="/posts/testing-node-js-modules-with-travis-ci:4ec62298-aec4-4ee3-8b5a-2c96cbdd56cb">Testing node.js modules with Travis CI</a></li><li class=""><a href="/posts/private-npm-modules:4e68cc7d-1ac4-42d9-995a-343dcbdd56cb">Private npm modules</a></li></ul>
	<h3>Archive</h3>
	<p class="small align">
		<strong>443 Posts</strong>, <strong>4608 Comments</strong><br /><br />
		We are on air since 2006. Take a tour through the
		<a href="/posts/archive">blog archive</a>.
	</p>
	<div class="search">
	<form id="PostSearchForm" method="post" action="/posts/search"><fieldset style="display:none;"><input type="hidden" name="_method" value="POST" /></fieldset><input name="data[Post][keywords]" type="text" value="" id="PostKeywords" /><input type="submit" class="button" value="Search" /></form>	<div class="clear"></div>
</div>
	<h3>Recent Comments</h3>
	<div class="recent-comments">
		<div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd32b85-220c-4fc8-84b2-378fcbdd56cb">William: thanks, fixed ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=b47010beec892f11619d1e81f0c94f11&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd30119-06fc-4712-aecd-7fa5cbdd56cb">Hi Felix,

The Upgra ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=99b59e8a9cfe2c5575f0fa90f7f30307&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f99a4a2-9ad8-4476-b208-611acbdd56cb">Maybe you can write so ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=8364689a1eefb5eceb6a4f38bbf95731&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f9651b9-eb88-4096-94c1-0fc2cbdd56cb">This is very nice plug ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=7e3d69d16d3b845e89198512355b2ac9&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f8bb75a-96cc-4197-8e93-7c63cbdd56cb">Nice article!

Somet ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f83326b-8c28-43fc-b70d-097ecbdd56cb">That&#039;s fine ognian, th ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=994516a664c2bdc728d18c47e935bc14&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f832a25-5818-4d38-9e39-097ecbdd56cb">Really nice work! I wa ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c15ca-c7c4-48e3-a4db-27decbdd56cb">@Jörn: Sorry, thought  ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d5d83832be2b6c70d1968635f68a1b4a&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c11aa-6f9c-448c-abdb-2066cbdd56cb">Thanks didn&#039;t quite un ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7bf934-d4e8-4885-9a2c-7a93cbdd56cb">Well you could expose  ..</a></div><div class="clear_left"></div>	</div>
	<div class="clear_left"></div>
	<h3>Keep an eye on</h3>
<ul class="links external">
	<li><a href="http://transloadit.com" title="Video encoding, image resizing and more for your web or mobile app">Transloadit</a></li><li><a href="http://tus.io" title="Resumable file uploading, upload progress bar, faster upload speed">tus - resumable file upload protocol</a></li><li><a href="http://kevin.vanzonneveld.net/">Kevin van Zonneveld</a></li><li><a href="http://www.littlehart.net/atthekeyboard/">Chris Hartjes</a></li><li><a href="http://mark-story.com">Mark Story</a></li><li><a href="http://www.webbosaurus.de">Webbosaurus</a></li></ul>
	<a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number' title='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'><img src='http://static.jsconf.us/promotejshs.png' height='150' width='180' alt='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'/></a>
</div>

						<div class="clear">&nbsp;</div>
		</div>

		<div id="footer">
			<div class="container_16">
				<ul id="footer_navigation">
					<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>				</ul>
				<p>&copy; 2008 - 2015, Debuggable Ltd. All rights reserved.
				<i>Designed by <a href="http://www.fluidcore.net" target="_blank">fluidCORE</a>.</i>
			</div>
		</div>
	</div>
	<script type="text/javascript" src="/js/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/5627ea2806458e56fb8a5f4b231a44c2.php"></script><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-3306079-3']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script');
ga.src = ('https:' == document.location.protocol ?
    'https://ssl' : 'http://www') +
    '.google-analytics.com/ga.js';
ga.setAttribute('async', 'true');
document.documentElement.firstChild.appendChild(ga);
})();
</script></body>
</html>
