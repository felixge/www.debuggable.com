<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
	<title>Composing Methods: Remove Assignments to Parameters &raquo; Debuggable - Node.js Consulting</title>

	<link href="http://feeds.feedburner.com/debuggable" type="application/rss+xml" rel="alternate" title="RSS 2.0" />	<link rel="pingback" href="Debuggable.com/pingback" />
	<link rel="stylesheet" type="text/css" href="/css/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/4026ee2275e22a4e5ec8aea13747c557.php" /></head>
	<body>
		<div class="container_16">
			<h1 id="logo-text"><a href="/">debuggable</a></h1>
			<ul id="navigation">
				<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>			</ul>
			<div class="clear">&nbsp;</div>

			<div id="blueprint">
				<a href="/contact" class="contact">Contact Us</a>			</div>

			<div class="clear">&nbsp;</div>
			<div class="grid_11 alpha" id="content">
	<cake:nocache>
			<div class="messages empty"></div>
	</cake:nocache>
	<div class="post">
	<h2><a href="/posts/composing-methods-remove-assignments-to-parameters:480f4dfe-5bd4-4ef7-8c05-4b5ecbdd56cb">Composing Methods: Remove Assignments to Parameters</a></h2>	<div class="posted-on">
		<p>Posted on 6/7/07 by 
		<a href="/tim">Tim Kosch√ºtzki</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/tim_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p><strong>When your code assigns to a parameter in a function/method, use a temporary variable instead.</strong></p>
<h1>Motivation</h1>
<p>With assigning to a parameter I mean that when you pass in an object foo,  you do not make it refer to a different object. Changing a parameter object is perfectly cool and I do that myself all the time. Just do not make it reference another object, like:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">function</span> aFunction<span class="br0">&#40;</span><span class="re0">$foo</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="re0">$foo</span>-&gt;<span class="me1">modify</span><span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
&nbsp; <span class="re0">$foo</span> = <span class="kw2">new</span> SomeOtherClass;<br />
<span class="br0">&#125;</span></div>
<p>The reason this is so awkward is the confusion between pass by value and pass by reference in PHP. Whereas in PHP4 everything was<br />
passed in by value as default, PHP5 passes objects around by reference. In PHP4 when you assign the parameter another object this will not be reflected in the calling routine, which can lead to quite nasty bugs if you forget to insert the by-reference operator (&).</p>
<p>In PHP5 this is not so much of a problem as it passes objects around by reference anyways. So if, in PHP5, you assign to a parameter you must have a good reason anyways, because you will change the parameter object also in the calling routine with your assignment. However, I find that in PHP5 there is another area of confusion making this refactoring worthwhile for both PHP4 and PHP5. That area of confusion is within the body of the code itself. It is much clearer to use only the parameter to represent what has been passed in, because that is consistent usage and therefore a good coding practice.</p>
<p>It will make your code much more readable and prevents by-reference confusion and therefore big problems in the future. In PHP5, assigning to an parameter object within a method will not be reflected outside the method. So I suggest you just don't do it anyways. There seems to be no point in it anyways.</p>
<p>Think of hairloss. ;] Haha, I seem to be bringing up hairloss all the time in connection with bug fixing. :]</p>
<h1>Mechanics</h1>
<ul>
<li>Create a temporary variable for the parameter.</li>
<li>Replace all references to the parameter, made after the assignment, to the temporary variable.</li>
<li>Change the assignment to assign to the temporary variable.</li>
<li>If you are on PHP5 or PHP4 (using the by-reference operator), look in the calling method to see if the parameter is used again afterward and try to understand what is changed where in your code and document that. Make sure you only return one value from the method. If more than one call-by-reference parameter is assigned to and returned, try to use a data clump or <a href="http://php-coding-practices.com/refactoring/composing-methods/how-to-compose-methods-the-extract-method-refactoring/">Extract Method</a>.</li>
</ul>
<h1>Code Example</h1>
<p>Let's start with the following routine:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">function</span> price<span class="br0">&#40;</span><span class="re0">$inputVal</span>, <span class="re0">$quantity</span>, <span class="re0">$anotherFactor</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$inputVal</span> &gt; <span class="nu0">50</span><span class="br0">&#41;</span> <span class="re0">$inputVal</span> -= <span class="nu0">30</span>;<br />
&nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$quantity</span> &gt; <span class="nu0">20</span><span class="br0">&#41;</span> <span class="re0">$inputVal</span> -= <span class="nu0">5</span>;<br />
&nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$anotherFactor</span>&gt; <span class="nu0">1000</span><span class="br0">&#41;</span> <span class="re0">$inputVal</span> -= <span class="nu0">2</span>;<br />
&nbsp; <span class="kw1">return</span> <span class="re0">$inputVal</span>;<br />
<span class="br0">&#125;</span><br />
<br />
<a href="http://www.php.net/echo"><span class="kw3">echo</span></a> price<span class="br0">&#40;</span><span class="nu0">50</span>, <span class="nu0">10</span>, <span class="nu0">1200</span><span class="br0">&#41;</span>;</div>
<p>Replacing with a temp leads to:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">function</span> price<span class="br0">&#40;</span><span class="re0">$inputVal</span>, <span class="re0">$quantity</span>, <span class="re0">$anotherFactor</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="re0">$result</span> = <span class="re0">$inputVal</span>;<br />
&nbsp; <br />
&nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$inputVal</span> &gt; <span class="nu0">50</span><span class="br0">&#41;</span> <span class="re0">$result</span> -= <span class="nu0">30</span>;<br />
&nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$quantity</span> &gt; <span class="nu0">20</span><span class="br0">&#41;</span> <span class="re0">$result</span> -= <span class="nu0">5</span>;<br />
&nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$anotherFactor</span>&gt; <span class="nu0">1000</span><span class="br0">&#41;</span> <span class="re0">$result</span> -= <span class="nu0">2</span>;<br />
&nbsp; <span class="kw1">return</span> <span class="re0">$result</span> ;<br />
<span class="br0">&#125;</span><br />
<br />
<a href="http://www.php.net/echo"><span class="kw3">echo</span></a> price<span class="br0">&#40;</span><span class="nu0">50</span>, <span class="nu0">10</span>, <span class="nu0">1200</span><span class="br0">&#41;</span>;</div>
<p>An easy refactoring, yet quite cool. I do it all the time. Will you, too?<br />
<img style="display: none;" src="http://debuggable.com/posts/tick/480f4dfe-5bd4-4ef7-8c05-4b5ecbdd56cb"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fcomposing-methods-remove-assignments-to-parameters%3A480f4dfe-5bd4-4ef7-8c05-4b5ecbdd56cb &amp;title=Composing+Methods%3A+Remove+Assignments+to+Parameters';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fcomposing-methods-remove-assignments-to-parameters%3A480f4dfe-5bd4-4ef7-8c05-4b5ecbdd56cb';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fcomposing-methods-remove-assignments-to-parameters%3A480f4dfe-5bd4-4ef7-8c05-4b5ecbdd56cb&amp;title=Composing+Methods%3A+Remove+Assignments+to+Parameters&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fcomposing-methods-remove-assignments-to-parameters%3A480f4dfe-5bd4-4ef7-8c05-4b5ecbdd56cb&amp;title=Composing+Methods%3A+Remove+Assignments+to+Parameters';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>
	<div class="related-posts">
		<h3>(Theoretically) Related Posts</h3>
				<ul class="first">
							<li><a href="/posts/how-to-execute-only-specific-test-methods-in-cakephp-unit-tests:4858fa7b-7194-4652-9c7f-47784834cda3">How To Execute Only Specific Test Methods in CakePHP Unit Tests</a></li>
							<li><a href="/posts/how-to-compose-methods-the-extract-method-refactoring:480f4dfe-c0d8-48ac-9d91-4b47cbdd56cb">How To Compose Methods: The Extract Method Refactoring</a></li>
							<li><a href="/posts/composing-methods-inline-temp:480f4dfe-73c0-49ec-ad00-4ec6cbdd56cb">Composing Methods: Inline Temp</a></li>
							<li><a href="/posts/composing-methods-substitute-algorithmn:480f4dfe-30e4-407a-97bf-468dcbdd56cb">Composing Methods: Substitute Algorithmn</a></li>
							<li><a href="/posts/cakephp-removecache-shell---remove-your-cache-files-easily:4a277938-977c-43bc-bd83-645c4834cda3">CakePHP RemoveCache Shell - Remove Your Cache Files Easily</a></li>
					</ul>
		<ul>
							<li><a href="/posts/composing-methods-replace-temp-with-query:480f4dfe-bd20-435d-8a18-4495cbdd56cb">Composing Methods: Replace Temp With Query</a></li>
							<li><a href="/posts/composing-methods-split-temporary-variable:480f4dfe-1e28-4e32-b4b3-458ccbdd56cb">Composing Methods: Split Temporary Variable</a></li>
							<li><a href="/posts/composing-methods-introduce-explaining-variable:480f4dfe-23f4-4fa4-b586-413fcbdd56cb">Composing Methods: Introduce Explaining Variable</a></li>
					</ul>
	</div>
	<div class="clear">&nsbp;</div>

			<p>You can <a href="#comment_form">skip to the end</a> and add a comment.</p>
	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/composing-methods-remove-assignments-to-parameters:480f4dfe-5bd4-4ef7-8c05-4b5ecbdd56cb">9 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/composing-methods-remove-assignments-to-parameters:480f4dfe-5bd4-4ef7-8c05-4b5ecbdd56cb#CommentAddForm">Add Comment</a>	</div>
	<div class="post_comments">
	<div class="clear"></div>
									<div id="comment-480f4e02-126c-4c40-b7fd-4a60cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.developercast.com/2007/07/06/tim-koschuetzkis-blog-composing-methods-remove-assignments-to-parameters/" rel="nofollow">developercast.com &raquo; Tim Koschuetzki&#8217;s Blog: Composin</a>						</strong>
						<strong>said 
						on Jul 06, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>[...] another part of his &#8220;Composing Methods&#8221; series, Tim Koschuetzki posts about removing assignments to parameters today - working with a temporary variable inside a method rather [...]</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4e02-3e90-4755-8f1b-497acbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=3b03ea75684fe0dc76bab85cc1fadc2e&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://weirdan.livejournal.com" rel="nofollow">Bruce Weirdan</a>						</strong>
						<strong>said 
						on Jul 07, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Unlike what you've said PHP5 *does not* pass objects by reference by default. Assignment to function/method parameter will not be reflected in the outer scope:<br />
[weirdan@server ~]$ /usr/local/bin/php -r 'function func($q) { $q = new stdClass; } $e = new stdClass; $e-&gt;q="asd"; var_dump("before", $e); func($e); var_dump("after", $e);'</br><br />
string(6) "before"</br><br />
object(stdClass)#1 (1) {</br><br />
  ["q"]=&gt;</br><br />
  string(3) "asd"</br><br />
}</br><br />
string(5) "after"</br><br />
object(stdClass)#1 (1) {</br><br />
  ["q"]=&gt;</br><br />
  string(3) "asd"</br><br />
}</br></p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4e02-9314-409f-b83e-4a0dcbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=3b03ea75684fe0dc76bab85cc1fadc2e&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://weirdan.livejournal.com" rel="nofollow">Bruce Weirdan</a>						</strong>
						<strong>said 
						on Jul 07, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>oh, forgot to mention the php version:<br />
[weirdan@server ~]$ /usr/local/bin/php -v</br><br />
PHP 5.2.3 (cli) (built: Jun 21 2007 12:29:33)</br></p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4e02-c55c-48c7-8fa7-42e4cbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=9c31d1102d95104fb994ae67cd1989b6&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/tim" rel="nofollow">Tim Koschuetzki</a>						</strong>
						<strong>said 
						on Jul 07, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">class</span> a <span class="br0">&#123;</span><br />
&nbsp; <span class="kw2">public</span> <span class="re0">$val</span>;</br><br />
&nbsp; <span class="kw2">public</span> <span class="kw2">function</span> __construct<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span></br><br />
&nbsp; &nbsp; <span class="re0">$this</span>-&gt;<span class="me1">val</span> = <span class="nu0">1</span>;</br><br />
&nbsp; <span class="br0">&#125;</span></br><br />
&nbsp; <span class="kw2">public</span> <span class="kw2">function</span> modify<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span></br><br />
&nbsp; &nbsp; <span class="re0">$this</span>-&gt;<span class="me1">val</span>++;</br><br />
&nbsp; <span class="br0">&#125;</span></br><br />
<span class="br0">&#125;</span></br><br />
</br><br />
<span class="kw2">function</span> func<span class="br0">&#40;</span><span class="re0">$q</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> </br><br />
&nbsp; <span class="re0">$q</span>-&gt;<span class="me1">modify</span><span class="br0">&#40;</span><span class="br0">&#41;</span>;</br><br />
<span class="br0">&#125;</span> </br><br />
</br><br />
<span class="re0">$e</span> = <span class="kw2">new</span> a; </br><br />
</br><br />
</br><br />
<a href="http://www.php.net/echo"><span class="kw3">echo</span></a> <span class="re0">$e</span>-&gt;<span class="me1">val</span>; </br><br />
func<span class="br0">&#40;</span><span class="re0">$e</span><span class="br0">&#41;</span>; </br><br />
</br><br />
<a href="http://www.php.net/echo"><span class="kw3">echo</span></a> <span class="re0">$e</span>-&gt;<span class="me1">val</span>; </br><br />
</br><br />
func<span class="br0">&#40;</span><span class="re0">$e</span><span class="br0">&#41;</span>; </br><br />
</br><br />
<a href="http://www.php.net/echo"><span class="kw3">echo</span></a> <span class="re0">$e</span>-&gt;<span class="me1">val</span>; </br><br />
</br><br />
func<span class="br0">&#40;</span><span class="re0">$e</span><span class="br0">&#41;</span>; </br><br />
</br><br />
<a href="http://www.php.net/echo"><span class="kw3">echo</span></a> <span class="re0">$e</span>-&gt;<span class="me1">val</span>; </br></div>
<p>outputs: 1234</p>
<p>Maybe php forbids assigning new objects to parameter object variables? Interesting.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4e02-45a0-481e-b96b-42dfcbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=3b03ea75684fe0dc76bab85cc1fadc2e&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://weirdan.livejournal.com" rel="nofollow">Bruce Weirdan</a>						</strong>
						<strong>said 
						on Jul 07, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>That I would call 'passing a pointer' in c++ terms. You can change the pointer inside your function and it will be referencing another data, but this change won't be reflected in the outer scope. But if you change *data* referenced by that pointer, the change would be visible outside (that's [in rough terms] is what you did in your code). And PHP does not forbid assigning anything to parameters, the assignment won't have any effect outside the function and that's all.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4e02-a248-40fa-8bff-4787cbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=9c31d1102d95104fb994ae67cd1989b6&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/tim" rel="nofollow">Tim Koschuetzki</a>						</strong>
						<strong>said 
						on Jul 08, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Hrm nice. :] I will change the article accordingly.</p>
<p>Thanks for letting me know!</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4e02-a3a8-4d1f-8e8c-478acbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=80acb818826f70823d6afb30d70fb5b9&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://sf.jogger.pl" rel="nofollow">php blog</a>						</strong>
						<strong>said 
						on Jul 19, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Yes, second example better :)</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4e02-6a9c-4d08-ac9f-4853cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=bb789e117185f8fa0e65379fc4cf9530&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Hodicska Gergely&nbsp;						</strong>
						<strong>said 
						on Jul 29, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>"It will make your code much more readable and prevents by-reference confusion and therefore big problems in the future. In PHP5, assigning to an parameter object within a method will not be reflected outside the method."</p>
<p>This is the normal behavior (if you are familiar with the internal representation of variables in PHP). A variable has two parts, an entry in a symbol table (the name of the variable), which points to a zval (C) struct (this holds the content of the variable). When you call a function/method, PHP create a local symbol table. The parameters of the function exist in this local symbol table.</p>
<p>function bar($obj) {<br />
    $obj = new Obj2();</br><br />
}</br><br />
// PHP creates an entry in the global symbol table, which points to the zval struct, which holds the object</br><br />
$foo = new Obj();</br><br />
// When you call the function an entry is created in an local symbol table, which points to the same zval struct.</br><br />
bar($foo);</br></p>
<p>// At this line the entry in the local symbol table points to the new zval struct which holds the newly created object. But the "foo" entry points to the original zval struct.<br />
$obj = new Obj2();</br></p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4861aad1-a394-4c05-bab1-3c894834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=5c744871d0cf0a9ead9eef0bd8320b40&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							deltawing1&nbsp;						</strong>
						<strong>said 
						on Jun 25, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Heheh. I used to use temp variables like this all the time until my peers advised me to stop doing it ...</p>
				</div>
				<div class="clear"></div>
							</div>
	  	
				<div class="divider"></div>
		<a name="comment_form"></a>
		<p>This post is too old. We do not allow comments here anymore in order to fight spam. If you have real feedback or questions for the post, please <a href="/contact">contact us</a>.</p>
	</div></div>
	
</div>
<div class="grid_4 prefix_1 omega" id="sidebar">
	<cake:nocache>
			</cake:nocache>

	<h3>RSS Feeds</h3>
	<div id="bug">
		<img src="/img/rss_bug.png" alt="" />	</div>
	<div class="rss">
		<p class="bug-message"></p>
		<a href="http://feeds.feedburner.com/debuggable">Blog RSS</a><br/>
		<a href="http://feeds.feedburner.com/debuggable-comments">Comments RSS</a><br/><br/>
		<img width="88" height="26" alt="" style="border: 0pt none ;" src="http://feeds.feedburner.com/~fc/debuggable?bg=FF9933&amp;fg=444444&amp;anim=0"/>
		<div class="clear"></div>
	</div>

	<h3>Recent Posts</h3>
	<ul>
<li class=""><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb">Releasing node-mysql 2.0.0-alpha</a></li><li class=""><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb">How to write jQuery plugins</a></li><li class=""><a href="/posts/vim-workshop-in-berlin-april-20:4f702b83-ce24-429c-9403-0e39cbdd56cb">Vim Workshop in Berlin (April 20)</a></li><li class=""><a href="/posts/npm-an-intervention:4f44dd25-a114-4361-ada1-6cefcbdd56cb">NPM - An intervention</a></li><li class="active"><a href="/posts/testing-node-js-modules-with-travis-ci:4ec62298-aec4-4ee3-8b5a-2c96cbdd56cb">Testing node.js modules with Travis CI</a></li><li class=""><a href="/posts/private-npm-modules:4e68cc7d-1ac4-42d9-995a-343dcbdd56cb">Private npm modules</a></li></ul>
	<h3>Archive</h3>
	<p class="small align">
		<strong>443 Posts</strong>, <strong>4608 Comments</strong><br /><br />
		We are on air since 2006. Take a tour through the
		<a href="/posts/archive">blog archive</a>.
	</p>
	<div class="search">
	<form id="PostSearchForm" method="post" action="/posts/search"><fieldset style="display:none;"><input type="hidden" name="_method" value="POST" /></fieldset><input name="data[Post][keywords]" type="text" value="" id="PostKeywords" /><input type="submit" class="button" value="Search" /></form>	<div class="clear"></div>
</div>
	<h3>Recent Comments</h3>
	<div class="recent-comments">
		<div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd32b85-220c-4fc8-84b2-378fcbdd56cb">William: thanks, fixed ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=b47010beec892f11619d1e81f0c94f11&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd30119-06fc-4712-aecd-7fa5cbdd56cb">Hi Felix,

The Upgra ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=99b59e8a9cfe2c5575f0fa90f7f30307&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f99a4a2-9ad8-4476-b208-611acbdd56cb">Maybe you can write so ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=8364689a1eefb5eceb6a4f38bbf95731&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f9651b9-eb88-4096-94c1-0fc2cbdd56cb">This is very nice plug ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=7e3d69d16d3b845e89198512355b2ac9&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f8bb75a-96cc-4197-8e93-7c63cbdd56cb">Nice article!

Somet ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f83326b-8c28-43fc-b70d-097ecbdd56cb">That&#039;s fine ognian, th ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=994516a664c2bdc728d18c47e935bc14&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f832a25-5818-4d38-9e39-097ecbdd56cb">Really nice work! I wa ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c15ca-c7c4-48e3-a4db-27decbdd56cb">@J√∂rn: Sorry, thought  ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d5d83832be2b6c70d1968635f68a1b4a&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c11aa-6f9c-448c-abdb-2066cbdd56cb">Thanks didn&#039;t quite un ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7bf934-d4e8-4885-9a2c-7a93cbdd56cb">Well you could expose  ..</a></div><div class="clear_left"></div>	</div>
	<div class="clear_left"></div>
	<h3>Keep an eye on</h3>
<ul class="links external">
	<li><a href="http://transloadit.com" title="Video encoding, image resizing and more for your web or mobile app">Transloadit</a></li><li><a href="http://tus.io" title="Resumable file uploading, upload progress bar, faster upload speed">tus - resumable file upload protocol</a></li><li><a href="http://kevin.vanzonneveld.net/">Kevin van Zonneveld</a></li><li><a href="http://www.littlehart.net/atthekeyboard/">Chris Hartjes</a></li><li><a href="http://mark-story.com">Mark Story</a></li><li><a href="http://www.webbosaurus.de">Webbosaurus</a></li></ul>
	<a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number' title='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'><img src='http://static.jsconf.us/promotejshs.png' height='150' width='180' alt='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'/></a>
</div>

						<div class="clear">&nbsp;</div>
		</div>

		<div id="footer">
			<div class="container_16">
				<ul id="footer_navigation">
					<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>				</ul>
				<p>&copy; 2008 - 2015, Debuggable Ltd. All rights reserved.
				<i>Designed by <a href="http://www.fluidcore.net" target="_blank">fluidCORE</a>.</i>
			</div>
		</div>
	</div>
	<script type="text/javascript" src="/js/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/5627ea2806458e56fb8a5f4b231a44c2.php"></script><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-3306079-3']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script');
ga.src = ('https:' == document.location.protocol ?
    'https://ssl' : 'http://www') +
    '.google-analytics.com/ga.js';
ga.setAttribute('async', 'true');
document.documentElement.firstChild.appendChild(ga);
})();
</script></body>
</html>
