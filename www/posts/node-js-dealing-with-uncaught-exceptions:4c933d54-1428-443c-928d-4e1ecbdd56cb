<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
	<title>node.js - Dealing with uncaught exceptions  &raquo; Debuggable - Node.js Consulting</title>

	<link href="http://feeds.feedburner.com/debuggable" type="application/rss+xml" rel="alternate" title="RSS 2.0" />	<link rel="pingback" href="Debuggable.com/pingback" />
	<link rel="stylesheet" type="text/css" href="/css/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/4026ee2275e22a4e5ec8aea13747c557.php" /></head>
	<body>
		<div class="container_16">
			<h1 id="logo-text"><a href="/">debuggable</a></h1>
			<ul id="navigation">
				<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>			</ul>
			<div class="clear">&nbsp;</div>

			<div id="blueprint">
				<a href="/contact" class="contact">Contact Us</a>			</div>

			<div class="clear">&nbsp;</div>
			<div class="grid_11 alpha" id="content">
	<cake:nocache>
			<div class="messages empty"></div>
	</cake:nocache>
	<div class="post">
	<h2><a href="/posts/node-js-dealing-with-uncaught-exceptions:4c933d54-1428-443c-928d-4e1ecbdd56cb">node.js - Dealing with uncaught exceptions </a></h2>	<div class="posted-on">
		<p>Posted on 17/9/10 by 
		<a href="/felix">Felix Geisend√∂rfer</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/felix_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p>I just ran into a really nasty bug related to node's <a href="http://nodejs.org/api.html#event-uncaughtexception-54">process.on('uncaughtException')</a> handler and thought I should share my experience.</p>

<p>Basically you need to be very careful with handling uncaught exceptions in node. Ideally you should just send out an error email and perform a graceful restart of your service whenever you hit an uncaught exception.</p>

<p>Why? Well, if you think you can use <code>"uncaughtException"</code> to just resume your service as if nothing had happened, you may be in for a nice suprise. Consider the following example:</p>

<p><div class="clear"></div><div class="code debuggable_sh_js" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">var</span> fs = require<span class="br0">&#40;</span><span class="st0">'fs'</span><span class="br0">&#41;</span>;<br />
<br />
process.<span class="me1">on</span><span class="br0">&#40;</span><span class="st0">'uncaughtException'</span>, <span class="kw2">function</span><span class="br0">&#40;</span>err<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span>err<span class="br0">&#41;</span>;<br />
<span class="br0">&#125;</span><span class="br0">&#41;</span>;<br />
<br />
<span class="kw2">var</span> file = fs.<span class="me1">createReadStream</span><span class="br0">&#40;</span>__filename, <span class="br0">&#123;</span>encoding: <span class="st0">'utf8'</span><span class="br0">&#125;</span><span class="br0">&#41;</span>;<br />
file<br />
&nbsp; .<span class="me1">on</span><span class="br0">&#40;</span><span class="st0">'data'</span>, <span class="kw2">function</span><span class="br0">&#40;</span>b<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span><span class="st0">'data event fired'</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="kw1">throw</span> <span class="kw2">new</span> Error<span class="br0">&#40;</span><span class="st0">'oh no'</span><span class="br0">&#41;</span>;<br />
&nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><br />
&nbsp; .<span class="me1">on</span><span class="br0">&#40;</span><span class="st0">'end'</span>, <span class="kw2">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span><span class="st0">'end event fired'</span><span class="br0">&#41;</span>;<br />
&nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>;</div></p>

<p>Unless you are very familar with the inner workings of <code>fs.ReadStream</code>, the assumed output sequence would be:</p>

<pre class="terminal">data event fired
{ message: 'oh no', stack: [Getter/Setter] }  
end event fired</pre>

<p>However, the actual output is:</p>

<pre class="terminal">data event fired
{ message: 'oh no', stack: [Getter/Setter] }</pre>

<p>You might already be able to guess what happens. The exception caused in the callback to the <code>'data'</code> event causes node to trigger the <code>"uncaughtException"</code> event, and drop the whole call stack after that. Unfortunately however, <code>"fs.ReadStream"</code> had plans to execute more code after firing this <code>"data"</code> callback, which doesn't get executed anymore, causing the <code>"end"</code> event to never fire.</p>

<p>This is a fairly harmless example. The bug I actually ran into caused my database queries to get out of order, so I was looking at the wrong end of my code base for quite a while.</p>

<p>So, unless you <em>really</em> know what you are doing, you should perform a graceful restart of your service after receiving an <code>"uncaughtException"</code> exception event. Otherwise you risk the state of your application, or that of 3rd party libraries to become inconsistent, leading to all kinds of crazy bugs.</p>

<p>Let me know if you have any questions, or other suggestions for dealing with uncaught exceptions!</p>

<p>--fg</p>

<p>PS: This bug was especially painful for, since I'm also to <a href="http://github.com/ry/node/commit/2b252acea47af3ebeac3d7e68277f015667264cc">blame</a> for <code>"uncaughtException"</code> being in the node core to begin with : ).</p>

<p><img style="display: none;" src="http://debuggable.com/posts/tick/4c933d54-1428-443c-928d-4e1ecbdd56cb"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fnode-js-dealing-with-uncaught-exceptions%3A4c933d54-1428-443c-928d-4e1ecbdd56cb &amp;title=node.js+-+Dealing+with+uncaught+exceptions+';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fnode-js-dealing-with-uncaught-exceptions%3A4c933d54-1428-443c-928d-4e1ecbdd56cb';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fnode-js-dealing-with-uncaught-exceptions%3A4c933d54-1428-443c-928d-4e1ecbdd56cb&amp;title=node.js+-+Dealing+with+uncaught+exceptions+&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fnode-js-dealing-with-uncaught-exceptions%3A4c933d54-1428-443c-928d-4e1ecbdd56cb&amp;title=node.js+-+Dealing+with+uncaught+exceptions+';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>
	<div class="related-posts">
		<h3>(Theoretically) Related Posts</h3>
				<ul class="first">
							<li><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb">Releasing node-mysql 2.0.0-alpha</a></li>
							<li><a href="/posts/unit-testing-with-node-js:4b647d40-34e4-435a-a880-3b04cbdd56cb">Unit testing with node.js</a></li>
							<li><a href="/posts/parsing-file-uploads-at-500-mb-s-with-node-js:4c03862e-351c-4faa-bb67-4365cbdd56cb">Parsing file uploads at 500 mb/s with node.js</a></li>
							<li><a href="/posts/node_js:4ab4d9d7-b788-41d4-85c0-1b51cbdd56cb">node.js</a></li>
							<li><a href="/posts/streaming-utf-8-with-node-js:4bf28e8b-a290-432f-a222-11c1cbdd56cb">Streaming UTF-8 (with node.js)</a></li>
					</ul>
		<ul>
							<li><a href="/posts/parsing-a-form-in-node-js-1:4b0bff13-4244-4ebc-8455-4975cbdd56cb">Parsing form data with node.js</a></li>
							<li><a href="/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb">Understanding node.js</a></li>
							<li><a href="/posts/streaming-file-uploads-with-node-js:4ac094b2-b6c8-4a7f-bd07-28accbdd56cb">Streaming file uploads with node.js</a></li>
							<li><a href="/posts/testing-node-js-modules-with-travis-ci:4ec62298-aec4-4ee3-8b5a-2c96cbdd56cb">Testing node.js modules with Travis CI</a></li>
					</ul>
	</div>
	<div class="clear">&nsbp;</div>

			<p>You can <a href="#comment_form">skip to the end</a> and add a comment.</p>
	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/node-js-dealing-with-uncaught-exceptions:4c933d54-1428-443c-928d-4e1ecbdd56cb">13 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/node-js-dealing-with-uncaught-exceptions:4c933d54-1428-443c-928d-4e1ecbdd56cb#CommentAddForm">Add Comment</a>	</div>
	<div class="post_comments">
	<div class="clear"></div>
									<div id="comment-4c9342ee-0310-42d5-9e86-4e23cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=21f4971707a00270b92e2ae791d5633d&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Arnout&nbsp;						</strong>
						<strong>said 
						on Sep 17, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Even if you application generates uncaught exceptions there isn't always a need to restart the server. You application might still run fine even though the error occurred.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4c934b44-15f8-45c1-94e0-54afcbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://debuggable.com/felix" rel="nofollow">Felix Geisend√∂rfer</a>						</strong>
						<strong>said 
						on Sep 17, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Arnout: Yes, there are scenarios where nothing will happen if you just continue. But how do you detect which scenario it is? I think there is no general way to determine this in the uncaughtException handler.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4c93507b-ce38-4fe8-a591-4e1ecbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=9f40c41cec8ab0f4fd1e7900a69b1d3d&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://twitter.com/s0enke" rel="nofollow">Soenke Ruempler</a>						</strong>
						<strong>said 
						on Sep 17, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Hi Felix,</p>
<p>yes, application should stop immediately in case of an uncaught exception. I could also imagine the following error handling "flow":</p>
<p> * uncaught exception<br />
 * exception handler logs the .essage/backdstrace/env (we're using graylog/graylog2 for this stuff -> <a rel="nofollow" href="http://www.graylog2.org/">http://www.graylog2.org/</a> )</br><br />
 * exception handler does exit(1) to make sure no more stuff in executed while your program is in bad state</br><br />
 * an angel process/script restarts the (node) process after some seconds (if the process returned exit code != 0)</br><br />
 * you could also think of some throtteling in the angel process if node dies too often within a specified time frame</br></p>
<p>i've used this pattern successfully (not with node, but it's kinda generic)</p>
<p>soenke</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4c9354bc-1dbc-4714-b7b2-03bdcbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=612ad7c3adee43c41ee3e88affe94472&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							NOSLOW&nbsp;						</strong>
						<strong>said 
						on Sep 17, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Way to regain control, Felix! I knew you couldn't just let it go without explanation. I'd expect nothing less just because of your company's namesake :)</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4c95162e-8620-4f60-9722-535ecbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=95ae9a1d987f6f0cf78257c9d0e78f32&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://benjaminthomas.org/" rel="nofollow">Benjamin</a>						</strong>
						<strong>said 
						on Sep 18, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Is this a bug in fs.readStream?  Maybe it should wrap <a rel="nofollow" href="http://github.com/ry/node/blob/master/lib/fs.js#L732-737">the emit call</a> in a try/catch, and then in the catch make sure it leaves itself in a sound state and then rethrow...</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4c9578ee-bb08-40fa-9fd1-535ecbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=67fee7895a99cd5fd0b7de080548db12&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://wavded.tumblr.com" rel="nofollow">Marc Harter</a>						</strong>
						<strong>said 
						on Sep 19, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>You mention a "graceful" restart when you use uncaughtException, could you provide an example of what that would look like codewise?</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4c979a3a-6c08-4dd8-b01c-6c72cbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://debuggable.com/felix" rel="nofollow">Felix Geisend√∂rfer</a>						</strong>
						<strong>said 
						on Sep 20, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Benjamin: No, I don't think it is a bug. ReadStream is simply not "callback safe" (does that term make sense?). You generally shouldn't expect anything to be "callback safe" unless you have written it that way.</p>
<p>Now we could argue if everything in the node-core should be "callback safe". It would probably be fairly easy to do in the emit() function. Regular callbacks are a little more tricky so as *every* single one of them needs to be handled individually.</p>
<p>Marc Harter: That depends on your service. If you already run a watch process like monit, it may simply mean process.exit(0). If you have long-lived requests (like uploads), it means that you need to close your http server, and wait for everything to finish up before you process.exit(). At the same time you'd probably want to bring up a 2nd process listening on the same port again so new requests are handled by the new process while old ones are still in the old process. Either way, it get's a little tricky at that point : ).</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4c9a0a5f-6c14-4ade-ac12-11d5cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=30cd2c0748d86f53245986c5dc8281bf&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Marco Rogers&nbsp;						</strong>
						<strong>said 
						on Sep 22, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Felix, I'm not sure I understand exactly what is happening after the uncaughtException callback fires.  What's the state of the process afterwards?</p>
<p>- Is it clearing everything off the event loop?<br />
- Is it clearing all event listeners?</br><br />
- Is it stopping servers? If not, what state are they in?</br></p>
<p>Also, instead of restarting, what if you just restarted all of your services with a fresh state.  Most node programs start everything up in the main script file.  But what if you put your services into modules.  When there is an exception, you trash the old stuff and just call the service initializer again. Which you've setup to start with a completely fresh state.  Is that an option?</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4c9a0d74-74e4-4092-954e-5999cbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://debuggable.com/felix" rel="nofollow">Felix Geisend√∂rfer</a>						</strong>
						<strong>said 
						on Sep 22, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Marc Harter: uncaughtException does not involve any magic. It really just stops executing where the exception occured, and then the event. The problem is that it doesn't continue where it left of afterwards.</p>
<p>About restarting the process: Yeah, you might do your cleanup internally. But you basically won't know what needs cleaning up, so restarting the process may still be safer.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4c9a4e52-db78-43fb-8c55-2cddcbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=73a2b24daecb976af81e010b7a3ce3c6&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://blog.izs.me/" rel="nofollow">Isaac Z. Schlueter</a>						</strong>
						<strong>said 
						on Sep 22, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>I disagree that this is a bug, or even undesirable behavior.</p>
<p>process!unhandledException is designed to resemble the window.onerror callback.  It gets notified, but it's not a "catch".  Code that throws jumps all the way out of its stack frame.  That's what a "throw" is: A way to say "I have hit a point where I cannot continue.  Someone fix me, please."  You're done.  Warp out of there.  Do not pass Go, do not collect $200.</p>
<p>If it were to log the error and then keep on chugging with the "end" event and such in that context, then in my opinion, that would be a fundamental shift in the way that the language works.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4d21981c-72e4-48cd-b32d-0a17cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=fcc09e8884d78223203492543fe87e39&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://peepo.com" rel="nofollow">jonathan chetwynd</a>						</strong>
						<strong>said 
						on Jan 03, 2011:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>this example includes 'throw'.<br />
please could you include a means to find an error?</br><br />
ie when the reason for the uncaught exception is not known.</br></p>
<p>  message: [Getter/Setter],<br />
  stack: [Getter/Setter],</br><br />
  type: 'non_object_property_load',</br><br />
  arguments: [ 0, null ] </br></p>
<p>This error log is difficult for me to interpret.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4d21fe9a-b0d8-482f-b3ec-2c0ecbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=73a2b24daecb976af81e010b7a3ce3c6&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://blog.izs.me/" rel="nofollow">Isaac Z. Schlueter</a>						</strong>
						<strong>said 
						on Jan 03, 2011:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>@Jonathan</p>
<p>It seems like that log is doing a sys.inspect or console.log of an Error object.</p>
<p>In that situation, you may be better off with something like this:</p>
<p>    console.log("Error: %s", er.stack || er.message)</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4d49d249-8ed8-4ff9-976d-6dffcbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=3d05562ecc104fa858344ca2ecb03293&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Jonathan Payne&nbsp;						</strong>
						<strong>said 
						on Feb 02, 2011:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>This article freaked me out until I saw Isaac Z. Schlueter's comment. If you have a server that exits just because one little "thread" has an exception, what kind of server is that? A bad one.</p>
<p>But I have to admit I am not entirely sure what this all means. node.js is single threaded, there's only one thread, so when an exception occurs it should be caught by the event loop, printed out (or sent itself as a notification), and then the event loop should carry on and run the next thing.</p>
<p>If there's something fs.readStream needs to do in order to prevent things from getting out of whack, it needs to catch exceptions itself when it issues a callback and clean up after itself. Maybe it does and emits an error event for all I know. If you get the 'error' event you know you're not going to get the 'end' event, or something like that.</p>
				</div>
				<div class="clear"></div>
							</div>
	  	
				<div class="divider"></div>
		<a name="comment_form"></a>
		<p>This post is too old. We do not allow comments here anymore in order to fight spam. If you have real feedback or questions for the post, please <a href="/contact">contact us</a>.</p>
	</div></div>
	
</div>
<div class="grid_4 prefix_1 omega" id="sidebar">
	<cake:nocache>
			</cake:nocache>

	<h3>RSS Feeds</h3>
	<div id="bug">
		<img src="/img/rss_bug.png" alt="" />	</div>
	<div class="rss">
		<p class="bug-message"></p>
		<a href="http://feeds.feedburner.com/debuggable">Blog RSS</a><br/>
		<a href="http://feeds.feedburner.com/debuggable-comments">Comments RSS</a><br/><br/>
		<img width="88" height="26" alt="" style="border: 0pt none ;" src="http://feeds.feedburner.com/~fc/debuggable?bg=FF9933&amp;fg=444444&amp;anim=0"/>
		<div class="clear"></div>
	</div>

	<h3>Recent Posts</h3>
	<ul>
<li class=""><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb">Releasing node-mysql 2.0.0-alpha</a></li><li class=""><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb">How to write jQuery plugins</a></li><li class=""><a href="/posts/vim-workshop-in-berlin-april-20:4f702b83-ce24-429c-9403-0e39cbdd56cb">Vim Workshop in Berlin (April 20)</a></li><li class=""><a href="/posts/npm-an-intervention:4f44dd25-a114-4361-ada1-6cefcbdd56cb">NPM - An intervention</a></li><li class="active"><a href="/posts/testing-node-js-modules-with-travis-ci:4ec62298-aec4-4ee3-8b5a-2c96cbdd56cb">Testing node.js modules with Travis CI</a></li><li class=""><a href="/posts/private-npm-modules:4e68cc7d-1ac4-42d9-995a-343dcbdd56cb">Private npm modules</a></li></ul>
	<h3>Archive</h3>
	<p class="small align">
		<strong>443 Posts</strong>, <strong>4608 Comments</strong><br /><br />
		We are on air since 2006. Take a tour through the
		<a href="/posts/archive">blog archive</a>.
	</p>
	<div class="search">
	<form id="PostSearchForm" method="post" action="/posts/search"><fieldset style="display:none;"><input type="hidden" name="_method" value="POST" /></fieldset><input name="data[Post][keywords]" type="text" value="" id="PostKeywords" /><input type="submit" class="button" value="Search" /></form>	<div class="clear"></div>
</div>
	<h3>Recent Comments</h3>
	<div class="recent-comments">
		<div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd32b85-220c-4fc8-84b2-378fcbdd56cb">William: thanks, fixed ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=b47010beec892f11619d1e81f0c94f11&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd30119-06fc-4712-aecd-7fa5cbdd56cb">Hi Felix,

The Upgra ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=99b59e8a9cfe2c5575f0fa90f7f30307&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f99a4a2-9ad8-4476-b208-611acbdd56cb">Maybe you can write so ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=8364689a1eefb5eceb6a4f38bbf95731&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f9651b9-eb88-4096-94c1-0fc2cbdd56cb">This is very nice plug ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=7e3d69d16d3b845e89198512355b2ac9&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f8bb75a-96cc-4197-8e93-7c63cbdd56cb">Nice article!

Somet ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f83326b-8c28-43fc-b70d-097ecbdd56cb">That&#039;s fine ognian, th ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=994516a664c2bdc728d18c47e935bc14&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f832a25-5818-4d38-9e39-097ecbdd56cb">Really nice work! I wa ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c15ca-c7c4-48e3-a4db-27decbdd56cb">@J√∂rn: Sorry, thought  ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d5d83832be2b6c70d1968635f68a1b4a&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c11aa-6f9c-448c-abdb-2066cbdd56cb">Thanks didn&#039;t quite un ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7bf934-d4e8-4885-9a2c-7a93cbdd56cb">Well you could expose  ..</a></div><div class="clear_left"></div>	</div>
	<div class="clear_left"></div>
	<h3>Keep an eye on</h3>
<ul class="links external">
	<li><a href="http://transloadit.com" title="Video encoding, image resizing and more for your web or mobile app">Transloadit</a></li><li><a href="http://tus.io" title="Resumable file uploading, upload progress bar, faster upload speed">tus - resumable file upload protocol</a></li><li><a href="http://kevin.vanzonneveld.net/">Kevin van Zonneveld</a></li><li><a href="http://www.littlehart.net/atthekeyboard/">Chris Hartjes</a></li><li><a href="http://mark-story.com">Mark Story</a></li><li><a href="http://www.webbosaurus.de">Webbosaurus</a></li></ul>
	<a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number' title='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'><img src='http://static.jsconf.us/promotejshs.png' height='150' width='180' alt='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'/></a>
</div>

						<div class="clear">&nbsp;</div>
		</div>

		<div id="footer">
			<div class="container_16">
				<ul id="footer_navigation">
					<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>				</ul>
				<p>&copy; 2008 - 2015, Debuggable Ltd. All rights reserved.
				<i>Designed by <a href="http://www.fluidcore.net" target="_blank">fluidCORE</a>.</i>
			</div>
		</div>
	</div>
	<script type="text/javascript" src="/js/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/5627ea2806458e56fb8a5f4b231a44c2.php"></script><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-3306079-3']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script');
ga.src = ('https:' == document.location.protocol ?
    'https://ssl' : 'http://www') +
    '.google-analytics.com/ga.js';
ga.setAttribute('async', 'true');
document.documentElement.firstChild.appendChild(ga);
})();
</script></body>
</html>
