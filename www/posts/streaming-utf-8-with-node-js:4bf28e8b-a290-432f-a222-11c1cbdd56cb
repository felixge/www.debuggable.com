<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
	<title>Streaming UTF-8 (with node.js) &raquo; Debuggable - Node.js Consulting</title>

	<link href="http://feeds.feedburner.com/debuggable" type="application/rss+xml" rel="alternate" title="RSS 2.0" />	<link rel="pingback" href="Debuggable.com/pingback" />
	<link rel="stylesheet" type="text/css" href="/css/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/4026ee2275e22a4e5ec8aea13747c557.php" /></head>
	<body>
		<div class="container_16">
			<h1 id="logo-text"><a href="/">debuggable</a></h1>
			<ul id="navigation">
				<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>			</ul>
			<div class="clear">&nbsp;</div>

			<div id="blueprint">
				<a href="/contact" class="contact">Contact Us</a>			</div>

			<div class="clear">&nbsp;</div>
			<div class="grid_11 alpha" id="content">
	<cake:nocache>
			<div class="messages empty"></div>
	</cake:nocache>
	<div class="post">
	<h2><a href="/posts/streaming-utf-8-with-node-js:4bf28e8b-a290-432f-a222-11c1cbdd56cb">Streaming UTF-8 (with node.js)</a></h2>	<div class="posted-on">
		<p>Posted on 18/5/10 by 
		<a href="/felix">Felix Geisendörfer</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/felix_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p><a href="http://en.wikipedia.org/wiki/Utf-8#Description">UTF-8</a> is a variable-length character encoding for <a href="http://en.wikipedia.org/wiki/Unicode">Unicode</a>. This text is encoded in UTF-8, so the characters you are reading can consist of 1 to 4 bytes. As long as the characters fit within the ASCII range (0-127), there is exactly 1 byte used per character.</p>

<p>But if I want to express a character outside the ASCII range, such as '¢', I need more bytes. The character '¢' for example consists of: 0xC2 and 0xA2. The first byte, 0xC2, indicates that '¢' is a 2-byte character. This is easy to understand if you look at the binary representation of 0xC2:</p>

<pre><code>11000010
</code></pre>

<p>As you can see, the bit sequence begins with '110', which as per the UTF-8 specification means: "2 byte character ahead!". Another character such as '€' (0xE2, 0x82, 0xAC) would work the same way. The first byte, 0xE2, looks like this in binary:</p>

<pre><code>11100010
</code></pre>

<p>The prefix '1110' specifies that there are 3 bytes forming the current character. More exotic characters may even start with '11110', which indicates a 4 byte character.</p>

<p>As you can guess, UTF-8 text is not trivial to stream. Networks and file systems are not UTF-8 aware, so they will often split a chunk of text in the middle of a character.</p>

<p>To make sure you don't process a partial character, you have to analyze the last 3 bytes of any given chunk in your stream to check for the bit-prefixes that are used to announce a multibyte character. If you detect an incomplete character, you need to buffer the bytes you have for it, and then prepend them to the next chunk that comes in.</p>

<p>This way you can completely avoid breaking apart multibyte characters within a UTF-8 text, while still getting great performance and memory usage (only the last 3 bytes need checking / buffering).</p>

<p>As of yesterday, <a href="http://nodejs.org/">node.js</a>'s net / http modules are now fully UTF-8 safe, thanks to the streaming Utf8Decoder (undocumented, API may change) you can see below:</p>

<p><div class="clear"></div><div class="code debuggable_sh_js" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">var</span> Buffer = require<span class="br0">&#40;</span><span class="st0">'buffer'</span><span class="br0">&#41;</span>.<span class="me1">Buffer</span>;<br />
<br />
<span class="kw2">var</span> Utf8Decoder = exports.<span class="me1">Utf8Decoder</span> = <span class="kw2">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="kw1">this</span>.<span class="me1">charBuffer</span> = <span class="kw2">new</span> Buffer<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>;<br />
&nbsp; <span class="kw1">this</span>.<span class="me1">charReceived</span> = <span class="nu0">0</span>;<br />
&nbsp; <span class="kw1">this</span>.<span class="me1">charLength</span> = <span class="nu0">0</span>;<br />
<span class="br0">&#125;</span>;<br />
<br />
Utf8Decoder.<span class="me1">prototype</span>.<span class="kw1">write</span> = <span class="kw2">function</span><span class="br0">&#40;</span>buffer<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="kw2">var</span> charStr = <span class="st0">''</span>;<br />
&nbsp; <span class="co1">// if our last write ended with an incomplete multibyte character</span><br />
&nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">charLength</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="co1">// determine how many remaining bytes this buffer has to offer for this char</span><br />
&nbsp; &nbsp; <span class="kw2">var</span> i = <span class="br0">&#40;</span>buffer.<span class="me1">length</span> &gt;= <span class="kw1">this</span>.<span class="me1">charLength</span> - <span class="kw1">this</span>.<span class="me1">charReceived</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; ? <span class="kw1">this</span>.<span class="me1">charLength</span> - <span class="kw1">this</span>.<span class="me1">charReceived</span><br />
&nbsp; &nbsp; &nbsp; : buffer.<span class="me1">length</span>;<br />
<br />
&nbsp; &nbsp; <span class="co1">// add the new bytes to the char buffer</span><br />
&nbsp; &nbsp; buffer.<span class="me1">copy</span><span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">charBuffer</span>, <span class="kw1">this</span>.<span class="me1">charReceived</span>, <span class="nu0">0</span>, i<span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">charReceived</span> += i;<br />
<br />
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">charReceived</span> &lt; <span class="kw1">this</span>.<span class="me1">charLength</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="co1">// still not enough chars in this buffer? wait for more ...</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
<br />
&nbsp; &nbsp; <span class="co1">// get the character that was split</span><br />
&nbsp; &nbsp; charStr = <span class="kw1">this</span>.<span class="me1">charBuffer</span>.<span class="me1">slice</span><span class="br0">&#40;</span><span class="nu0">0</span>, <span class="kw1">this</span>.<span class="me1">charLength</span><span class="br0">&#41;</span>.<span class="me1">toString</span><span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">charReceived</span> = <span class="kw1">this</span>.<span class="me1">charLength</span> = <span class="nu0">0</span>;<br />
<br />
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>i == buffer.<span class="me1">length</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="co1">// if there are no more bytes in this buffer, just emit our char</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">onString</span><span class="br0">&#40;</span>charStr<span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
<br />
&nbsp; &nbsp; <span class="co1">// otherwise cut of the characters end from the beginning of this buffer</span><br />
&nbsp; &nbsp; buffer = buffer.<span class="me1">slice</span><span class="br0">&#40;</span>i, buffer.<span class="me1">length</span><span class="br0">&#41;</span>;<br />
&nbsp; <span class="br0">&#125;</span><br />
<br />
<br />
&nbsp; <span class="co1">// determine how many bytes we have to check at the end of this buffer</span><br />
&nbsp; <span class="kw2">var</span> i = <span class="br0">&#40;</span>buffer.<span class="me1">length</span> &gt;= <span class="nu0">3</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; ? <span class="nu0">3</span><br />
&nbsp; &nbsp; : buffer.<span class="me1">length</span>;<br />
<br />
&nbsp; <span class="co1">// figure out if one of the last i bytes of our buffer announces an incomplete char</span><br />
&nbsp; <span class="kw1">for</span> <span class="br0">&#40;</span>; i &gt; <span class="nu0">0</span>; i--<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; c = buffer<span class="br0">&#91;</span>buffer.<span class="me1">length</span> - i<span class="br0">&#93;</span>;<br />
<br />
&nbsp; &nbsp; <span class="co1">// See http://en.wikipedia.org/wiki/UTF-8#Description</span><br />
<br />
&nbsp; &nbsp; <span class="co1">// 110XXXXX</span><br />
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>i == <span class="nu0">1</span> &amp;&amp; c &gt;&gt; <span class="nu0">5</span> == 0x06<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">charLength</span> = <span class="nu0">2</span>;<br />
&nbsp; &nbsp; &nbsp; <span class="kw1">break</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
<br />
&nbsp; &nbsp; <span class="co1">// 1110XXXX</span><br />
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>i &lt;= <span class="nu0">2</span> &amp;&amp; c &gt;&gt; <span class="nu0">4</span> == 0x0E<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">charLength</span> = <span class="nu0">3</span>;<br />
&nbsp; &nbsp; &nbsp; <span class="kw1">break</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
<br />
&nbsp; &nbsp; <span class="co1">// 11110XXX</span><br />
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>i &lt;= <span class="nu0">3</span> &amp;&amp; c &gt;&gt; <span class="nu0">3</span> == 0x1E<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">charLength</span> = <span class="nu0">4</span>;<br />
&nbsp; &nbsp; &nbsp; <span class="kw1">break</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; <span class="br0">&#125;</span><br />
<br />
&nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>!<span class="kw1">this</span>.<span class="me1">charLength</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="co1">// no incomplete char at the end of this buffer, emit the whole thing</span><br />
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">onString</span><span class="br0">&#40;</span>charStr+buffer.<span class="me1">toString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="kw1">return</span>;<br />
&nbsp; <span class="br0">&#125;</span><br />
<br />
&nbsp; <span class="co1">// buffer the incomplete character bytes we got</span><br />
&nbsp; buffer.<span class="me1">copy</span><span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">charBuffer</span>, <span class="nu0">0</span>, buffer.<span class="me1">length</span> - i, buffer.<span class="me1">length</span><span class="br0">&#41;</span>;<br />
&nbsp; <span class="kw1">this</span>.<span class="me1">charReceived</span> = i;<br />
<br />
&nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>buffer.<span class="me1">length</span> - i &gt; <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="co1">// buffer had more bytes before the incomplete char, emit them</span><br />
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">onString</span><span class="br0">&#40;</span>charStr+buffer.<span class="me1">slice</span><span class="br0">&#40;</span><span class="nu0">0</span>, buffer.<span class="me1">length</span> - i<span class="br0">&#41;</span>.<span class="me1">toString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
&nbsp; <span class="br0">&#125;</span> <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>charStr<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="co1">// or just emit the charStr if any</span><br />
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">onString</span><span class="br0">&#40;</span>charStr<span class="br0">&#41;</span>;<br />
&nbsp; <span class="br0">&#125;</span><br />
<span class="br0">&#125;</span>;</div></p>

<p>I feel like this implementation could still be somewhat simplified, so if you have any suggestions or comments, please let me know!</p>

<p>--fg</p>

<p>PS: Another buffer-based project I'm working on is a fast multipart parser - stay tuned for another post!</p>

<p><img style="display: none;" src="http://debuggable.com/posts/tick/4bf28e8b-a290-432f-a222-11c1cbdd56cb"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fstreaming-utf-8-with-node-js%3A4bf28e8b-a290-432f-a222-11c1cbdd56cb &amp;title=Streaming+UTF-8+%28with+node.js%29';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fstreaming-utf-8-with-node-js%3A4bf28e8b-a290-432f-a222-11c1cbdd56cb';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fstreaming-utf-8-with-node-js%3A4bf28e8b-a290-432f-a222-11c1cbdd56cb&amp;title=Streaming+UTF-8+%28with+node.js%29&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fstreaming-utf-8-with-node-js%3A4bf28e8b-a290-432f-a222-11c1cbdd56cb&amp;title=Streaming+UTF-8+%28with+node.js%29';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>
	<div class="related-posts">
		<h3>(Theoretically) Related Posts</h3>
				<ul class="first">
							<li><a href="/posts/unit-testing-with-node-js:4b647d40-34e4-435a-a880-3b04cbdd56cb">Unit testing with node.js</a></li>
							<li><a href="/posts/testing-node-js-modules-with-travis-ci:4ec62298-aec4-4ee3-8b5a-2c96cbdd56cb">Testing node.js modules with Travis CI</a></li>
							<li><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb">Releasing node-mysql 2.0.0-alpha</a></li>
							<li><a href="/posts/parsing-a-form-in-node-js-1:4b0bff13-4244-4ebc-8455-4975cbdd56cb">Parsing form data with node.js</a></li>
							<li><a href="/posts/node_js:4ab4d9d7-b788-41d4-85c0-1b51cbdd56cb">node.js</a></li>
					</ul>
		<ul>
							<li><a href="/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb">Understanding node.js</a></li>
							<li><a href="/posts/node-js-dealing-with-uncaught-exceptions:4c933d54-1428-443c-928d-4e1ecbdd56cb">node.js - Dealing with uncaught exceptions </a></li>
							<li><a href="/posts/streaming-file-uploads-with-node-js:4ac094b2-b6c8-4a7f-bd07-28accbdd56cb">Streaming file uploads with node.js</a></li>
							<li><a href="/posts/parsing-file-uploads-at-500-mb-s-with-node-js:4c03862e-351c-4faa-bb67-4365cbdd56cb">Parsing file uploads at 500 mb/s with node.js</a></li>
					</ul>
	</div>
	<div class="clear">&nsbp;</div>

			<p>You can <a href="#comment_form">skip to the end</a> and add a comment.</p>
	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/streaming-utf-8-with-node-js:4bf28e8b-a290-432f-a222-11c1cbdd56cb">12 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/streaming-utf-8-with-node-js:4bf28e8b-a290-432f-a222-11c1cbdd56cb#CommentAddForm">Add Comment</a>	</div>
	<div class="post_comments">
	<div class="clear"></div>
									<div id="comment-4bf2954f-fa00-41c7-aea3-42c5cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=30cd2c0748d86f53245986c5dc8281bf&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Marco Rogers&nbsp;						</strong>
						<strong>said 
						on May 18, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Nice.  This is definitely a problem I was aware of in node, but wasn't looking forward to handling myself.  So does this decoder get applied to any stream if the encoding gets set as UTF8?  Is that the only time it gets applied?</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4bf296f3-90b8-4d75-ad39-42c5cbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://debuggable.com/felix" rel="nofollow">Felix Geisendörfer</a>						</strong>
						<strong>said 
						on May 18, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Marco Rogers: Currently it gets applied to any net or http stream if you use setEncoding('utf-8'). I still have to add it for the fs module.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4bf2b1ae-25cc-4386-83dd-6fb8cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=7f71109caa694ff1e10a31326c73c0f1&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Matt&nbsp;						</strong>
						<strong>said 
						on May 18, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>That's excellent ! It's a must have for NodeJs for dealing with localized applications.</p>
<p>Thanks for this great addition Felix !</p>
<p>Matt</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4bf2b484-90dc-4df8-bb29-6fb8cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=76eab46cc60c958befaeeada14abc489&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://github.com/codehero/benejson" rel="nofollow">David Bender</a>						</strong>
						<strong>said 
						on May 18, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Felix,<br />
  Great work, but you need to address a few issues:</br><br />
  -For what uses cases is your library intended? Keep in mind that XML and JSON parsing libraries already do their own UTF-8 verification so duplicating their work does not enhance performance.</br><br />
  -UTF-8 safeness also requires that no invalid characters such as 0xFF show up in the content. Therefore, safeness requires checking each byte.</br><br />
  -Consequently, I would not call your implementation UTF-8 "safe". It is not sufficient to just check the last 3 bytes. In this case, you are leaving it up to the user to check for invalid UTF-8 characters anyway.</br></p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4bf2b4fc-dee8-4cdb-a94e-6fb8cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=f43206cf935c8a5d532285c0d67b20d1&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://eligrey.com/" rel="nofollow">Eli Grey</a>						</strong>
						<strong>said 
						on May 18, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>All of this is unnecessary, as JavaScript already has functions which can facillitate encoding and decoding of UTF-8. Encoding UTF-8 to a bytestring is unescape(encodeURIComponent(string)) and decoding UTF-8 is decodeURIComponent(escape(string)).</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4bf2ba8d-04e8-428f-92ac-0247cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=7067083e47727d1870b08e5862f2fa3e&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Matthew&nbsp;						</strong>
						<strong>said 
						on May 18, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>One suggestion that might or might not be any use: you might be able to match the UTF8 byte ranges at the end of the string with a single regexp.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4bf2bfa1-0c1c-4e81-99bd-7794cbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://debuggable.com/felix" rel="nofollow">Felix Geisendörfer</a>						</strong>
						<strong>said 
						on May 18, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>David Bender: Eli Grey: This class is merely splitting a bytes stream into portions that are guaranteed to not be in the middle of a multibyte character. The actual conversion to (and verification of) UTF-8 happens in Buffer.toString().</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4bf2c3d8-42d4-4497-ba4e-7794cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=76eab46cc60c958befaeeada14abc489&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://codehero.github.com/benejson" rel="nofollow">David Bender</a>						</strong>
						<strong>said 
						on May 18, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>@Felix Thanks for the clarification. Consequently, your code does not just read the last 3 bytes though, as toString() is an O(n) operation. </p>
<p>I'm still not sure when I would actually this though. Verifying input tends to be done when parsing structured text, and libraries that do that handle partial multibyte characters. As an example, I would never put this between my socket and my JSON parser. For what situation do you use this?</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4bf2c66b-57f8-4a7a-b865-7e1dcbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://debuggable.com/felix" rel="nofollow">Felix Geisendörfer</a>						</strong>
						<strong>said 
						on May 18, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>David Bender: If you wanted to write a streaming JSON parser that operates on a character level (rather than byte level), this would be very useful to put in between your parser and your socket.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4c6ec17f-a584-49d7-88f7-46f0cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=f43206cf935c8a5d532285c0d67b20d1&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://eligrey.com/" rel="nofollow">Eli Grey</a>						</strong>
						<strong>said 
						on Aug 20, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Felix: decodeURIComponent(escape(string)) not only decodes the UTF-8, but also verifies it. Why exactly would I want to use your code instead of this simple trick? Is it substantially faster?</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4c6ec300-69a8-48d5-a0c1-62ffcbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://debuggable.com/felix" rel="nofollow">Felix Geisendörfer</a>						</strong>
						<strong>said 
						on Aug 20, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Eli Grey: Because decodeURIComponent() can only handle a fixed-length string, not a stream of data. This code is really only useful for node.js, not client side stuff (in case that's what you're referring to).</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4c6ee66d-1540-4cc6-8c92-1c84cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=f43206cf935c8a5d532285c0d67b20d1&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://eligrey.com/" rel="nofollow">Eli Grey</a>						</strong>
						<strong>said 
						on Aug 20, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Ah, thanks. I thought this was just for fixed-length strings too.</p>
				</div>
				<div class="clear"></div>
							</div>
	  	
				<div class="divider"></div>
		<a name="comment_form"></a>
		<p>This post is too old. We do not allow comments here anymore in order to fight spam. If you have real feedback or questions for the post, please <a href="/contact">contact us</a>.</p>
	</div></div>
	
</div>
<div class="grid_4 prefix_1 omega" id="sidebar">
	<cake:nocache>
			</cake:nocache>

	<h3>RSS Feeds</h3>
	<div id="bug">
		<img src="/img/rss_bug.png" alt="" />	</div>
	<div class="rss">
		<p class="bug-message"></p>
		<a href="http://feeds.feedburner.com/debuggable">Blog RSS</a><br/>
		<a href="http://feeds.feedburner.com/debuggable-comments">Comments RSS</a><br/><br/>
		<img width="88" height="26" alt="" style="border: 0pt none ;" src="http://feeds.feedburner.com/~fc/debuggable?bg=FF9933&amp;fg=444444&amp;anim=0"/>
		<div class="clear"></div>
	</div>

	<h3>Recent Posts</h3>
	<ul>
<li class=""><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb">Releasing node-mysql 2.0.0-alpha</a></li><li class=""><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb">How to write jQuery plugins</a></li><li class=""><a href="/posts/vim-workshop-in-berlin-april-20:4f702b83-ce24-429c-9403-0e39cbdd56cb">Vim Workshop in Berlin (April 20)</a></li><li class=""><a href="/posts/npm-an-intervention:4f44dd25-a114-4361-ada1-6cefcbdd56cb">NPM - An intervention</a></li><li class="active"><a href="/posts/testing-node-js-modules-with-travis-ci:4ec62298-aec4-4ee3-8b5a-2c96cbdd56cb">Testing node.js modules with Travis CI</a></li><li class=""><a href="/posts/private-npm-modules:4e68cc7d-1ac4-42d9-995a-343dcbdd56cb">Private npm modules</a></li></ul>
	<h3>Archive</h3>
	<p class="small align">
		<strong>443 Posts</strong>, <strong>4608 Comments</strong><br /><br />
		We are on air since 2006. Take a tour through the
		<a href="/posts/archive">blog archive</a>.
	</p>
	<div class="search">
	<form id="PostSearchForm" method="post" action="/posts/search"><fieldset style="display:none;"><input type="hidden" name="_method" value="POST" /></fieldset><input name="data[Post][keywords]" type="text" value="" id="PostKeywords" /><input type="submit" class="button" value="Search" /></form>	<div class="clear"></div>
</div>
	<h3>Recent Comments</h3>
	<div class="recent-comments">
		<div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd32b85-220c-4fc8-84b2-378fcbdd56cb">William: thanks, fixed ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=b47010beec892f11619d1e81f0c94f11&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd30119-06fc-4712-aecd-7fa5cbdd56cb">Hi Felix,

The Upgra ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=99b59e8a9cfe2c5575f0fa90f7f30307&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f99a4a2-9ad8-4476-b208-611acbdd56cb">Maybe you can write so ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=8364689a1eefb5eceb6a4f38bbf95731&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f9651b9-eb88-4096-94c1-0fc2cbdd56cb">This is very nice plug ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=7e3d69d16d3b845e89198512355b2ac9&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f8bb75a-96cc-4197-8e93-7c63cbdd56cb">Nice article!

Somet ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f83326b-8c28-43fc-b70d-097ecbdd56cb">That&#039;s fine ognian, th ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=994516a664c2bdc728d18c47e935bc14&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f832a25-5818-4d38-9e39-097ecbdd56cb">Really nice work! I wa ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c15ca-c7c4-48e3-a4db-27decbdd56cb">@Jörn: Sorry, thought  ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d5d83832be2b6c70d1968635f68a1b4a&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c11aa-6f9c-448c-abdb-2066cbdd56cb">Thanks didn&#039;t quite un ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7bf934-d4e8-4885-9a2c-7a93cbdd56cb">Well you could expose  ..</a></div><div class="clear_left"></div>	</div>
	<div class="clear_left"></div>
	<h3>Keep an eye on</h3>
<ul class="links external">
	<li><a href="http://transloadit.com" title="Video encoding, image resizing and more for your web or mobile app">Transloadit</a></li><li><a href="http://tus.io" title="Resumable file uploading, upload progress bar, faster upload speed">tus - resumable file upload protocol</a></li><li><a href="http://kevin.vanzonneveld.net/">Kevin van Zonneveld</a></li><li><a href="http://www.littlehart.net/atthekeyboard/">Chris Hartjes</a></li><li><a href="http://mark-story.com">Mark Story</a></li><li><a href="http://www.webbosaurus.de">Webbosaurus</a></li></ul>
	<a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number' title='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'><img src='http://static.jsconf.us/promotejshs.png' height='150' width='180' alt='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'/></a>
</div>

						<div class="clear">&nbsp;</div>
		</div>

		<div id="footer">
			<div class="container_16">
				<ul id="footer_navigation">
					<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>				</ul>
				<p>&copy; 2008 - 2015, Debuggable Ltd. All rights reserved.
				<i>Designed by <a href="http://www.fluidcore.net" target="_blank">fluidCORE</a>.</i>
			</div>
		</div>
	</div>
	<script type="text/javascript" src="/js/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/5627ea2806458e56fb8a5f4b231a44c2.php"></script><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-3306079-3']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script');
ga.src = ('https:' == document.location.protocol ?
    'https://ssl' : 'http://www') +
    '.google-analytics.com/ga.js';
ga.setAttribute('async', 'true');
document.documentElement.firstChild.appendChild(ga);
})();
</script></body>
</html>
