<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
	<title>How to bend Cake's Model::find() method to your needs &raquo; Debuggable - Node.js Consulting</title>

	<link href="http://feeds.feedburner.com/debuggable" type="application/rss+xml" rel="alternate" title="RSS 2.0" />	<link rel="pingback" href="Debuggable.com/pingback" />
	<link rel="stylesheet" type="text/css" href="/css/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/4026ee2275e22a4e5ec8aea13747c557.php" /></head>
	<body>
		<div class="container_16">
			<h1 id="logo-text"><a href="/">debuggable</a></h1>
			<ul id="navigation">
				<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>			</ul>
			<div class="clear">&nbsp;</div>

			<div id="blueprint">
				<a href="/contact" class="contact">Contact Us</a>			</div>

			<div class="clear">&nbsp;</div>
			<div class="grid_11 alpha" id="content">
	<cake:nocache>
			<div class="messages empty"></div>
	</cake:nocache>
	<div class="post">
	<h2><a href="/posts/implementing-different-types-for-cakes-modelfind-method:485030de-4778-456e-8400-44d84834cda3">How to bend Cake's Model::find() method to your needs</a></h2>	<div class="posted-on">
		<p>Posted on 21/6/08 by 
		<a href="/tim">Tim Kosch√ºtzki</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/tim_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p>Hey folks,</p>
<p>CakePHP allows you to use your own "find-types" for the Model::find() methodology. Those of your who are familiar with the find() method know that there are currently four types in the core: 'list', 'all', 'first' and 'count'. However, sometimes it is nice to specify your own type so you can have a call like this:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$this</span>-&gt;<span class="me1">Comment</span>-&gt;<span class="me1">find</span><span class="br0">&#40;</span><span class="st0">'pending'</span><span class="br0">&#41;</span>;</div>
<p>So how would you go about implementing this? Correct, you would overwrite the find() method in your model and provide the default functionality if there is one of the default types used. Let's have a look at how you could implement this pending find from above:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">class</span> Comment <span class="kw2">extends</span> AppModel <span class="br0">&#123;</span><br />
&nbsp; <span class="kw2">var</span> <span class="re0">$belongsTo</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'User'</span><span class="br0">&#41;</span>;<br />
<br />
&nbsp; <span class="kw2">function</span> find<span class="br0">&#40;</span><span class="re0">$type</span>, <span class="re0">$queryData</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="kw1">switch</span> <span class="br0">&#40;</span><span class="re0">$type</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">case</span> <span class="st0">'pending'</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">find</span><span class="br0">&#40;</span><span class="st0">'all'</span>, <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'fields'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'User.email'</span>, <span class="st0">'User.first_name'</span>, <span class="st0">'User.last_name'</span>, <span class="st0">'Comment.name'</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'conditions'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'Comment.active'</span> =&gt; <span class="nu0">0</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'Comment.blocked'</span> =&gt; <span class="nu0">0</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'contain'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'User'</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; <span class="kw2">default</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> parent::<span class="me2">find</span><span class="br0">&#40;</span><span class="re0">$type</span>, <span class="re0">$queryData</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; <span class="br0">&#125;</span><br />
<span class="br0">&#125;</span></div>
<p>So this is actually not very difficult code, but it is very powerful. You could specify different sets of conditions, fields, orders, groups by's and containments just by adding a new entry to the switch statement. Please note that there is no break needed within the switch as we <a href="">return home</a>.</p>
<p>Let's add some code for finding pending users that were invited by the currently logged-in user. This is what we could use in the controller:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$this</span>-&gt;<span class="me1">Comment</span>-&gt;<span class="me1">find</span><span class="br0">&#40;</span><span class="st0">'pending'</span>, <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'created_by_id'</span> =&gt; User::<span class="me2">get</span><span class="br0">&#40;</span><span class="st0">'id'</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;</div>
<p>Now for the model we would need to add some code that tracks if $queryData['conditions'] is set, and use that as well in conjunction with the conditions specified in our find type. While we are at it, let's also add some code that would handle fields, order, group, recursive and contain statements:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">class</span> Comment <span class="kw2">extends</span> AppModel <span class="br0">&#123;</span><br />
&nbsp; <span class="kw2">var</span> <span class="re0">$belongsTo</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'User'</span><span class="br0">&#41;</span>;<br />
<br />
&nbsp; <span class="kw2">function</span> find<span class="br0">&#40;</span><span class="re0">$type</span>, <span class="re0">$queryData</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="re0">$defaults</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; <span class="st0">'conditions'</span> =&gt; <span class="kw2">null</span><br />
&nbsp; &nbsp; &nbsp; , <span class="st0">'fields'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; , <span class="st0">'order'</span> =&gt; <span class="kw2">null</span><br />
&nbsp; &nbsp; &nbsp; , <span class="st0">'recursive'</span> =&gt; <span class="kw2">null</span><br />
&nbsp; &nbsp; &nbsp; , <span class="st0">'contain'</span> =&gt; <span class="kw2">null</span><br />
&nbsp; &nbsp; <span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="re0">$queryData</span> = am<span class="br0">&#40;</span><span class="re0">$defaults</span>, <span class="re0">$queryData</span><span class="br0">&#41;</span>;<br />
<br />
&nbsp; &nbsp; <span class="kw1">switch</span> <span class="br0">&#40;</span><span class="re0">$type</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">case</span> <span class="st0">'pending'</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">find</span><span class="br0">&#40;</span><span class="st0">'all'</span>, <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'fields'</span> =&gt; am<span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'User.email'</span>, <span class="st0">'User.first_name'</span>, <span class="st0">'User.last_name'</span>, <span class="st0">'Comment.name'</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="re0">$queryData</span><span class="br0">&#91;</span><span class="st0">'fields'</span><span class="br0">&#93;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'conditions'</span> =&gt; am<span class="br0">&#40;</span><a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'Comment.active'</span> =&gt; <span class="nu0">0</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'Comment.blocked'</span> =&gt; <span class="nu0">0</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span>, <span class="re0">$queryData</span><span class="br0">&#91;</span><span class="st0">'conditions'</span><span class="br0">&#93;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'contain'</span> =&gt; am<span class="br0">&#40;</span><a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'User'</span><span class="br0">&#41;</span>, <span class="re0">$queryData</span><span class="br0">&#91;</span><span class="st0">'contain'</span><span class="br0">&#93;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; <span class="kw2">default</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> parent::<span class="me2">find</span><span class="br0">&#40;</span><span class="re0">$type</span>, <span class="re0">$queryData</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; <span class="br0">&#125;</span><br />
<span class="br0">&#125;</span></div>
<p>With some default values we can happily use our custom find type alongside dynamic conditions inserted by our controllers. If you think this am() stuff is overkill, you could as well just provide another find type:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$this</span>-&gt;<span class="me1">Comment</span>-&gt;<span class="me1">find</span><span class="br0">&#40;</span><span class="st0">'pending-created-by-logged-in-user'</span><span class="br0">&#41;</span>;</div>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">class</span> Comment <span class="kw2">extends</span> AppModel <span class="br0">&#123;</span><br />
&nbsp; <span class="kw2">var</span> <span class="re0">$belongsTo</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'User'</span><span class="br0">&#41;</span>;<br />
<br />
&nbsp; <span class="kw2">function</span> find<span class="br0">&#40;</span><span class="re0">$type</span>, <span class="re0">$queryData</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="kw1">switch</span> <span class="br0">&#40;</span><span class="re0">$type</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">case</span> <span class="st0">'pending'</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">find</span><span class="br0">&#40;</span><span class="st0">'all'</span>, <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'fields'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'User.email'</span>, <span class="st0">'User.first_name'</span>, <span class="st0">'User.last_name'</span>, <span class="st0">'Comment.name'</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'conditions'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'Comment.active'</span> =&gt; <span class="nu0">0</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'Comment.blocked'</span> =&gt; <span class="nu0">0</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'contain'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'User'</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; <span class="kw1">case</span> <span class="st0">'pending-created-by-logged-in-user'</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">find</span><span class="br0">&#40;</span><span class="st0">'all'</span>, <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'fields'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'User.email'</span>, <span class="st0">'User.first_name'</span>, <span class="st0">'User.last_name'</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'conditions'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'Comment.active'</span> =&gt; <span class="nu0">0</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'Comment.blocked'</span> =&gt; <span class="nu0">0</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'Comment.created_by_id'</span> =&gt; User::<span class="me2">get</span><span class="br0">&#40;</span><span class="st0">'id'</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'contain'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'User'</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; <span class="kw2">default</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> parent::<span class="me2">find</span><span class="br0">&#40;</span><span class="re0">$type</span>, <span class="re0">$queryData</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; <span class="br0">&#125;</span><br />
<span class="br0">&#125;</span></div>
<p>... well you get the idea. By the way, do you notice how useful using a static functions like this User::get() methods are for fetching properties and data from the currently logged in user? More on that later.</p>
<p>Anybody willing to share some dough on this one?</p>
<p>-- Tim Koschuetzki aka DarkAngelBGE<br />
<img style="display: none;" src="http://debuggable.com/posts/tick/485030de-4778-456e-8400-44d84834cda3"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fimplementing-different-types-for-cakes-modelfind-method%3A485030de-4778-456e-8400-44d84834cda3 &amp;title=How+to+bend+Cake%27s+Model%3A%3Afind%28%29+method+to+your+needs';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fimplementing-different-types-for-cakes-modelfind-method%3A485030de-4778-456e-8400-44d84834cda3';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fimplementing-different-types-for-cakes-modelfind-method%3A485030de-4778-456e-8400-44d84834cda3&amp;title=How+to+bend+Cake%27s+Model%3A%3Afind%28%29+method+to+your+needs&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fimplementing-different-types-for-cakes-modelfind-method%3A485030de-4778-456e-8400-44d84834cda3&amp;title=How+to+bend+Cake%27s+Model%3A%3Afind%28%29+method+to+your+needs';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>
	<div class="related-posts">
		<h3>(Theoretically) Related Posts</h3>
				<ul class="first">
							<li><a href="/posts/modelsave-now-returns-an-array:480f4dd6-0a7c-4026-ad5a-49c8cbdd56cb">Model::save() now returns an array!</a></li>
							<li><a href="/posts/how-to-properly-create-a-model-instance-manually:480f4dd6-4424-4c89-9564-4647cbdd56cb">How to properly create a Model instance manually</a></li>
							<li><a href="/posts/unlimited-model-fields-expandable-behavior:48428c2e-9a88-47ec-ae8e-77a64834cda3">Unlimited Model fields - Expandable Behavior</a></li>
							<li><a href="/posts/making-error-handling-for-modelsave-more-beautiful-in-cakephp:480f4dd6-7110-4706-8230-4a97cbdd56cb">Making error handling for Model::save more beautiful in CakePHP</a></li>
							<li><a href="/posts/remember-the-days-before-spam-a-cakephp-model-for-akismet:480f4dd5-d358-4f51-ac83-45f1cbdd56cb">Remember the days before spam? A CakePHP Model for Akismet  </a></li>
					</ul>
		<ul>
							<li><a href="/posts/how-to-put-combined-fields-into-cakephps-model-generatelist:480f4dfe-7dec-4b43-bc7c-4258cbdd56cb">How to put Combined Fields Into CakePHP&#039;s Model-&gt;generateList()</a></li>
							<li><a href="/posts/looking-up-foreign-key-values-using-modeldisplayfield:480f4dd6-e36c-4e76-bba1-4483cbdd56cb">Looking up foreign key values using Model::displayField</a></li>
							<li><a href="/posts/google-analytics-php-api-cakephp-model:480f4dd5-b2a4-452a-b4ed-4f3fcbdd56cb">Google Analytics PHP Api (CakePHP Model)</a></li>
							<li><a href="/posts/how-to-do-group-by-conditions-in-model-find()-calls:483fdc1c-8454-4593-a55e-37244834cda3">How to do Group By conditions in Model find() calls in the CakePHP RC1</a></li>
							<li><a href="/posts/dessert-13-a-simple-config-model:480f4dd5-d100-4e7f-80e6-416acbdd56cb">Dessert #13 - A simple Config Model</a></li>
					</ul>
	</div>
	<div class="clear">&nsbp;</div>

			<p>You can <a href="#comment_form">skip to the end</a> and add a comment.</p>
	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/implementing-different-types-for-cakes-modelfind-method:485030de-4778-456e-8400-44d84834cda3">21 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/implementing-different-types-for-cakes-modelfind-method:485030de-4778-456e-8400-44d84834cda3#CommentAddForm">Add Comment</a>	</div>
	<div class="post_comments">
	<div class="clear"></div>
									<div id="comment-485d0df7-eff0-4845-b9a5-47c14834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=692152846270156fcfc529a8678b0698&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.pagebakers.nl" rel="nofollow">Eelco Wiersma</a>						</strong>
						<strong>said 
						on Jun 21, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Nice approach, I can see me using this. </p>
<p>Thanks!</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-485d18e9-8554-4929-827b-76b64834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=59066e62dbeff30f4af60fb899730b96&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Dardo Sordi&nbsp;						</strong>
						<strong>said 
						on Jun 21, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>This is the third time this get blogged in CakeLand(TM):</p>
<p><a rel="nofollow" href="http://c7y.phparch.com/c/entry/1/art,mvc_and_cake">http://c7y.phparch.com/c/entry/1/art,mvc_and_cake</a><br />
<a rel="nofollow" href="http://cakebaker.42dh.com/2008/03/23/defining-custom-find-types/">http://cakebaker.42dh.com/2008/03/23/defining-custom-find-types/</a></br></p>
<p>Anyway, good post.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-485d398e-b3f4-45c6-a7cc-1fd54834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=00d595d4340c4ac04edd294f8128aed8&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://ioreader.com" rel="nofollow">Peter Goodman</a>						</strong>
						<strong>said 
						on Jun 21, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>I find this adds too much power to your find() function and needlessly complicates it. If we imagine a scenario where I'm looking at the documentation for this model, I need to know that specific arguments will trigger functionality that is inconsistent with the find() methods of every other model.</p>
<p>Why not simply have a findPending() function? It make your life simpler because it removed the unnecessary logic from find() into a specific function and the purpose of the function is *immediately* obvious.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-485d7b4f-dc18-4f01-8fe1-57144834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=7b813591ce10b09809e950fdeabc5ed3&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							ryan&nbsp;						</strong>
						<strong>said 
						on Jun 21, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>i like it; good post</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-485dc9cf-5b40-4674-b7f4-248e4834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=ff3cac27665f30fa245c990f53d0b9e3&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://filchiprogrammer.wordpress.com" rel="nofollow">phpcurious</a>						</strong>
						<strong>said 
						on Jun 22, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Nice one! I also like to implement this on one of my projects!</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-485e259c-e7dc-4134-beb7-5ee54834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=6aea1003ddbf44a6778aa8fcbae00d71&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Jeremy&nbsp;						</strong>
						<strong>said 
						on Jun 22, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Nice and inspired,</p>
<p>Thanks</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-485e8d0c-0950-4f59-99cb-37b54834cda3" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=9c31d1102d95104fb994ae67cd1989b6&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://debuggable.com/tim" rel="nofollow">Tim Kosch√ºtzki</a>						</strong>
						<strong>said 
						on Jun 22, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Eelco Wiersma: :)</p>
<p>Dardo Sordi: Argh, wasn't aware of these. Well, it's IMO a good technique, so why not spread the word some more.</p>
<p>Peter Goodman: Your approach works as well. However, with the approach from the article you can remove a lot of extra functions. I agree however, that this can add quite some overhead if they need additional logic / complexity.</p>
<p>Good objection.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-485f1ba8-3d28-4c48-be66-6f514834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=5695d132647061781c8f95becd2ddb0f&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Grant Cox&nbsp;						</strong>
						<strong>said 
						on Jun 23, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>I've used this for find('sql') when I want to get the SQL query returned, rather than the have the query executed and the result returned.  I've written a Bakery article, which is waiting approval.</p>
<p>I agree with Peter that I wouldn't use it for individual cases - only where the functionality is appropriate for all models.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-485f3b3f-0cf0-437b-a6f5-256c4834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=061cfe6ab789182f6f74bca03dd2acac&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Old Cake User&nbsp;						</strong>
						<strong>said 
						on Jun 23, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>* Override all core functions<br />
* Let other programmers to debug</br><br />
* Make the other programmers mad</br><br />
* Spread and blog the great Cake power</br><br />
* Kill the web</br><br />
* Done</br></p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-485f7260-c960-431c-b2b7-65cb4834cda3" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/felix" rel="nofollow">Felix Geisend√∂rfer</a>						</strong>
						<strong>said 
						on Jun 23, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>@Old Cake User and fellow conservatives: Static function signatures have been around for a good part of the last century. Yes, I will miss them too. But no, just because there are currently more tools and assumptions based on the old way of thinking that doesn't mean new approaches should not be used. And this isn't even a CakePHP thing. Take a look over to jQuery land. They have taken the exact same approach for jQuery UI, where one method per plugin / widget delegates all calls. In the long run this keeps the API clean, removes the need of explaining PHP's overload() concept for simple tasks and is just much more flexible.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4860f45c-bee4-4d8f-944e-35a94834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=03eb6bbd2a04e0dfe25ce3ce18971018&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Aaron&nbsp;						</strong>
						<strong>said 
						on Jun 24, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Hi, interesting post.. I am still a beginner at this, can anyone enlighten me what does an am() does?</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4860f68d-cb58-4bd6-be80-4c0e4834cda3" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=9c31d1102d95104fb994ae67cd1989b6&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/tim" rel="nofollow">Tim Kosch√ºtzki</a>						</strong>
						<strong>said 
						on Jun 24, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>am() is a cake shorty for array_merge().</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4863d46c-83ac-488f-8b0b-6f0a4834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23463b99b62a72f26ed677cc556c44e8&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							PHP 4 Hater&nbsp;						</strong>
						<strong>said 
						on Jun 26, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>@Felix Geisend√∂rfer what about scalability and performance? have you guys tested that stuff on a high traffic website? This keeps the API clean but also creates a "big ball of mud" inside MyModel::find()</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4863ec98-0980-484c-a8ad-7c6c4834cda3" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://debuggable.com/felix" rel="nofollow">Felix Geisend√∂rfer</a>						</strong>
						<strong>said 
						on Jun 26, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>PHP 4 Hater: If this becomes your performance bottleneck in any reasonably complex application I would like to congratulate you ; ). Seriously, this is not going to become performance relevant in any scenario I can think of.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-48b25a7d-0834-4179-a260-35204834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=f10eeee1cc0d5c350cc5eab3b1220b05&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Stepan Stolyarov&nbsp;						</strong>
						<strong>said 
						on Aug 25, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Actually, I was wondering about "how useful using a static functions like this User::get() methods are for fetching properties and data from the currently logged in user". :)</p>
<p>Could you please explain this part in a few words until "more on that later" comes?</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-48b263b5-3770-4785-8d0b-66794834cda3" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=9c31d1102d95104fb994ae67cd1989b6&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/tim" rel="nofollow">Tim Kosch√ºtzki</a>						</strong>
						<strong>said 
						on Aug 25, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Stepan Stolyarov: In the Auth system that we use and made, all your User relevant data can be fetched with User::get('id'), User::get('name'), User::get('Profile.id'), etc. By that you ensure you don't have to use all this set('logged_in_user', $user) stuff in your app controller and just call these functions right of your views, too.</p>
<p>And not only that, you can call it from anywhere. You don't need to pass around your user id or anything fancy.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-48b2f491-185c-418d-a28f-3e4d4834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=2c6fb3e24099dc616333f40b683a2744&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							brian&nbsp;						</strong>
						<strong>said 
						on Aug 25, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>will cake's find / relationships not handle belongsTo more than 2 levels deep, in one single query?  If Model1 hasMany Model2 and Model2 hasMany Model3, and the associated belongsTo relations are in place, why can't we just do Model3->find('all') and it "back into" all three models with a single query?</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-48b3f92e-9608-4f8e-8da0-6eb44834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=f89047a466ce2ab454925f9449c016b8&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.nemata.com" rel="nofollow">Christoph Tavan</a>						</strong>
						<strong>said 
						on Aug 26, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Hey Tim, I like your approach and just implemented it in an application. It works perfectly if the application exclusively uses the new type-style find()-calls. However I got confronted with the problem, that the old-style find()-calls (and along with that stuff like read() ), that I still find handy from time to time were broken. It can easily be fixed by allowing two more parameters and not overwriting the queryData-array:</p>
<p>function find($type = null, $fields = array(), $order = null, $recursive = null) {<br />
[...]</br><br />
$queryData = am($defaults, $fields);</br><br />
[... here goes the switch ...]</br><br />
default:</br><br />
	return parent::find($type, $fields, $order, $recursive);</br></p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-48b5175f-bac8-4096-93d5-6fb14834cda3" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://debuggable.com/felix" rel="nofollow">Felix Geisend√∂rfer</a>						</strong>
						<strong>said 
						on Aug 27, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Christoph Tavan: <a rel="nofollow" href="http://gist.github.com/7451">http://gist.github.com/7451</a></p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-48b63005-5d74-4f39-a7e1-47f54834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=6e333c5051ee580b75d9a20db899098d&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://rafaelbandeira3.wordpress.com" rel="nofollow">rafaelbandeira3</a>						</strong>
						<strong>said 
						on Aug 28, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>trackback:<br />
"...read on phparch, cakebaker and debuggable about</br><br />
how to define diferent find types, but *happily* they are all ‚Äúdeprecated‚Äù now, since</br><br />
nate‚Äôs revision - see changelog [6481] - made 6 months ago,</br><br />
customizing find methods is now much more fun, clean..."</br></p>
<p><a rel="nofollow" href="http://rafaelbandeira3.wordpress.com/2008/08/28/the-new-way-to-define-find-methods/">http://rafaelbandeira3.wordpress.com/2008/08/28/the-new-way-to-define-find-methods/</a></p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-48d14715-3f7c-4a8a-b300-2fb14834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=ee19521b6ffa4187371641b6e409d9bc&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Daniel Watson&nbsp;						</strong>
						<strong>said 
						on Sep 17, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>I love how you overwrite the find() class, however there is an issue when you try to use this methodology with paginate().</p>
<p>Refer to <a rel="nofollow" href="https://trac.cakephp.org/ticket/5441">the bug report</a></p>
<p>Here is my work-around. Not very elegant, but it should work...</p>
<p><b><br />
// App Model</br><br />
var $find_type = 'all';</br></b></p>
<p>// Widget Model Class...</p>
<p>function paginateCount($conditions = null, $recursive = 0) {<br />
    if ($this->find_type == 'custom_find') {</br><br />
       ....</br><br />
       return count(custom search conditions)</br><br />
    }</br><br />
    return count(find(all))</br><br />
}</br></p>
<p>function find($type,$conditions) {<br />
    if ($type == 'custom_find') {</br><br />
        ....</br><br />
        return custom search conditions</br><br />
    }</br><br />
    return find($type)</br><br />
}</br></p>
<p>// Widget Control Class</p>
<p>$this->Widget->find_type = 'custom_find';<br />
$this->paginate = array('Widget' => array($this->Widget->find_type));</br><br />
$results = $this->paginate('Widget');</br><br />
$this->Widget->find_type = 'all';</br></p>
<p></p>
<p>-dw</p>
				</div>
				<div class="clear"></div>
							</div>
	  	
				<div class="divider"></div>
		<a name="comment_form"></a>
		<p>This post is too old. We do not allow comments here anymore in order to fight spam. If you have real feedback or questions for the post, please <a href="/contact">contact us</a>.</p>
	</div></div>
	
</div>
<div class="grid_4 prefix_1 omega" id="sidebar">
	<cake:nocache>
			</cake:nocache>

	<h3>RSS Feeds</h3>
	<div id="bug">
		<img src="/img/rss_bug.png" alt="" />	</div>
	<div class="rss">
		<p class="bug-message"></p>
		<a href="http://feeds.feedburner.com/debuggable">Blog RSS</a><br/>
		<a href="http://feeds.feedburner.com/debuggable-comments">Comments RSS</a><br/><br/>
		<img width="88" height="26" alt="" style="border: 0pt none ;" src="http://feeds.feedburner.com/~fc/debuggable?bg=FF9933&amp;fg=444444&amp;anim=0"/>
		<div class="clear"></div>
	</div>

	<h3>Recent Posts</h3>
	<ul>
<li class=""><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb">Releasing node-mysql 2.0.0-alpha</a></li><li class=""><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb">How to write jQuery plugins</a></li><li class=""><a href="/posts/vim-workshop-in-berlin-april-20:4f702b83-ce24-429c-9403-0e39cbdd56cb">Vim Workshop in Berlin (April 20)</a></li><li class=""><a href="/posts/npm-an-intervention:4f44dd25-a114-4361-ada1-6cefcbdd56cb">NPM - An intervention</a></li><li class="active"><a href="/posts/testing-node-js-modules-with-travis-ci:4ec62298-aec4-4ee3-8b5a-2c96cbdd56cb">Testing node.js modules with Travis CI</a></li><li class=""><a href="/posts/private-npm-modules:4e68cc7d-1ac4-42d9-995a-343dcbdd56cb">Private npm modules</a></li></ul>
	<h3>Archive</h3>
	<p class="small align">
		<strong>443 Posts</strong>, <strong>4608 Comments</strong><br /><br />
		We are on air since 2006. Take a tour through the
		<a href="/posts/archive">blog archive</a>.
	</p>
	<div class="search">
	<form id="PostSearchForm" method="post" action="/posts/search"><fieldset style="display:none;"><input type="hidden" name="_method" value="POST" /></fieldset><input name="data[Post][keywords]" type="text" value="" id="PostKeywords" /><input type="submit" class="button" value="Search" /></form>	<div class="clear"></div>
</div>
	<h3>Recent Comments</h3>
	<div class="recent-comments">
		<div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd32b85-220c-4fc8-84b2-378fcbdd56cb">William: thanks, fixed ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=b47010beec892f11619d1e81f0c94f11&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd30119-06fc-4712-aecd-7fa5cbdd56cb">Hi Felix,

The Upgra ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=99b59e8a9cfe2c5575f0fa90f7f30307&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f99a4a2-9ad8-4476-b208-611acbdd56cb">Maybe you can write so ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=8364689a1eefb5eceb6a4f38bbf95731&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f9651b9-eb88-4096-94c1-0fc2cbdd56cb">This is very nice plug ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=7e3d69d16d3b845e89198512355b2ac9&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f8bb75a-96cc-4197-8e93-7c63cbdd56cb">Nice article!

Somet ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f83326b-8c28-43fc-b70d-097ecbdd56cb">That&#039;s fine ognian, th ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=994516a664c2bdc728d18c47e935bc14&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f832a25-5818-4d38-9e39-097ecbdd56cb">Really nice work! I wa ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c15ca-c7c4-48e3-a4db-27decbdd56cb">@J√∂rn: Sorry, thought  ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d5d83832be2b6c70d1968635f68a1b4a&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c11aa-6f9c-448c-abdb-2066cbdd56cb">Thanks didn&#039;t quite un ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7bf934-d4e8-4885-9a2c-7a93cbdd56cb">Well you could expose  ..</a></div><div class="clear_left"></div>	</div>
	<div class="clear_left"></div>
	<h3>Keep an eye on</h3>
<ul class="links external">
	<li><a href="http://transloadit.com" title="Video encoding, image resizing and more for your web or mobile app">Transloadit</a></li><li><a href="http://tus.io" title="Resumable file uploading, upload progress bar, faster upload speed">tus - resumable file upload protocol</a></li><li><a href="http://kevin.vanzonneveld.net/">Kevin van Zonneveld</a></li><li><a href="http://www.littlehart.net/atthekeyboard/">Chris Hartjes</a></li><li><a href="http://mark-story.com">Mark Story</a></li><li><a href="http://www.webbosaurus.de">Webbosaurus</a></li></ul>
	<a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number' title='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'><img src='http://static.jsconf.us/promotejshs.png' height='150' width='180' alt='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'/></a>
</div>

						<div class="clear">&nbsp;</div>
		</div>

		<div id="footer">
			<div class="container_16">
				<ul id="footer_navigation">
					<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>				</ul>
				<p>&copy; 2008 - 2015, Debuggable Ltd. All rights reserved.
				<i>Designed by <a href="http://www.fluidcore.net" target="_blank">fluidCORE</a>.</i>
			</div>
		</div>
	</div>
	<script type="text/javascript" src="/js/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/5627ea2806458e56fb8a5f4b231a44c2.php"></script><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-3306079-3']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script');
ga.src = ('https:' == document.location.protocol ?
    'https://ssl' : 'http://www') +
    '.google-analytics.com/ga.js';
ga.setAttribute('async', 'true');
document.documentElement.firstChild.appendChild(ga);
})();
</script></body>
</html>
