<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
	<title>Welcome to the Dark Side of Plugins in CakePHP &raquo; Debuggable - Node.js Consulting</title>

	<link href="http://feeds.feedburner.com/debuggable" type="application/rss+xml" rel="alternate" title="RSS 2.0" />	<link rel="pingback" href="Debuggable.com/pingback" />
	<link rel="stylesheet" type="text/css" href="/css/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/4026ee2275e22a4e5ec8aea13747c557.php" /></head>
	<body>
		<div class="container_16">
			<h1 id="logo-text"><a href="/">debuggable</a></h1>
			<ul id="navigation">
				<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>			</ul>
			<div class="clear">&nbsp;</div>

			<div id="blueprint">
				<a href="/contact" class="contact">Contact Us</a>			</div>

			<div class="clear">&nbsp;</div>
			<div class="grid_11 alpha" id="content">
	<cake:nocache>
			<div class="messages empty"></div>
	</cake:nocache>
	<div class="post">
	<h2><a href="/posts/welcome-to-the-dark-side-of-plugins-in-cakephp:480f4dd5-0eb8-4cab-aeb3-4796cbdd56cb">Welcome to the Dark Side of Plugins in CakePHP</a></h2>	<div class="posted-on">
		<p>Posted on 24/6/06 by 
		<a href="/felix">Felix Geisend√∂rfer</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/felix_thumb.jpg"/>		</div>
	</div>
	<div class="body">
		<div class="deprecated-post">
	<h3>Deprecated post</h3>
	<p>
		The authors of this post have marked it as deprecated. This means the information displayed is most likely
		<strong>outdated, inaccurate, boring</strong> or a combination of all three.
	</p>
	<p><strong>Policy:</strong> We never delete deprecated posts, but they are not listed in our categories or show up in the search anymore.</p>
	<p>
		<strong>Comments:</strong> You can continue to leave comments on this post, but please consult
		<a href="http://www.google.com">Google</a> or <a href="/posts/search/conditions:posts">our search</a>		first if you want to get an answer ; ).
	</p>
</div>		<p><strong>Important:</strong> This is no official way to use plugins and also no complete step by step tutorial for the things I do with plugins. This post is aimed at advanced CakePHP users trying to get more out of plugins.</p>
<p>Working with plugins in CakePHP is tons of fun and I had good success with it so far. However, there were two things I struggled with: Inter-Plugin Communication as well as filter callbacks.</p>
<p>I want to begin to talk about filter callbacks. In <a href="http://cakeforge.org/projects/spliceit">SpliceIt!</a>, I want plugins to be independent pieces of useful functionality that are very simple to integrate (just drop the folder into app/plugins). Out of the box, CakePHP plugins seem to be capeable of providing this structure, but at one point I hit a difficulty:</p>
<h2>Plugin Callbacks / Hooks</h2>
<p>Imagine you want to have a Statistics plugin, that logs every hit on your website and provides a nice interface for viewing those statistics. Doing the interface is easy in CakePHP, but for logging each hit, your plugin would need to be called every time an action is requested. Now, you can do this by using $this->requestAction(..) in your AppController's beforeFilter, but if you start to have lots of plugins that can be around 10-20 dispatching actions for every hit and performance might suffer. Another drawback to this strategy is, that you will always have to change code in your AppController to integrate a new plugin, which doesn't seem like a very RAD approach to me.</p>
<p>So in order to streamline such plugin callbacks, I created a function inside SpliceIt!, that allows plugins to hook into any AppController event, such as beforeFilter, afterFilter, beforeRender, etc. in order to make their own changes to the controller. So a Themes plugin can easily change the Controller::view and a Statistics plugin can make calls to a Model. </p>
<p>Here is the function I use for triggering those event's, if you want to see the complete implementation, I suggest you to checkout the <a href="https://cakeforge.org/plugins/scmsvn/viewcvs.php/trunk/spliceit/app/plugins/spliceit/splice_it.php?rev=80&root=spliceit&view=markup">splice_it.php</a> from the <a href="https://cakeforge.org/plugins/scmsvn/viewcvs.php/trunk/spliceit/?root=spliceit">current trunk of SpliceIt!</a>.</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="coMULTI">/**<br />
&nbsp;* This function calls a specific hook out of any plugin's hooks.php that matches $pluginFilter<br />
&nbsp;* The list of hooks.php files get's cached for a certain time depending on the value of DEBUG.<br />
&nbsp;* The 3rd argument &amp;$caller has to be a reference to the caller/variable that get's affected by<br />
&nbsp;* the Hook.<br />
&nbsp;*<br />
&nbsp;* @param string $hook<br />
&nbsp;* @param string $pluginFilter<br />
&nbsp;* @param mixed $caller<br />
&nbsp;*/</span><br />
<span class="kw2">function</span> callHooks<span class="br0">&#40;</span><span class="re0">$hook</span>, <span class="re0">$pluginFilter</span> = <span class="st0">'.+'</span>, &amp;<span class="re0">$caller</span><span class="br0">&#41;</span><br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="co1">// pluginHooks contains an array of plugins that provide a hook File</span><br />
&nbsp; &nbsp; <a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="re0">$hookPlugins</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><a href="http://www.php.net/empty"><span class="kw3">empty</span></a><span class="br0">&#40;</span><span class="re0">$pluginFilter</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$pluginFilter</span> = <span class="st0">'.+'</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; <span class="re0">$params</span> = <a href="http://www.php.net/func_get_args"><span class="kw3">func_get_args</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; <span class="co1">// Get rid of $hook, $pluginFilter and &amp;$caller in our $params array</span><br />
&nbsp; &nbsp; <a href="http://www.php.net/array_shift"><span class="kw3">array_shift</span></a><span class="br0">&#40;</span><span class="re0">$params</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <a href="http://www.php.net/array_shift"><span class="kw3">array_shift</span></a><span class="br0">&#40;</span><span class="re0">$params</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <a href="http://www.php.net/array_shift"><span class="kw3">array_shift</span></a><span class="br0">&#40;</span><span class="re0">$params</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <br />
<br />
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><a href="http://www.php.net/empty"><span class="kw3">empty</span></a><span class="br0">&#40;</span><span class="re0">$hookPlugins</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$cachePath</span> = <span class="st0">'hook_files'</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>DEBUG==<span class="nu0">3</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$cacheExpires</span> = <span class="st0">'+5 seconds'</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">elseif</span> <span class="br0">&#40;</span>DEBUG==<span class="nu0">1</span> || DEBUG==<span class="nu0">2</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$cacheExpires</span> = <span class="st0">'+60 seconds'</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$cacheExpires</span> = <span class="st0">'+24 hours'</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$hookFiles</span> = cache<span class="br0">&#40;</span><span class="re0">$cachePath</span>, <span class="kw2">null</span>, <span class="re0">$cacheExpires</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><a href="http://www.php.net/empty"><span class="kw3">empty</span></a><span class="br0">&#40;</span><span class="re0">$hookFiles</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; uses<span class="br0">&#40;</span><span class="st0">'Folder'</span><span class="br0">&#41;</span>; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$Folder</span> =&amp; <span class="kw2">new</span> Folder<span class="br0">&#40;</span>APP.<span class="st0">'plugins'</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$hookFiles</span> = <span class="re0">$Folder</span>-&gt;<span class="me1">findRecursive</span><span class="br0">&#40;</span><span class="st0">'hooks.php'</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cache<span class="br0">&#40;</span><span class="re0">$cachePath</span>, <a href="http://www.php.net/serialize"><span class="kw3">serialize</span></a><span class="br0">&#40;</span><span class="re0">$hookFiles</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span> &nbsp; &nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$hookFiles</span> = <a href="http://www.php.net/unserialize"><span class="kw3">unserialize</span></a><span class="br0">&#40;</span><span class="re0">$hookFiles</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="re0">$hookFiles</span> <span class="kw1">as</span> <span class="re0">$hookFile</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.php.net/list"><span class="kw3">list</span></a><span class="br0">&#40;</span><span class="re0">$plugin</span><span class="br0">&#41;</span> = <a href="http://www.php.net/explode"><span class="kw3">explode</span></a><span class="br0">&#40;</span>DS, <a href="http://www.php.net/substr"><span class="kw3">substr</span></a><span class="br0">&#40;</span><span class="re0">$hookFile</span>, <a href="http://www.php.net/strlen"><span class="kw3">strlen</span></a><span class="br0">&#40;</span>APP.<span class="st0">'plugins'</span>.DS<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">require</span><span class="br0">&#40;</span><span class="re0">$hookFile</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$hookPlugins</span><span class="br0">&#91;</span><span class="br0">&#93;</span> = <span class="re0">$plugin</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><a href="http://www.php.net/preg_match"><span class="kw3">preg_match</span></a><span class="br0">&#40;</span><span class="st0">'/'</span>.<span class="re0">$pluginFilter</span>.<span class="st0">'/iUs'</span>, <span class="re0">$plugin</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$hookFunction</span> = <span class="re0">$plugin</span>.<span class="re0">$hook</span>.<span class="st0">'Hook'</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><a href="http://www.php.net/function_exists"><span class="kw3">function_exists</span></a><span class="br0">&#40;</span><span class="re0">$hookFunction</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.php.net/call_user_func_array"><span class="kw3">call_user_func_array</span></a><span class="br0">&#40;</span><span class="re0">$hookFunction</span>, <a href="http://www.php.net/array_merge"><span class="kw3">array_merge</span></a><span class="br0">&#40;</span><a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span>&amp;<span class="re0">$caller</span><span class="br0">&#41;</span>, <span class="re0">$params</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span> &nbsp; &nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; <span class="kw1">else</span> <br />
&nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="re0">$hookPlugins</span> <span class="kw1">as</span> <span class="re0">$plugin</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><a href="http://www.php.net/preg_match"><span class="kw3">preg_match</span></a><span class="br0">&#40;</span><span class="st0">'/'</span>.<span class="re0">$pluginFilter</span>.<span class="st0">'/iUs'</span>, <span class="re0">$plugin</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$hookFunction</span> = <span class="re0">$plugin</span>.<span class="re0">$hook</span>.<span class="st0">'Hook'</span>; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><a href="http://www.php.net/function_exists"><span class="kw3">function_exists</span></a><span class="br0">&#40;</span><span class="re0">$hookFunction</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.php.net/call_user_func_array"><span class="kw3">call_user_func_array</span></a><span class="br0">&#40;</span><span class="re0">$hookFunction</span>, <a href="http://www.php.net/array_merge"><span class="kw3">array_merge</span></a><span class="br0">&#40;</span><a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span>&amp;<span class="re0">$caller</span><span class="br0">&#41;</span>, <span class="re0">$params</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
<span class="br0">&#125;</span></div>
<p>So now the only modification that needs to be made to the AppController, is to call this function for each filter. Here is an example for the beforeFilter:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">class</span> AppController <span class="kw2">extends</span> Controller<br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="kw2">function</span> beforeFilter<span class="br0">&#40;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; callHooks<span class="br0">&#40;</span><span class="st0">'beforeFilter'</span>, <span class="kw2">null</span>, <span class="re0">$this</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
<span class="br0">&#125;</span></div>
<p>So if you now want to make a Themes plugin you can simply create a file called hooks.php inside app/plugins/themes/ and make it look like this:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<br />
<span class="kw2">function</span> themesBeforeFilterHook<span class="br0">&#40;</span>&amp;<span class="re0">$controller</span><span class="br0">&#41;</span><br />
<span class="br0">&#123;</span> &nbsp; &nbsp;<br />
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><a href="http://www.php.net/file_exists"><span class="kw3">file_exists</span></a><span class="br0">&#40;</span>VIEWS.<span class="st0">'theme.php'</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$controller</span>-&gt;<span class="me1">view</span>==<span class="st0">'View'</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$controller</span>-&gt;<span class="me1">view</span> = <span class="st0">'Theme'</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><a href="http://www.php.net/empty"><span class="kw3">empty</span></a><span class="br0">&#40;</span><span class="re0">$controller</span>-&gt;<span class="me1">theme</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$controller</span>-&gt;<span class="me1">theme</span> = <span class="st0">'default'</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; <span class="kw1">else</span> <br />
&nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.php.net/trigger_error"><span class="kw3">trigger_error</span></a><span class="br0">&#40;</span><span class="st0">'Themes Plugin present, but no theme.php file found in app/views/ '</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
<span class="br0">&#125;</span> &nbsp; &nbsp;
</div>
<p>I currently use those hooks for UrlRewrite (via $from_url in routes.php), AppController::beforeFilter(), AppController::__construct() and some other important points in my application. However, you can also make plugins trigger their own event's, like blogPostBeforeCreate and such.</p>
<p>Anyway, you remember how I told you, that one could avoid using requestAction for plugin communication? Here is what my current approach for SpliceIt! looks like:</p>
<h2>Inter-Plugin communication</h2>
<p>Generally spoken Controller::requestAction() isn't a bad way to exchange data between controllers. It's a clean interface and you don't have to plan in advance what data should be exchangeable and what data should not. However, there are a couple problems with it. The first and most obvious problem is, that every time you use requestAction(), the entire dispatching process is executed again, which is almost like having a second hit on your site (well not quite as bad, but still). In a normal application this isn't that big of a problem, since there won't be more then 1-3 requestAction's executed per page which doesn't hurt performance that bad. But if you have a system of plugins where you can't share Models,Views and Components as easily as you can in a regular app, you might need up to 20++ requestAction's per page to make things work. And at this point it really get's inefficiant. Because creating instances of Controllers, Models, and Components over and over again takes a lot of cpu cycles.</p>
<p>Another drawback to requestAction() is, that when a Controller/Action or View is missing, CakePHP will render an error page and execute exit; leaving no way of error handling to you. You could create your own AppError handler and change this behavior, but I didn't like this approach that much.</p>
<p>So what I figured was, that the best way of exchanging data between plugins, would be to have special ApiControllers, that do nothing but manage the exchange of data between plugins. They would be normal controllers hidden from the public and only one instance of them would be created when needed, and then shared amongst all other (plugin) controllers. Those ApiControllers normally wouldn't have any Views coupled to them, and therefor only be M<del>V</del>C pieces in your app.</p>
<p>So far I have a working implementation of this ApiController pattern of mine in SpliceIt! and it works like a charm. Performance made a significant jump (3-4x faster) compared to requestAction, and the code looks a lot prettier. I'll try to share the most significant parts of it now, but you should definitly checkout the <a href="https://cakeforge.org/plugins/scmsvn/viewcvs.php/trunk/spliceit/?root=spliceit">SpliceIt! trunk</a> for getting a deeper inside into the entire process.</p>
<p>First of all, I'll show you the SpliceItApiController, that I use as the base class for all my ApiController's. Since the ApiController's are sort-of Singletons I added a getInstance() function to them:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">class</span> SpliceItApiController <span class="kw2">extends</span> SpliceItAppController <br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="kw2">var</span> <span class="re0">$autoRender</span> = <span class="kw2">false</span>;<br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; <span class="kw2">function</span> __construct<span class="br0">&#40;</span><span class="re0">$plugin</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$this</span>-&gt;<span class="me1">plugin</span> = <span class="re0">$plugin</span>;<br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; parent::__construct<span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; <br />
&nbsp; <span class="kw2">function</span> &amp;getInstance<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> SpliceIt::<span class="me2">getApiInstance</span><span class="br0">&#40;</span><span class="re0">$this</span>-&gt;<span class="me1">name</span><span class="br0">&#41;</span>;<br />
&nbsp; <span class="br0">&#125;</span><br />
<span class="br0">&#125;</span></div>
<p>You don't have to know about the SpliceItAppController for now, just imagine it to be your normal AppController.</p>
<p>Now here is how one of this ApiController's could look like:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">class</span> UsersApi <span class="kw2">extends</span> SpliceItApiController<br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="kw2">var</span> <span class="re0">$name</span> = <span class="st0">'Users'</span>;<br />
&nbsp; &nbsp; <span class="kw2">var</span> <span class="re0">$uses</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'User'</span><span class="br0">&#41;</span>;<br />
<br />
&nbsp; &nbsp; <span class="kw2">function</span> addUser<span class="br0">&#40;</span><span class="re0">$user</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$this</span>-&gt;<span class="me1">User</span>-&gt;<span class="me1">save</span><span class="br0">&#40;</span><span class="re0">$user</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">User</span>-&gt;<span class="me1">id</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw2">false</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span> &nbsp; &nbsp;<br />
<br />
&nbsp; &nbsp; <span class="kw2">function</span> removeUser<span class="br0">&#40;</span><span class="re0">$id</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#123;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$this</span>-&gt;<span class="me1">User</span>-&gt;<span class="me1">delete</span><span class="br0">&#40;</span><span class="re0">$id</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="re0">$id</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw2">false</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; <span class="co1">// ... More functions</span><br />
<span class="br0">&#125;</span></div>
<p>Now when you want to add a User using the UsersApi in one of your controllers, you can simply do it like this:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">class</span> FooController <span class="kw2">extends</span> SpliceItAppController<br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="kw2">var</span> <span class="re0">$name</span> = <span class="st0">'Foo'</span>;<br />
&nbsp; &nbsp; <span class="kw2">var</span> <span class="re0">$uses</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="kw2">var</span> <span class="re0">$apis</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'Users'</span><span class="br0">&#41;</span>;<br />
<br />
&nbsp; &nbsp; <span class="kw2">function</span> bar<span class="br0">&#40;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$user</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'name'</span> =&gt; <span class="st0">'Jim'</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$this</span>-&gt;<span class="me1">UsersApi</span>-&gt;<span class="me1">addUser</span><span class="br0">&#40;</span><span class="re0">$user</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
<span class="br0">&#125;</span></div>
<p>Now the thing that is still missing, is the way how $this->UsersApi actually get's loaded. I use my own AppController called SpliceItAppController and it contains a function like this:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">class</span> SpliceItAppController <span class="kw2">extends</span> AppController <br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="kw2">var</span> <span class="re0">$apis</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
<br />
&nbsp; &nbsp; <span class="kw2">function</span> constructClasses<span class="br0">&#40;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Load all Apis used in this controller</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>!<a href="http://www.php.net/empty"><span class="kw3">empty</span></a><span class="br0">&#40;</span><span class="re0">$this</span>-&gt;<span class="me1">apis</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><a href="http://www.php.net/is_array"><span class="kw3">is_array</span></a><span class="br0">&#40;</span><span class="re0">$this</span>-&gt;<span class="me1">apis</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="re0">$this</span>-&gt;<span class="me1">apis</span> <span class="kw1">as</span> <span class="re0">$api</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.php.net/list"><span class="kw3">list</span></a><span class="br0">&#40;</span><span class="re0">$api</span><span class="br0">&#41;</span> = SpliceIt::<span class="me2">extractApiAndPlugin</span><span class="br0">&#40;</span><span class="re0">$api</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$apiClass</span> = <span class="re0">$api</span>.<span class="st0">'Api'</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$this</span>-&gt;<span class="re0">$apiClass</span> =&amp; SpliceIt::<span class="me2">getApiInstance</span><span class="br0">&#40;</span><span class="re0">$api</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.php.net/list"><span class="kw3">list</span></a><span class="br0">&#40;</span><span class="re0">$api</span><span class="br0">&#41;</span> = SpliceIt::<span class="me2">extractApiAndPlugin</span><span class="br0">&#40;</span><span class="re0">$this</span>-&gt;<span class="me1">apis</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$apiClass</span> = <span class="re0">$api</span>.<span class="st0">'Api'</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$this</span>-&gt;<span class="re0">$apiClass</span> =&amp; SpliceIt::<span class="me2">getApiInstance</span><span class="br0">&#40;</span><span class="re0">$api</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span> &nbsp; &nbsp; &nbsp; &nbsp;<br />
<br />
&nbsp; &nbsp; &nbsp; &nbsp; parent::<span class="me2">constructClasses</span><span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
<span class="br0">&#125;</span></div>
<p>And here is how SpliceIt::getApiInstance() looks like:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">function</span> &amp;getApiInstance<span class="br0">&#40;</span><span class="re0">$api</span><span class="br0">&#41;</span><br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; SpliceIt::<span class="me2">loadApi</span><span class="br0">&#40;</span><span class="re0">$api</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; <a href="http://www.php.net/list"><span class="kw3">list</span></a><span class="br0">&#40;</span><span class="re0">$api</span>, <span class="re0">$plugin</span><span class="br0">&#41;</span> = SpliceIt::<span class="me2">extractApiAndPlugin</span><span class="br0">&#40;</span><span class="re0">$api</span><span class="br0">&#41;</span>; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
<br />
&nbsp; &nbsp; <span class="re0">$apiClass</span> = <span class="re0">$api</span>.<span class="st0">'Api'</span>;<br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; uses<span class="br0">&#40;</span><span class="st0">'class_registry'</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; <span class="re0">$classKey</span> = <span class="st0">'SpliceIt[Apis]::'</span>.<span class="re0">$apiClass</span>;<br />
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>!ClassRegistry::<span class="me2">isKeySet</span><span class="br0">&#40;</span><span class="re0">$classKey</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$apiInstance</span> = <span class="kw2">&amp;new</span> <span class="re0">$apiClass</span><span class="br0">&#40;</span><span class="re0">$plugin</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$apiInstance</span>-&gt;<span class="me1">constructClasses</span><span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; <span class="kw1">foreach</span><span class="br0">&#40;</span><span class="re0">$apiInstance</span>-&gt;<span class="me1">components</span> <span class="kw1">as</span> <span class="re0">$c</span><span class="br0">&#41;</span> <br />
&nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><a href="http://www.php.net/isset"><span class="kw3">isset</span></a><span class="br0">&#40;</span><span class="re0">$apiInstance</span>-&gt;<span class="br0">&#123;</span><span class="re0">$c</span><span class="br0">&#125;</span><span class="br0">&#41;</span> &amp;&amp; <a href="http://www.php.net/is_object"><span class="kw3">is_object</span></a><span class="br0">&#40;</span><span class="re0">$apiInstance</span>-&gt;<span class="br0">&#123;</span><span class="re0">$c</span><span class="br0">&#125;</span><span class="br0">&#41;</span> &amp;&amp; <a href="http://www.php.net/is_callable"><span class="kw3">is_callable</span></a><span class="br0">&#40;</span><a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="re0">$apiInstance</span>-&gt;<span class="br0">&#123;</span><span class="re0">$c</span><span class="br0">&#125;</span>, <span class="st0">'startup'</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <br />
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$apiInstance</span>-&gt;<span class="br0">&#123;</span><span class="re0">$c</span><span class="br0">&#125;</span>-&gt;<span class="me1">startup</span><span class="br0">&#40;</span><span class="re0">$apiInstance</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$apiInstance</span>-&gt;<span class="me1">beforeFilter</span><span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; ClassRegistry::<span class="me2">addObject</span><span class="br0">&#40;</span><span class="re0">$classKey</span>, <span class="re0">$apiInstance</span><span class="br0">&#41;</span>;<br />
<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="re0">$apiInstance</span>; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; <span class="kw1">else</span> <br />
&nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$apiInstance</span> = &amp;ClassRegistry::<span class="me2">getObject</span><span class="br0">&#40;</span><span class="re0">$classKey</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="re0">$apiInstance</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp;<br />
<span class="br0">&#125;</span></div>
<p>Now you see that all of this isn't that easy to do, and if your project isn't aimed at becoming all that big and using tons of plugins you can easily go with requestAction(). But if you are trying to make a heavily modularized application like I do with SpliceIt! you might find yourself in need of using similiar strategies as the ones presented above. If you have any questions concerning the code above, or SpliceIt! in general, feel free to ask I'll try to answer as good as possible ; ).</p>
<p>--Felix Geisend√∂rfer aka the_undefined<br />
<img style="display: none;" src="http://debuggable.com/posts/tick/480f4dd5-0eb8-4cab-aeb3-4796cbdd56cb"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fwelcome-to-the-dark-side-of-plugins-in-cakephp%3A480f4dd5-0eb8-4cab-aeb3-4796cbdd56cb &amp;title=Welcome+to+the+Dark+Side+of+Plugins+in+CakePHP';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fwelcome-to-the-dark-side-of-plugins-in-cakephp%3A480f4dd5-0eb8-4cab-aeb3-4796cbdd56cb';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fwelcome-to-the-dark-side-of-plugins-in-cakephp%3A480f4dd5-0eb8-4cab-aeb3-4796cbdd56cb&amp;title=Welcome+to+the+Dark+Side+of+Plugins+in+CakePHP&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fwelcome-to-the-dark-side-of-plugins-in-cakephp%3A480f4dd5-0eb8-4cab-aeb3-4796cbdd56cb&amp;title=Welcome+to+the+Dark+Side+of+Plugins+in+CakePHP';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>
	<div class="related-posts">
		<h3>(Theoretically) Related Posts</h3>
				<ul class="first">
							<li><a href="/posts/cakephp-and-acl-why-is-it-so-difficult:480f4dd5-ae90-4ac6-a29a-4caccbdd56cb">CakePHP and Acl - Why is it so difficult?</a></li>
							<li><a href="/posts/learning-from-the-cakephp-source-code-part-i:480f4dd6-28d0-445e-a1dc-4ceacbdd56cb">Learning from the CakePHP source code - Part I</a></li>
							<li><a href="/posts/what-is-a-test-case-especially-in-cakephp:4a2e86b5-015c-4536-aec1-5cf04834cda3">What is a Testcase - especially in CakePHP?</a></li>
							<li><a href="/posts/cakephp-html-balancer-helper:4944c48d-7440-4f9d-8638-6e4b4834cda3">Cleaning Html with this HtmlCleaner for CakePHP</a></li>
							<li><a href="/posts/cakephp-1.2-stable-come-and-help:4829b3ac-903c-4f56-94dc-27af4834cda3">CakePHP 1.2 Stable! Come and help</a></li>
					</ul>
		<ul>
							<li><a href="/posts/google-analytics-php-api-cakephp-model:480f4dd5-b2a4-452a-b4ed-4f3fcbdd56cb">Google Analytics PHP Api (CakePHP Model)</a></li>
							<li><a href="/posts/cakephp-code-coverage-for-group-tests:483b2b77-c420-47e3-b337-653c4834cda3">CakePHP Code Coverage for Group Tests</a></li>
							<li><a href="/posts/bringing-the-cold-war-to-cakephp-12-the-containable-behavior:480f4dd6-2b50-4d7b-ab05-418dcbdd56cb">Bringing the cold war to CakePHP 1.2 - The Containable Behavior</a></li>
							<li><a href="/posts/extra-hot-cakephp-1.2-stable-is-finally-released!:4954151c-f87c-434b-abbd-4e404834cda3">Extra Hot: CakePHP 1.2 Stable is finally released!</a></li>
							<li><a href="/posts/cakephp-argentina:4937042e-4864-48e1-98f0-6d3d4834cda3">CakePHP Argentina</a></li>
					</ul>
	</div>
	<div class="clear">&nsbp;</div>

			<p>You can <a href="#comment_form">skip to the end</a> and add a comment.</p>
	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/welcome-to-the-dark-side-of-plugins-in-cakephp:480f4dd5-0eb8-4cab-aeb3-4796cbdd56cb">24 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/welcome-to-the-dark-side-of-plugins-in-cakephp:480f4dd5-0eb8-4cab-aeb3-4796cbdd56cb#CommentAddForm">Add Comment</a>	</div>
	<div class="post_comments">
	<div class="clear"></div>
									<div id="comment-480f4dd9-ce68-4031-839d-413acbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/felix" rel="nofollow">Felix Geisend√∂rfer</a>						</strong>
						<strong>said 
						on Jun 24, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Ok, if you've read this and are still wondering about the way Api's fit into the entire plugin structure (like some people I talked to in IRC) wait a couple hours and I'll update this article with some more information. Meanwhile you can have a look at the SpliceIt! trunk (link is in the article above) to get a deeper inside.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dd9-8ea8-45e7-98cc-4aeecbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.jonbaer.com/articles/2006/06/25/welcome-to-the-dark-side-of-plugins-in-cakephp" rel="nofollow">Welcome to the Dark Side of Plugins in CakePHP</a>						</strong>
						<strong>said 
						on Jun 26, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>[...] Welcome to the Dark Side of Plugins in CakePHP: "Important: This is no official way to use plugins and also no complete step by step tutorial for the things I do with plugins. This post is aimed at advanced CakePHP users trying to get more out of plugins. [...]</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dd9-a3c4-403c-85af-4853cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.phpdeveloper.org/news/5682" rel="nofollow">PHPDeveloper.org</a>						</strong>
						<strong>said 
						on Jun 26, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p><strong>Felix Geisend&ouml;rfer's Blog: Welcome to the Dark Side of Plugins in CakePHP...</strong></p>
<p>...</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dd9-12e0-4c57-af4f-4990cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=40588c000288726274fab3ef56b71245&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							DingoNV&nbsp;						</strong>
						<strong>said 
						on Jun 26, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>wow. i feel enlightened :)<br />
thanks Felix!!!</br></p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dd9-107c-4291-9f80-4208cbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/felix" rel="nofollow">Felix Geisend√∂rfer</a>						</strong>
						<strong>said 
						on Jun 26, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Hey DingoNV: I'm glad you liked it, I still need to put some more information about the ApiController's up, just didn't get around to do it yet.</p>
<p>Oh and for all the other's, the PHPDeveloper.org pingback (see above) has a really good summary of this article which is worth checking out. Reminds me of: who from the cakephp community is activly posting there? I think that's the 2nd article from my blog that got on there, and I saw rossoft and dhofstet there too. Anyway, thanks for the extra traffic ; ).</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dd9-1568-4561-af26-4cb6cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://richardathome.wordpress.com/2006/06/27/links-for-2006-06-27/" rel="nofollow">Richard@Home &raquo; Blog Archive &raquo; links for 2006-06-27</a>						</strong>
						<strong>said 
						on Jun 27, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>[...] ThinkingPHP ¬ª Welcome to the Dark Side of Plugins in CakePHP This is a bit over my head atm, but ThinkingPHP shows a couple of methods for getting the most out of your plugins (tags: cakephp plugin) [...]</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dd9-d274-42d0-9794-43c3cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=f0b8fa14cbee5edfdeeac6b8f9ad062d&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://tariquesani.net/" rel="nofollow">Tarique Sani</a>						</strong>
						<strong>said 
						on Jul 07, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Another very informative article - thanks for all the hard work you are putting in.</p>
<p>A question if I may, what would be the best way to bundle some javascript libs with what is likely to be a stand alone plugin... I would ideally prefer someway which allows the js to reside inside the plugin's own folder</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dd9-1ddc-4d25-a835-4ff3cbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/felix" rel="nofollow">Felix Geisend√∂rfer</a>						</strong>
						<strong>said 
						on Jul 07, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Hi Tarique, </p>
<p>I'm glad you liked the article ; ). Your question is interesting and I already asked myself how I'm going to accomplish this as well, but I'm still a bit unsure.</p>
<p>One idea was to make a plugin managment system that would execute an install script when you upload a new plugin. I'll eventually do something for the CMS I'll build upon SpliceIt! but I think there should be a more elegant solution for SpliceIt! itself.</p>
<p>Another idea I actually just had after you asked me, is to create a new folder inside app/webroot and call it plugins. This folder would contain an index.php file, as well as an .htaccess that would redirect all plugin/* calls to index.php?url=$1. The index.php in turn would  deliver files from the plugin's weboot's folders. Let me make an example:</p>
<p>A request to: http://www.my-domain.com/plugins/users/edit_user.png</p>
<p>would invoke /app/webroot/plugins/index.php?url=users/edit_user.png</p>
<p>The index.php would look if a file called: /app/plugins/users/webroot/edit_user.png exists, and if yes, return this file. If no, it would invoke:</p>
<p>/app/webroot/index.php?url=plugins/users/edit_user.png</p>
<p>and essentially make CakePHP itself handle the request.</p>
<p>Sounds pretty workable to me, what do you think? I know that returning the files by php is a bit of a performance issue, but I think it's a rather minor one looking at the convenience that would be provided.</p>
<p>Any other ideas?</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dd9-3c98-4e47-b77d-4f48cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=f0b8fa14cbee5edfdeeac6b8f9ad062d&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://tariquesani.net/" rel="nofollow">Tarique Sani</a>						</strong>
						<strong>said 
						on Jul 07, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Hi Felix,<br />
I was also thinking along the lines of having a webroot folder in the plugins folder but was not able to get how to make the plugin get that particular file. Your idea of having a plugins folder in webroot and letting cakePHP handle the request is currently very appealing but I dont really like the performance hit.</br></p>
<p>What if the .htaccess in webroot/plugins just rewrote http://www.my-domain.com/plugins/users/edit_user.png to the point to the actual plugins folder webroot</p>
<p>Will have to see how that can be made possible </p>
<p>Thanks for the response.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dd9-f96c-4ef1-9ccd-4ee4cbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/felix" rel="nofollow">Felix Geisend√∂rfer</a>						</strong>
						<strong>said 
						on Jul 07, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Hi Tarique,</p>
<p>I think you misunderstood me. I wasn't saying that CakePHP should handle the request. I said that /app/webroot/plugins/index.php should, which would be a php script of 3-5 lines of code. So the performance hit is pretty small I'd think.</p>
<p>Anyway, having the .htaccess directly rewriting things sounds even better, let me know if you are able to accomblish it. I just know that debugging mod_rewrite things can be a bit tricky ocassionally ; ).</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dd9-ebd8-457b-a542-4cbdcbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=f0b8fa14cbee5edfdeeac6b8f9ad062d&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://tariquesani.net/" rel="nofollow">Tarique Sani</a>						</strong>
						<strong>said 
						on Jul 08, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Yes may be I misunderstood you... I will try to make .htaccess work later today however we will need that index.php for cases where .htaccess does not work. </p>
<p>I have no experience of any other web server than Apache and lightHTTPd</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dd9-9b18-474b-98f1-4abacbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=f0b8fa14cbee5edfdeeac6b8f9ad062d&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://tariquesani.net/" rel="nofollow">Tarique Sani</a>						</strong>
						<strong>said 
						on Jul 08, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Looks like it is more complicated than anitcipated :D </p>
<p>I got to the point where http://tarique.sanisoft.com/cheesecake/plugins/cms/index.html in the browser goes to /cheesecake/webroot/plugins/cms/webroot/index.html However it should really be going to /cheesecake/plugins/cms/webroot/index.html</p>
<p>How do you propose to code the index.php which is in the webroot/plugins/ - I think it would be a bit more involved than a few lines of code</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dd9-60e8-4032-8da9-488dcbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=f0b8fa14cbee5edfdeeac6b8f9ad062d&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://tariquesani.net/" rel="nofollow">Tarique Sani</a>						</strong>
						<strong>said 
						on Jul 08, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Sorry to SPAM your blog like this BUT I have a solution!! We were looking at wrong things...</p>
<p>In the  .htaccess of your app folder you need to add the following line<br />
RewriteRule   ^plugins/$ - [S=3]</br></p>
<p>This tells the server to skip the next 3 rules if the URL has 'plugins/' in it</p>
<p>Then in the folder of your plugin's folder  you place the following .htaccess</p>
<p>    RewriteEngine on<br />
    RewriteRule   ^$   webroot/   [L]</br><br />
    RewriteRule   (.*) webroot/$1   [L]    </br></p>
<p>So if your plugin is called cms this .htaccess goes in /app/plugins/cms/  and finally in the webroot of your plugin place this .htaccess</p>
<p>    RewriteEngine On<br />
    RewriteCond %{REQUEST_FILENAME} !-d</br><br />
    RewriteCond %{REQUEST_FILENAME} !-f</br><br />
    RewriteRule ^(.*)$ - [L]</br></p>
<p>That is this goes into /app/plugins/cms/webroot/</p>
<p>Phew! !</p>
<p>Now http://yourdomain.com/yourapp/plugins/cms/js/myjs.js points to the correct JS (and other files like CSS, img work as well) </p>
<p>The advantage is that only 1 extra rewrite rule is executed in case of plugins having webroot and there is no PHP involved and you need not have any extra folders in app webroot</p>
<p>The only thing that remains is to code helpers to provide links to stuff in plugin webroot easily - any ideas on that?</p>
<p>Once again sorry for the deluge of comments - please edit/delete comments as appropriate</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dd9-2a7c-43a7-a595-4d9ccbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/felix" rel="nofollow">Felix Geisend√∂rfer</a>						</strong>
						<strong>said 
						on Jul 08, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Hey Tarique,</p>
<p>don't worry about spamming in here, it's definitly on topic and I'm interested in this as well ; ). It's cool to see your solution working, but I would not use it, since I'd consider it a hack. I was  just playing around with an index.php kind of solution, but a big problem has been that you have to figure out what headers to sent for which file, so something with .htaccess avoids this problem.</p>
<p>What I think should be done, is to submit a ticket for this issue on Trac and hope for some native cakephp solution to this problem. Meanwhile your solution would qualify as a workaround, but the issue should be adressed in the framework itself.</p>
<p>What do you think?</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4dd9-d1d8-4a26-8e02-4437cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=f0b8fa14cbee5edfdeeac6b8f9ad062d&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://tariquesani.net/" rel="nofollow">Tarique Sani</a>						</strong>
						<strong>said 
						on Jul 08, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Well till a native solution is not found both our solutions are  hacks - mine because it needs one line modification to the .htaccess in the app folder (rest of the steps are needed only if you are going to use webroot of your plugin) </p>
<p>Your solution of index.php would also, I feel, to be a hack as it needs extra folder in webroot some .htaccess rewriting files and some php dispatching. I was interested to see how you worked around the file mime types problem in php but as you gather it is not so simple ;)</p>
<p>Incidentally if you noticed - the .htaccess which are to be placed in the plugins folders are nearly the same as in the native app and webroot of cake. </p>
<p>Yes, this is definitely an issue to be put in the Trac</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4de1-4698-4d78-9d3e-4bfccbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=046e1551e6d7458209a162fe78a451fd&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Dave&nbsp;						</strong>
						<strong>said 
						on Oct 26, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Did this go into Trac ? I cant find it.</p>
<p>Ideally I think it also needs to stay compatible with the javascript helper.</p>
<p>So automatically a command</p>
<p>$javascript-&gt;link( 'myfile.js' );</p>
<p>inside a plugin will create a  tag linking to /plugins/{pluginname}/js/myfile.js</p>
<p>and to be completely 'correct' surely it should support not having 'plugins' in the url , which is already supported by normal page requests.</p>
<p>So a request for /{pluginname}/js/myfile.js  should also work.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4de1-00e8-47af-b6af-4a99cbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/felix" rel="nofollow">Felix Geisend√∂rfer</a>						</strong>
						<strong>said 
						on Oct 26, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Dave: I'm not sure if a ticket has been submitted for it yet, however the core has definitly not been changed to reflect this issue yet.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4de3-92ec-433c-a86d-4564cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=53d91af100208c5c7a1ec8b31c46bc14&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://scragz.com/" rel="nofollow">scragz</a>						</strong>
						<strong>said 
						on Dec 22, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Any updates to SpliceIt! in the last six months that haven't been checked in yet? You're making *exactly* what I need for my app, but some stuff is still not quite there and a few things are broken with current Cake versions. Figured I'd ask before I get down to hacking so work isn't duplicated.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4de3-b1a0-43d7-a74f-46b5cbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/felix" rel="nofollow">Felix Geisend√∂rfer</a>						</strong>
						<strong>said 
						on Dec 22, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>scragz: No, I've not done anything on SpliceIt! myself. I'd really like to work on this project, but my priorities have changed freezing the work on it completly. Anyway I know there are a couple of folks who are interested in SpliceIt! and some have also continued development themselfs for their own projects. If you want to get in touch with those people let me know and I'll introduce you guys. I'd be happy if the result would be a new group of developers taking over the project. I don't have the time to actively take part in that, but I'd be available for reviewing things and making suggestions.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4de4-db18-4bdf-a35b-423fcbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=cbaf02c9061c352f14079e60146aa6d1&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://scragz.com/" rel="nofollow">scragz</a>						</strong>
						<strong>said 
						on Jan 18, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>There's a bug already for the <a href="https://trac.cakephp.org/ticket/1897" rel="nofollow">plugin js/css stuff</a>.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-483662be-ef50-4d32-8ac9-35364834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=dcdc0812216fdeecde190cc612ae3fb9&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://facebook-developer.net" rel="nofollow">Matt Huggins</a>						</strong>
						<strong>said 
						on May 23, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Did anyone ever resolve this?  The bug listed by scragz (above) is apparently "fixed".  However, when I try to include a CSS file via the HtmlHelper [<em>$html->css('filename')</em>], the URL is outputted as "/css/filename.css" instead of "/pluginname/css/filename.css".  Anyone know what the deal is and how to fix it?</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4860fdf0-4174-4135-a890-0f304834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=7661515ac0cf6fa1e3ed2b959f7566c4&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Jeremy Race&nbsp;						</strong>
						<strong>said 
						on Jun 24, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Yes, it has been fixed: < ?php echo $html->css('filename'); ?> works fine for me as long as there's a webroot folder within the plugin_name(where plugin_name is the name of your plugin) folder, ie /app/plugins/plugin_name/webroot/css/filename.css</></p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-48610c23-4ef8-4469-9274-5ff94834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=7661515ac0cf6fa1e3ed2b959f7566c4&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Jeremy Race&nbsp;						</strong>
						<strong>said 
						on Jun 24, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Correction: This is what has worked for me...<br />
[$html->css('/calendar/css/filename')]</br></p>
<p>My directory listing is as follows:<br />
/app/plugins/plugin_name/vendors/css/filename.css</br></p>
<p>see: <a rel="nofollow" href="https://trac.cakephp.org/ticket/3799">https://trac.cakephp.org/ticket/3799</a></p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-49862ce1-5344-4114-bb12-24ee4834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=218f5e15be2c91c01bd00c821f807a3f&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							ruxkor&nbsp;						</strong>
						<strong>said 
						on Feb 01, 2009:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>a pity this one's the only relevant article to be found about serious plugin development in cake.. in one way or another my google searches always end up here at least twice per month :-/ excellent article nevertheless : )</p>
				</div>
				<div class="clear"></div>
							</div>
	  	
				<div class="divider"></div>
		<a name="comment_form"></a>
		<p>This post is too old. We do not allow comments here anymore in order to fight spam. If you have real feedback or questions for the post, please <a href="/contact">contact us</a>.</p>
	</div></div>
	
</div>
<div class="grid_4 prefix_1 omega" id="sidebar">
	<cake:nocache>
			</cake:nocache>

	<h3>RSS Feeds</h3>
	<div id="bug">
		<img src="/img/rss_bug.png" alt="" />	</div>
	<div class="rss">
		<p class="bug-message"></p>
		<a href="http://feeds.feedburner.com/debuggable">Blog RSS</a><br/>
		<a href="http://feeds.feedburner.com/debuggable-comments">Comments RSS</a><br/><br/>
		<img width="88" height="26" alt="" style="border: 0pt none ;" src="http://feeds.feedburner.com/~fc/debuggable?bg=FF9933&amp;fg=444444&amp;anim=0"/>
		<div class="clear"></div>
	</div>

	<h3>Recent Posts</h3>
	<ul>
<li class=""><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb">Releasing node-mysql 2.0.0-alpha</a></li><li class=""><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb">How to write jQuery plugins</a></li><li class=""><a href="/posts/vim-workshop-in-berlin-april-20:4f702b83-ce24-429c-9403-0e39cbdd56cb">Vim Workshop in Berlin (April 20)</a></li><li class=""><a href="/posts/npm-an-intervention:4f44dd25-a114-4361-ada1-6cefcbdd56cb">NPM - An intervention</a></li><li class="active"><a href="/posts/testing-node-js-modules-with-travis-ci:4ec62298-aec4-4ee3-8b5a-2c96cbdd56cb">Testing node.js modules with Travis CI</a></li><li class=""><a href="/posts/private-npm-modules:4e68cc7d-1ac4-42d9-995a-343dcbdd56cb">Private npm modules</a></li></ul>
	<h3>Archive</h3>
	<p class="small align">
		<strong>443 Posts</strong>, <strong>4608 Comments</strong><br /><br />
		We are on air since 2006. Take a tour through the
		<a href="/posts/archive">blog archive</a>.
	</p>
	<div class="search">
	<form id="PostSearchForm" method="post" action="/posts/search"><fieldset style="display:none;"><input type="hidden" name="_method" value="POST" /></fieldset><input name="data[Post][keywords]" type="text" value="" id="PostKeywords" /><input type="submit" class="button" value="Search" /></form>	<div class="clear"></div>
</div>
	<h3>Recent Comments</h3>
	<div class="recent-comments">
		<div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd32b85-220c-4fc8-84b2-378fcbdd56cb">William: thanks, fixed ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=b47010beec892f11619d1e81f0c94f11&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd30119-06fc-4712-aecd-7fa5cbdd56cb">Hi Felix,

The Upgra ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=99b59e8a9cfe2c5575f0fa90f7f30307&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f99a4a2-9ad8-4476-b208-611acbdd56cb">Maybe you can write so ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=8364689a1eefb5eceb6a4f38bbf95731&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f9651b9-eb88-4096-94c1-0fc2cbdd56cb">This is very nice plug ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=7e3d69d16d3b845e89198512355b2ac9&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f8bb75a-96cc-4197-8e93-7c63cbdd56cb">Nice article!

Somet ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f83326b-8c28-43fc-b70d-097ecbdd56cb">That&#039;s fine ognian, th ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=994516a664c2bdc728d18c47e935bc14&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f832a25-5818-4d38-9e39-097ecbdd56cb">Really nice work! I wa ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c15ca-c7c4-48e3-a4db-27decbdd56cb">@J√∂rn: Sorry, thought  ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d5d83832be2b6c70d1968635f68a1b4a&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c11aa-6f9c-448c-abdb-2066cbdd56cb">Thanks didn&#039;t quite un ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7bf934-d4e8-4885-9a2c-7a93cbdd56cb">Well you could expose  ..</a></div><div class="clear_left"></div>	</div>
	<div class="clear_left"></div>
	<h3>Keep an eye on</h3>
<ul class="links external">
	<li><a href="http://transloadit.com" title="Video encoding, image resizing and more for your web or mobile app">Transloadit</a></li><li><a href="http://tus.io" title="Resumable file uploading, upload progress bar, faster upload speed">tus - resumable file upload protocol</a></li><li><a href="http://kevin.vanzonneveld.net/">Kevin van Zonneveld</a></li><li><a href="http://www.littlehart.net/atthekeyboard/">Chris Hartjes</a></li><li><a href="http://mark-story.com">Mark Story</a></li><li><a href="http://www.webbosaurus.de">Webbosaurus</a></li></ul>
	<a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number' title='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'><img src='http://static.jsconf.us/promotejshs.png' height='150' width='180' alt='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'/></a>
</div>

						<div class="clear">&nbsp;</div>
		</div>

		<div id="footer">
			<div class="container_16">
				<ul id="footer_navigation">
					<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>				</ul>
				<p>&copy; 2008 - 2015, Debuggable Ltd. All rights reserved.
				<i>Designed by <a href="http://www.fluidcore.net" target="_blank">fluidCORE</a>.</i>
			</div>
		</div>
	</div>
	<script type="text/javascript" src="/js/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/5627ea2806458e56fb8a5f4b231a44c2.php"></script><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-3306079-3']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script');
ga.src = ('https:' == document.location.protocol ?
    'https://ssl' : 'http://www') +
    '.google-analytics.com/ga.js';
ga.setAttribute('async', 'true');
document.documentElement.firstChild.appendChild(ga);
})();
</script></body>
</html>
