<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
	<title>Assert the yummyness of your cake &raquo; Debuggable - Node.js Consulting</title>

	<link href="http://feeds.feedburner.com/debuggable" type="application/rss+xml" rel="alternate" title="RSS 2.0" />	<link rel="pingback" href="Debuggable.com/pingback" />
	<link rel="stylesheet" type="text/css" href="/css/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/4026ee2275e22a4e5ec8aea13747c557.php" /></head>
	<body>
		<div class="container_16">
			<h1 id="logo-text"><a href="/">debuggable</a></h1>
			<ul id="navigation">
				<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>			</ul>
			<div class="clear">&nbsp;</div>

			<div id="blueprint">
				<a href="/contact" class="contact">Contact Us</a>			</div>

			<div class="clear">&nbsp;</div>
			<div class="grid_11 alpha" id="content">
	<cake:nocache>
			<div class="messages empty"></div>
	</cake:nocache>
	<div class="post">
	<h2><a href="/posts/assert-the-yummyness-of-your-cake:480f4dd6-7fe0-4113-9776-458acbdd56cb">Assert the yummyness of your cake</a></h2>	<div class="posted-on">
		<p>Posted on 22/10/07 by 
		<a href="/felix">Felix Geisend√∂rfer</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/felix_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p>Hey folks,</p>
<p>if you liked my last post on <a href="http://www.thinkingphp.org/2007/10/21/exceptional-cake/">how to use PHP5 Exceptions in CakePHP</a>, then here is a little addition to it:</p>
<p>When reading over my code, I saw that I had a lot of statements like this in there:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$user</span> = <span class="re0">$Session</span>-&gt;<span class="me1">read</span><span class="br0">&#40;</span><span class="st0">'User'</span><span class="br0">&#41;</span>;<br />
<span class="kw1">if</span> <span class="br0">&#40;</span><a href="http://www.php.net/empty"><span class="kw3">empty</span></a><span class="br0">&#40;</span><span class="re0">$user</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp;throw <span class="kw2">new</span> AppException<span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
<span class="br0">&#125;</span></div>
<p>Now there is nothing really wrong with that. However, I suddenly remembered what assertions are and how they could make my code more readable, while making it shorter. I took a quick look at <a href="http://us.php.net/assert">PHP's assert function</a>, but decided that I don't like it. For one because it takes a string value as a parameter that is than eval()'d and also because there is no way to "catch" failed assertions. Now don't get me wrong, I don't think you should normally catch either assertion or exceptions, as they are not meant for flow control. However, I hate limiting myself. The ability to quickly *hack* a piece of software without having to modify any of its actual code is something I really enjoy. So what I ended up doing was basically to create a class called Assert, and abuse it as a name-space for a whole bunch of useful assertion functions. If an assertion succeeds, it simply returns true. If it doesn't, it throws an AppException which will render a nice page to the user telling him what a crappy programmer I am : ).</p>
<p>But enough talk, lets look at how the above code could be re-factored using assertions.</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$user</span> = <span class="re0">$Session</span>-&gt;<span class="me1">read</span><span class="br0">&#40;</span><span class="st0">'User'</span><span class="br0">&#41;</span>;<br />
<a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">notEmpty</span><span class="br0">&#40;</span><span class="re0">$user</span><span class="br0">&#41;</span>;</div>
<p>Or another example, this time rendering a 404 error page if the assertion fails.</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$this</span>-&gt;<span class="me1">Task</span>-&gt;<span class="me1">set</span><span class="br0">&#40;</span><span class="st0">'id'</span>, <span class="re0">$id</span><span class="br0">&#41;</span>;<br />
<span class="kw1">if</span> <span class="br0">&#40;</span>!<span class="re0">$this</span>-&gt;<span class="me1">Task</span>-&gt;<span class="me1">exists</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp;throw <span class="kw2">new</span> AppException<span class="br0">&#40;</span><span class="st0">'404'</span><span class="br0">&#41;</span>;<br />
<span class="br0">&#125;</span><br />
<br />
<span class="co1">// turns into</span><br />
<span class="re0">$this</span>-&gt;<span class="me1">Task</span>-&gt;<span class="me1">set</span><span class="br0">&#40;</span><span class="st0">'id'</span>, <span class="re0">$id</span><span class="br0">&#41;</span>;<br />
<a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="kw2">true</span><span class="br0">&#40;</span><span class="re0">$this</span>-&gt;<span class="me1">Task</span>-&gt;<span class="me1">exists</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="st0">'404'</span><span class="br0">&#41;</span>;</div>
<p>Ok, ok ... here is the actual code that you'll need to try it out:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="coMULTI">/**<br />
&nbsp;* undocumented class<br />
&nbsp;*<br />
&nbsp;* @package default<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
<span class="kw2">class</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a><span class="br0">&#123;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @param unknown $a <br />
&nbsp;* @param unknown $b <br />
&nbsp;* @param unknown $info <br />
&nbsp;* @param unknown $strict <br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> test<span class="br0">&#40;</span><span class="re0">$val</span>, <span class="re0">$expected</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="re0">$strict</span> = <span class="kw2">true</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="re0">$success</span> = <span class="br0">&#40;</span><span class="re0">$strict</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;? <span class="re0">$val</span> === <span class="re0">$expected</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: <span class="re0">$val</span> == <span class="re0">$expected</span>;<br />
<br />
&nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$success</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">return</span> <span class="kw2">true</span>;<br />
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
<br />
&nbsp; &nbsp; &nbsp; <span class="re0">$calls</span> = <a href="http://www.php.net/debug_backtrace"><span class="kw3">debug_backtrace</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="re0">$calls</span> <span class="kw1">as</span> <span class="re0">$call</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$call</span><span class="br0">&#91;</span><span class="st0">'file'</span><span class="br0">&#93;</span> !== <span class="kw2">__FILE__</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$assertCall</span> = <span class="re0">$call</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">break</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span><br />
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; &nbsp; <span class="re0">$triggerCall</span> = <a href="http://www.php.net/current"><span class="kw3">current</span></a><span class="br0">&#40;</span><span class="re0">$calls</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; <span class="re0">$type</span> = Inflector::<span class="me2">underscore</span><span class="br0">&#40;</span><span class="re0">$assertCall</span><span class="br0">&#91;</span><span class="st0">'function'</span><span class="br0">&#93;</span><span class="br0">&#41;</span>;<br />
<br />
&nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><a href="http://www.php.net/is_string"><span class="kw3">is_string</span></a><span class="br0">&#40;</span><span class="re0">$info</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'type'</span> =&gt; <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
<br />
&nbsp; &nbsp; &nbsp; <span class="re0">$info</span> = am<span class="br0">&#40;</span><a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="st0">'file'</span> =&gt; <span class="re0">$assertCall</span><span class="br0">&#91;</span><span class="st0">'file'</span><span class="br0">&#93;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, <span class="st0">'line'</span> =&gt; <span class="re0">$assertCall</span><span class="br0">&#91;</span><span class="st0">'line'</span><span class="br0">&#93;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, <span class="st0">'function'</span> =&gt; <span class="re0">$triggerCall</span><span class="br0">&#91;</span><span class="st0">'class'</span><span class="br0">&#93;</span>.<span class="st0">'::'</span>.<span class="re0">$triggerCall</span><span class="br0">&#91;</span><span class="st0">'function'</span><span class="br0">&#93;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, <span class="st0">'assertType'</span> =&gt; <span class="re0">$type</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, <span class="st0">'val'</span> =&gt; <span class="re0">$val</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, <span class="st0">'expected'</span> =&gt; <span class="re0">$expected</span><br />
&nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span>, <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; throw <span class="kw2">new</span> AppException<span class="br0">&#40;</span><span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @param unknown $val <br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> <span class="kw2">true</span><span class="br0">&#40;</span><span class="re0">$val</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><span class="re0">$val</span>, <span class="kw2">true</span>, <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @param unknown $val <br />
&nbsp;* @param unknown $info <br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> <span class="kw2">false</span><span class="br0">&#40;</span><span class="re0">$val</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><span class="re0">$val</span>, <span class="kw2">false</span>, <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @param unknown $a <br />
&nbsp;* @param unknown $b <br />
&nbsp;* @param unknown $info <br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> equal<span class="br0">&#40;</span><span class="re0">$a</span>, <span class="re0">$b</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><span class="re0">$a</span>, <span class="re0">$b</span>, <span class="re0">$info</span>, <span class="kw2">false</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @param unknown $a <br />
&nbsp;* @param unknown $b <br />
&nbsp;* @param unknown $info <br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> identical<span class="br0">&#40;</span><span class="re0">$a</span>, <span class="re0">$b</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><span class="re0">$a</span>, <span class="re0">$b</span>, <span class="re0">$info</span>, <span class="kw2">true</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> pattern<span class="br0">&#40;</span><span class="re0">$pattern</span>, <span class="re0">$val</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><a href="http://www.php.net/preg_match"><span class="kw3">preg_match</span></a><span class="br0">&#40;</span><span class="re0">$pattern</span>, <span class="re0">$val</span><span class="br0">&#41;</span>, <span class="kw2">true</span>, am<span class="br0">&#40;</span><a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'pattern'</span> =&gt; <span class="re0">$pattern</span><span class="br0">&#41;</span>, <span class="re0">$info</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @param unknown $val <br />
&nbsp;* @param unknown $info <br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> isEmpty<span class="br0">&#40;</span><span class="re0">$val</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><a href="http://www.php.net/empty"><span class="kw3">empty</span></a><span class="br0">&#40;</span><span class="re0">$val</span><span class="br0">&#41;</span>, <span class="kw2">true</span>, <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @param unknown $val <br />
&nbsp;* @param unknown $info <br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span> &nbsp; <br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> notEmpty<span class="br0">&#40;</span><span class="re0">$val</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><a href="http://www.php.net/empty"><span class="kw3">empty</span></a><span class="br0">&#40;</span><span class="re0">$val</span><span class="br0">&#41;</span>, <span class="kw2">false</span>, <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @param unknown $val <br />
&nbsp;* @param unknown $info <br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> isNumeric<span class="br0">&#40;</span><span class="re0">$val</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><a href="http://www.php.net/is_numeric"><span class="kw3">is_numeric</span></a><span class="br0">&#40;</span><span class="re0">$val</span><span class="br0">&#41;</span>, <span class="kw2">true</span>, <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @param unknown $val <br />
&nbsp;* @param unknown $info <br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> notNumeric<span class="br0">&#40;</span><span class="re0">$val</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><a href="http://www.php.net/is_numeric"><span class="kw3">is_numeric</span></a><span class="br0">&#40;</span><span class="re0">$val</span><span class="br0">&#41;</span>, <span class="kw2">false</span>, <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @param unknown $val <br />
&nbsp;* @param unknown $info <br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> isInteger<span class="br0">&#40;</span><span class="re0">$val</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><a href="http://www.php.net/is_int"><span class="kw3">is_int</span></a><span class="br0">&#40;</span><span class="re0">$val</span><span class="br0">&#41;</span>, <span class="kw2">true</span>, <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @param unknown $val <br />
&nbsp;* @param unknown $info <br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> notInteger<span class="br0">&#40;</span><span class="re0">$val</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><a href="http://www.php.net/is_int"><span class="kw3">is_int</span></a><span class="br0">&#40;</span><span class="re0">$val</span><span class="br0">&#41;</span>, <span class="kw2">false</span>, <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> isIntegerish<span class="br0">&#40;</span><span class="re0">$val</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><a href="http://www.php.net/is_int"><span class="kw3">is_int</span></a><span class="br0">&#40;</span><span class="re0">$val</span><span class="br0">&#41;</span> || <a href="http://www.php.net/ctype_digit"><span class="kw3">ctype_digit</span></a><span class="br0">&#40;</span><span class="re0">$val</span><span class="br0">&#41;</span>, <span class="kw2">true</span>, <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> notIntegerish<span class="br0">&#40;</span><span class="re0">$val</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><a href="http://www.php.net/is_int"><span class="kw3">is_int</span></a><span class="br0">&#40;</span><span class="re0">$val</span><span class="br0">&#41;</span> || <a href="http://www.php.net/ctype_digit"><span class="kw3">ctype_digit</span></a><span class="br0">&#40;</span><span class="re0">$val</span><span class="br0">&#41;</span>, <span class="kw2">false</span>, <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @param unknown $val <br />
&nbsp;* @param unknown $info <br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> isObject<span class="br0">&#40;</span><span class="re0">$val</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><a href="http://www.php.net/is_object"><span class="kw3">is_object</span></a><span class="br0">&#40;</span><span class="re0">$val</span><span class="br0">&#41;</span>, <span class="kw2">true</span>, <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @param unknown $val <br />
&nbsp;* @param unknown $info <br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> notObject<span class="br0">&#40;</span><span class="re0">$val</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><a href="http://www.php.net/is_object"><span class="kw3">is_object</span></a><span class="br0">&#40;</span><span class="re0">$val</span><span class="br0">&#41;</span>, <span class="kw2">false</span>, <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @param unknown $val <br />
&nbsp;* @param unknown $info <br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> isBoolean<span class="br0">&#40;</span><span class="re0">$val</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><a href="http://www.php.net/is_bool"><span class="kw3">is_bool</span></a><span class="br0">&#40;</span><span class="re0">$val</span><span class="br0">&#41;</span>, <span class="kw2">true</span>, <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @param unknown $val <br />
&nbsp;* @param unknown $info <br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> notBoolean<span class="br0">&#40;</span><span class="re0">$val</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><a href="http://www.php.net/is_bool"><span class="kw3">is_bool</span></a><span class="br0">&#40;</span><span class="re0">$val</span><span class="br0">&#41;</span>, <span class="kw2">false</span>, <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @param unknown $val <br />
&nbsp;* @param unknown $info <br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> isString<span class="br0">&#40;</span><span class="re0">$val</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><a href="http://www.php.net/is_string"><span class="kw3">is_string</span></a><span class="br0">&#40;</span><span class="re0">$val</span><span class="br0">&#41;</span>, <span class="kw2">true</span>, <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @param unknown $val <br />
&nbsp;* @param unknown $info <br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> notString<span class="br0">&#40;</span><span class="re0">$val</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><a href="http://www.php.net/is_string"><span class="kw3">is_string</span></a><span class="br0">&#40;</span><span class="re0">$val</span><span class="br0">&#41;</span>, <span class="kw2">false</span>, <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @param unknown $val <br />
&nbsp;* @param unknown $info <br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> isArray<span class="br0">&#40;</span><span class="re0">$val</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><a href="http://www.php.net/is_array"><span class="kw3">is_array</span></a><span class="br0">&#40;</span><span class="re0">$val</span><span class="br0">&#41;</span>, <span class="kw2">true</span>, <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<span class="coMULTI">/**<br />
&nbsp;* undocumented function<br />
&nbsp;*<br />
&nbsp;* @param unknown $val <br />
&nbsp;* @param unknown $info <br />
&nbsp;* @return void<br />
&nbsp;* @access public<br />
&nbsp;*/</span><br />
&nbsp; &nbsp;<a href="http://www.php.net/static"><span class="kw3">static</span></a> <span class="kw2">function</span> notArray<span class="br0">&#40;</span><span class="re0">$val</span>, <span class="re0">$info</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <a href="http://www.php.net/assert"><span class="kw3">Assert</span></a>::<span class="me2">test</span><span class="br0">&#40;</span><a href="http://www.php.net/is_array"><span class="kw3">is_array</span></a><span class="br0">&#40;</span><span class="re0">$val</span><span class="br0">&#41;</span>, <span class="kw2">false</span>, <span class="re0">$info</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp;<span class="br0">&#125;</span><br />
<br />
<span class="br0">&#125;</span>
</div>
<p>This is probably still missing a couple kinds of assertions, I'll add whatever ones you guys think are needed to this. I'm also interested in what you guys think about this stuff in genera. I mean are there any opinions on whether you think applications should crash hard if something unexpected happens, or would you promote the idea of trying to recover from failures by providing default values and things as much as possible?</p>
<p>-- Felix Geisend√∂rfer aka the_undefined<br />
<img style="display: none;" src="http://debuggable.com/posts/tick/480f4dd6-7fe0-4113-9776-458acbdd56cb"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fassert-the-yummyness-of-your-cake%3A480f4dd6-7fe0-4113-9776-458acbdd56cb &amp;title=Assert+the+yummyness+of+your+cake';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fassert-the-yummyness-of-your-cake%3A480f4dd6-7fe0-4113-9776-458acbdd56cb';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fassert-the-yummyness-of-your-cake%3A480f4dd6-7fe0-4113-9776-458acbdd56cb&amp;title=Assert+the+yummyness+of+your+cake&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fassert-the-yummyness-of-your-cake%3A480f4dd6-7fe0-4113-9776-458acbdd56cb&amp;title=Assert+the+yummyness+of+your+cake';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>
	<div class="related-posts">
		<h3>(Theoretically) Related Posts</h3>
				<ul class="first">
							<li><a href="/posts/join-us-at-cake-fest:480f4dd6-bed0-413a-9b10-45d1cbdd56cb">Join us at cake fest!</a></li>
							<li><a href="/posts/3000-candles-on-the-cakephp-cake:480f4dd5-01f8-40e6-9acc-413bcbdd56cb">3000 candles on the CakePHP cake</a></li>
					</ul>
		<ul>
					</ul>
	</div>
	<div class="clear">&nsbp;</div>

			<p>You can <a href="#comment_form">skip to the end</a> and add a comment.</p>
	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/assert-the-yummyness-of-your-cake:480f4dd6-7fe0-4113-9776-458acbdd56cb">10 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/assert-the-yummyness-of-your-cake:480f4dd6-7fe0-4113-9776-458acbdd56cb#CommentAddForm">Add Comment</a>	</div>
	<div class="post_comments">
	<div class="clear"></div>
									<div id="comment-480f4df1-7b14-4d9f-a4f9-4645cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=5695d132647061781c8f95becd2ddb0f&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Grant Cox&nbsp;						</strong>
						<strong>said 
						on Oct 22, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Very cool Felix.</p>
<p>I must admit seeing "assert" in non-test code is a little strange for me, but the overall solution is very elegant.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4df1-ceac-41c7-9496-4001cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.phpdeveloper.org/news/8906" rel="nofollow">PHPDeveloper.org</a>						</strong>
						<strong>said 
						on Oct 25, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p><strong>Felix Geisendorfer's Blog: Assert the yummyness of your cake...</strong></p>
<p>...</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4df1-3874-405d-8c5b-4940cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.developercast.com/2007/10/25/felix-geisendorfers-blog-assert-the-yummyness-of-your-cake/" rel="nofollow">developercast.com &raquo; Felix Geisendorfer&#8217;s Blog: Asser</a>						</strong>
						<strong>said 
						on Oct 25, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>[...] Felix Geisendorfer has posted an addition to his previous look at exceptions in CakePHP with a modification that uses assertions instead of an if to check the value of a variable.   I suddenly remembered what assertions are and how they could make my code more readable, while making it shorter. I took a quick look at PHP&#8217;s assert function, but decided that I don&#8217;t like it. [&#8230;] What I ended up doing was basically to create a class called Assert, and abuse it as a name-space for a whole bunch of useful assertion functions. [...]</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4df1-90f4-4f5e-8954-44fbcbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.mt-soft.com.ar/2007/10/25/assert-the-yummyness-of-your-cake-exceptions-in-cakephp/" rel="nofollow">Assert the yummyness of your cake. Exceptions in CakePHP | MT-So</a>						</strong>
						<strong>said 
						on Oct 26, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>[...] Assert the yummyness of your cake. Exceptions in CakePHP Posted in October 25th, 2007  by admin in PHP, Programming  Felix Geisendorfer has posted an addition to his previous look at exceptions in CakePHP with a modification that uses assertions instead of an if to check the value of a variable. Hey folks, [...]</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4df2-61a8-45dc-b4f4-4f09cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.thinkingphp.org/2007/11/03/modelsave-now-returns-an-array/" rel="nofollow">ThinkingPHP and beyond &raquo; Model::save() now returns an arra</a>						</strong>
						<strong>said 
						on Nov 03, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>[...] Then you're in for a surprise. Because as of revision 5895 Model::save() now returns Model::data on success if its not empty. Now most of us do not use strict comparison for checking the return value of Model::save(), but I was stupid enough to do it as part of my new "fail hard fast" strategy : ). So suddenly I had stuff blowing up all over the place. [...]</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-485a96bf-c21c-4912-b9a2-256f4834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=00d595d4340c4ac04edd294f8128aed8&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://ioreader.com" rel="nofollow">Peter Goodman</a>						</strong>
						<strong>said 
						on Jun 19, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>PHP's assert() doesn't actually need to take a string argument, that's just for when you have debugging turned off with the assert ini options so that the code in the asserts isn't needlessly executed.</p>
<p>Although I don't quite agree with the 'Assert' name, the implementation is elegant. It definitely lets you remove some annoying/redundant code.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-488062d0-db78-4330-b4ab-2db84834cda3" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=9c31d1102d95104fb994ae67cd1989b6&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://debuggable.com/tim" rel="nofollow">Tim Kosch√ºtzki</a>						</strong>
						<strong>said 
						on Jul 18, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Peter Goodman: What name would you propose instead? We are planning on releasing our Exception handler that makes use of the Asserter and are therefore open to name suggestions.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-49399baa-1b2c-454f-a1e4-3d904834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=34d2ae3f7fdcec853ec24cf85715da96&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Daniel Harrington&nbsp;						</strong>
						<strong>said 
						on Dec 05, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Hey Felix, I really enjoy your blog and I've got a question about your Assert class. Well, actually I have a problem. The problem is, that it don't renders the layout/view when an Exception was thrown.</p>
<p>I don't really have a clue about what to do ... I'm using Cake 1.2 RC3. Maybe you have an idea about where to find the problem? Because I would really like to use it!</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-49399c23-26ec-4bb5-b8eb-6eb94834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=34d2ae3f7fdcec853ec24cf85715da96&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Daniel Harrington&nbsp;						</strong>
						<strong>said 
						on Dec 05, 2008:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Ohhh ... and ... everything works fine (the layout/view) is rendered, when I comment out the "ob_start();" and "$out = ob_get_clean();" and Cake's core view class or if I add an echo/pr before the "ob_start();"</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4a3c7604-e800-4169-99da-77444834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=7878c8806b5dbb362d7fb9197b889e17&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://josediazgonzalez.com" rel="nofollow">Jose Diaz-Gonzalez</a>						</strong>
						<strong>said 
						on Jun 20, 2009:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Is this class still valid in CakePHP? Can you post an example Controller (or Model :) ) using this? I'm a bit lost as to how to utilize this class, other than including it as a vendor, which if there is a better way, I'm open to hearing about it :)</p>
				</div>
				<div class="clear"></div>
							</div>
	  	
				<div class="divider"></div>
		<a name="comment_form"></a>
		<p>This post is too old. We do not allow comments here anymore in order to fight spam. If you have real feedback or questions for the post, please <a href="/contact">contact us</a>.</p>
	</div></div>
	
</div>
<div class="grid_4 prefix_1 omega" id="sidebar">
	<cake:nocache>
			</cake:nocache>

	<h3>RSS Feeds</h3>
	<div id="bug">
		<img src="/img/rss_bug.png" alt="" />	</div>
	<div class="rss">
		<p class="bug-message"></p>
		<a href="http://feeds.feedburner.com/debuggable">Blog RSS</a><br/>
		<a href="http://feeds.feedburner.com/debuggable-comments">Comments RSS</a><br/><br/>
		<img width="88" height="26" alt="" style="border: 0pt none ;" src="http://feeds.feedburner.com/~fc/debuggable?bg=FF9933&amp;fg=444444&amp;anim=0"/>
		<div class="clear"></div>
	</div>

	<h3>Recent Posts</h3>
	<ul>
<li class=""><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb">Releasing node-mysql 2.0.0-alpha</a></li><li class=""><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb">How to write jQuery plugins</a></li><li class=""><a href="/posts/vim-workshop-in-berlin-april-20:4f702b83-ce24-429c-9403-0e39cbdd56cb">Vim Workshop in Berlin (April 20)</a></li><li class=""><a href="/posts/npm-an-intervention:4f44dd25-a114-4361-ada1-6cefcbdd56cb">NPM - An intervention</a></li><li class="active"><a href="/posts/testing-node-js-modules-with-travis-ci:4ec62298-aec4-4ee3-8b5a-2c96cbdd56cb">Testing node.js modules with Travis CI</a></li><li class=""><a href="/posts/private-npm-modules:4e68cc7d-1ac4-42d9-995a-343dcbdd56cb">Private npm modules</a></li></ul>
	<h3>Archive</h3>
	<p class="small align">
		<strong>443 Posts</strong>, <strong>4608 Comments</strong><br /><br />
		We are on air since 2006. Take a tour through the
		<a href="/posts/archive">blog archive</a>.
	</p>
	<div class="search">
	<form id="PostSearchForm" method="post" action="/posts/search"><fieldset style="display:none;"><input type="hidden" name="_method" value="POST" /></fieldset><input name="data[Post][keywords]" type="text" value="" id="PostKeywords" /><input type="submit" class="button" value="Search" /></form>	<div class="clear"></div>
</div>
	<h3>Recent Comments</h3>
	<div class="recent-comments">
		<div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd32b85-220c-4fc8-84b2-378fcbdd56cb">William: thanks, fixed ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=b47010beec892f11619d1e81f0c94f11&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd30119-06fc-4712-aecd-7fa5cbdd56cb">Hi Felix,

The Upgra ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=99b59e8a9cfe2c5575f0fa90f7f30307&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f99a4a2-9ad8-4476-b208-611acbdd56cb">Maybe you can write so ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=8364689a1eefb5eceb6a4f38bbf95731&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f9651b9-eb88-4096-94c1-0fc2cbdd56cb">This is very nice plug ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=7e3d69d16d3b845e89198512355b2ac9&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f8bb75a-96cc-4197-8e93-7c63cbdd56cb">Nice article!

Somet ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f83326b-8c28-43fc-b70d-097ecbdd56cb">That&#039;s fine ognian, th ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=994516a664c2bdc728d18c47e935bc14&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f832a25-5818-4d38-9e39-097ecbdd56cb">Really nice work! I wa ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c15ca-c7c4-48e3-a4db-27decbdd56cb">@J√∂rn: Sorry, thought  ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d5d83832be2b6c70d1968635f68a1b4a&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c11aa-6f9c-448c-abdb-2066cbdd56cb">Thanks didn&#039;t quite un ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7bf934-d4e8-4885-9a2c-7a93cbdd56cb">Well you could expose  ..</a></div><div class="clear_left"></div>	</div>
	<div class="clear_left"></div>
	<h3>Keep an eye on</h3>
<ul class="links external">
	<li><a href="http://transloadit.com" title="Video encoding, image resizing and more for your web or mobile app">Transloadit</a></li><li><a href="http://tus.io" title="Resumable file uploading, upload progress bar, faster upload speed">tus - resumable file upload protocol</a></li><li><a href="http://kevin.vanzonneveld.net/">Kevin van Zonneveld</a></li><li><a href="http://www.littlehart.net/atthekeyboard/">Chris Hartjes</a></li><li><a href="http://mark-story.com">Mark Story</a></li><li><a href="http://www.webbosaurus.de">Webbosaurus</a></li></ul>
	<a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number' title='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'><img src='http://static.jsconf.us/promotejshs.png' height='150' width='180' alt='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'/></a>
</div>

						<div class="clear">&nbsp;</div>
		</div>

		<div id="footer">
			<div class="container_16">
				<ul id="footer_navigation">
					<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>				</ul>
				<p>&copy; 2008 - 2015, Debuggable Ltd. All rights reserved.
				<i>Designed by <a href="http://www.fluidcore.net" target="_blank">fluidCORE</a>.</i>
			</div>
		</div>
	</div>
	<script type="text/javascript" src="/js/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/5627ea2806458e56fb8a5f4b231a44c2.php"></script><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-3306079-3']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script');
ga.src = ('https:' == document.location.protocol ?
    'https://ssl' : 'http://www') +
    '.google-analytics.com/ga.js';
ga.setAttribute('async', 'true');
document.documentElement.firstChild.appendChild(ga);
})();
</script></body>
</html>
