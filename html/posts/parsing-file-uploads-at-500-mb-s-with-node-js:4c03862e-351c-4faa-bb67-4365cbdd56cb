<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
	<title>Parsing file uploads at 500 mb/s with node.js &raquo; Debuggable - Node.js Consulting</title>

	<link href="http://feeds.feedburner.com/debuggable" type="application/rss+xml" rel="alternate" title="RSS 2.0" />	<link rel="pingback" href="Debuggable.com/pingback" />
	<link rel="stylesheet" type="text/css" href="/css/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/4026ee2275e22a4e5ec8aea13747c557.php" /></head>
	<body>
		<div class="container_16">
			<h1 id="logo-text"><a href="/">debuggable</a></h1>
			<ul id="navigation">
				<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>			</ul>
			<div class="clear">&nbsp;</div>

			<div id="blueprint">
				<a href="/contact" class="contact">Contact Us</a>			</div>

			<div class="clear">&nbsp;</div>
			<div class="grid_11 alpha" id="content">
	<cake:nocache>
			<div class="messages empty"></div>
	</cake:nocache>
	<div class="post">
	<h2><a href="/posts/parsing-file-uploads-at-500-mb-s-with-node-js:4c03862e-351c-4faa-bb67-4365cbdd56cb">Parsing file uploads at 500 mb/s with node.js</a></h2>	<div class="posted-on">
		<p>Posted on 31/5/10 by 
		<a href="/felix">Felix Geisend√∂rfer</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/felix_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p>A few weeks ago I set out to create a new multipart/form-data parser for node.js. We need this parser for the new version of <a href="http://transloadit.com/">transloadit</a> that we have been working on since our <a href="http://transloadit.com/blog/2010/04/to-launch-or-not">setback last month</a>.</p>

<p>The result is a new library called <a href="http://github.com/felixge/node-formidable">formidable</a>, which, on a high level, makes receiving file uploads with node.js as easy as:</p>

<p><div class="clear"></div><div class="code debuggable_sh_js" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">var</span> formidable = require<span class="br0">&#40;</span><span class="st0">'formidable'</span><span class="br0">&#41;</span><br />
&nbsp; , http = require<span class="br0">&#40;</span><span class="st0">'http'</span><span class="br0">&#41;</span><br />
&nbsp; , sys = require<span class="br0">&#40;</span><span class="st0">'sys'</span><span class="br0">&#41;</span>;<br />
<br />
http.<span class="me1">createServer</span><span class="br0">&#40;</span><span class="kw2">function</span><span class="br0">&#40;</span>req, res<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>req.<span class="me1">url</span> == <span class="st0">'/upload'</span> &amp;&amp; req.<span class="me1">method</span>.<span class="me1">toLowerCase</span><span class="br0">&#40;</span><span class="br0">&#41;</span> == <span class="st0">'post'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="co1">// parse a file upload</span><br />
&nbsp; &nbsp; <span class="kw2">var</span> form = <span class="kw2">new</span> formidable.<span class="me1">IncomingForm</span><span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; form.<span class="me1">parse</span><span class="br0">&#40;</span>req, <span class="kw2">function</span><span class="br0">&#40;</span>fields, files<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; res.<span class="me1">writeHead</span><span class="br0">&#40;</span><span class="nu0">200</span>, <span class="br0">&#123;</span><span class="st0">'content-type'</span>: <span class="st0">'text/plain'</span><span class="br0">&#125;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; res.<span class="kw1">write</span><span class="br0">&#40;</span><span class="st0">'received upload:<span class="es0">\n</span><span class="es0">\n</span>'</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; res.<span class="me1">end</span><span class="br0">&#40;</span>sys.<span class="me1">inspect</span><span class="br0">&#40;</span><span class="br0">&#123;</span>fields: fields, files: files<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="kw1">return</span>;<br />
&nbsp; <span class="br0">&#125;</span><br />
<br />
&nbsp; <span class="co1">// show a file upload form</span><br />
&nbsp; res.<span class="me1">writeHead</span><span class="br0">&#40;</span><span class="nu0">200</span>, <span class="br0">&#123;</span><span class="st0">'content-type'</span>: <span class="st0">'text/html'</span><span class="br0">&#125;</span><span class="br0">&#41;</span>;<br />
&nbsp; res.<span class="me1">end</span><br />
&nbsp; &nbsp; <span class="br0">&#40;</span> <span class="st0">'&lt;form action=&quot;/upload&quot; enctype=&quot;multipart/form-data&quot; method=&quot;post&quot;&gt;'</span><br />
&nbsp; &nbsp; + <span class="st0">'&lt;input type=&quot;text&quot; name=&quot;title&quot;&gt;&lt;br&gt;'</span><br />
&nbsp; &nbsp; + <span class="st0">'&lt;input type=&quot;file&quot; name=&quot;upload&quot; multiple=&quot;multiple&quot;&gt;&lt;br&gt;'</span><br />
&nbsp; &nbsp; + <span class="st0">'&lt;input type=&quot;submit&quot; value=&quot;Upload&quot;&gt;'</span><br />
&nbsp; &nbsp; + <span class="st0">'&lt;/form&gt;'</span><br />
&nbsp; &nbsp; <span class="br0">&#41;</span>;<br />
<span class="br0">&#125;</span><span class="br0">&#41;</span>;</div></p>

<p>Essentially this works similar to other platforms where file uploads are saved to disk before your script is invoked with a path to the uploaded file.</p>

<p>What's nice about this however, is that you can hook into the whole thing on a lower level:</p>

<p><div class="clear"></div><div class="code debuggable_sh_js" style="white-space: wrap;white-space: nowrap;">
form.<span class="me1">parse</span><span class="br0">&#40;</span>req<span class="br0">&#41;</span>;<br />
form.<span class="me1">addListener</span><span class="br0">&#40;</span><span class="st0">'file'</span>, <span class="kw2">function</span><span class="br0">&#40;</span>field, file<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="co1">// file looks like this:</span><br />
&nbsp; <span class="co1">// {path: '...' , filename: '...', mime: '...'}</span><br />
<span class="br0">&#125;</span><span class="br0">&#41;</span>;</div></p>

<p>We use that interface for processing <a href="http://transloadit.com/docs/multiple-file-upload">HTML5 multi-file uploads</a> as they come in, rather than waiting for the entire upload to finish.</p>

<p>You could even overwrite the <code>onPart</code> handler, which gives you direct access to the raw data stream:</p>

<p><div class="clear"></div><div class="code debuggable_sh_js" style="white-space: wrap;white-space: nowrap;">
form.<span class="me1">onPart</span> = <span class="kw2">function</span><span class="br0">&#40;</span>part<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; part.<span class="me1">addListener</span><span class="br0">&#40;</span><span class="st0">'data'</span>, <span class="kw2">function</span><span class="br0">&#40;</span>chunk<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="co1">// do cool stuff, like streaming incoming files somewhere else</span><br />
&nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>;<br />
<span class="br0">&#125;</span>;</div></p>

<p>All of this is possible thanks to the underlaying <a href="http://github.com/felixge/node-formidable/blob/master/lib/formidable/multipart_parser.js">multipart parser</a> which makes heavy use of <a href="http://nodejs.org/api.html#buffers-3">node.js buffers</a>.</p>

<p>Buffers in node are basically just (efficient) arrays of raw memory that you can access byte by byte. The parser works by looping over each incoming buffer chunk, while maintaining as little state as possible to do its work:</p>

<p><div class="clear"></div><div class="code debuggable_sh_js" style="white-space: wrap;white-space: nowrap;">
<span class="co1">// simplified excerpt from MultipartParser.write</span><br />
<span class="co1">// chunk = Buffer of incoming data</span><br />
<br />
<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw2">var</span> i = <span class="nu0">0</span>; i &lt; chunk.<span class="me1">length</span>; i++<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="kw2">var</span> character = chunk<span class="br0">&#91;</span>i<span class="br0">&#93;</span>;<br />
&nbsp; <span class="kw1">switch</span> <span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">state</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="kw1">case</span> <span class="st0">'BOUNDARY-BEGIN'</span>:<br />
&nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>character != <span class="kw1">this</span>.<span class="me1">boundary</span><span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// unexpected character, abort parsing</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="nu0">0</span>;<br />
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
<br />
&nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>i == <span class="kw1">this</span>.<span class="me1">boundary</span>.<span class="me1">length</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// emit event, advance to next state</span><br />
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">this</span>.<span class="me1">onPartHeaderBegin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">this</span>.<span class="me1">state</span> = <span class="st0">'HEADER-BEGIN'</span>;<br />
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">break</span>;<br />
&nbsp; &nbsp; <span class="kw1">case</span> <span class="st0">'HEADER-BEGIN'</span>:<br />
&nbsp; &nbsp; &nbsp; <span class="co1">// ...</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">break</span>;<br />
&nbsp; <span class="br0">&#125;</span><br />
<span class="br0">&#125;</span></div></p>

<p>But, as you can imagine, this approach turned out to be somewhat limited in speed. I was only able to get about 16-20 mb/s out of this. My goal however was to get somewhere around 125 mb/s, enough to saturate a 1 gbit network connection.</p>

<p>So I started to look for ways to optimize. The data I was parsing looks like this:</p>

<pre class="terminal">--AaB03x
content-disposition: form-data; name="title"

A picture of me on my unicycle!
--AaB03x
content-disposition: form-data; name="pic"; filename="unicycle.jpg"
Content-Type: image/jpeg

... binary data ...
--AaB03x--</pre>

<p>The sequence here being:</p>

<ol>
<li>Series of boundary characters (--AaB03x), announcing the beginning of a new part</li>
<li>Headers for that part</li>
<li>\r\n\r\n</li>
<li>Data for this part</li>
<li>Series of boundary characters, announcing the end of the part or end of the stream</li>
</ol>

<p>What stands out is the fact that there is no parsing needed for step #4. All the data of a part itself is a plain octet stream. So after talking to <a href="http://twitter.com/ryah">Ryan</a> about it, he recommended me to look into the <a href="http://en.wikipedia.org/wiki/Boyer-Moore">Boyer-Moore algorithm</a> to speed things up.</p>

<p>The algorithm is usually the fastest method to find a sub string within a string of text. It basically works by analyzing the needle string and building a lookup table of its characters to efficiently skip over parts of the haystack.</p>

<p>But implementing it, was not exactly easy. The algorithm is not trivial, and many of the example implementations I found were wrong. That however was not the problem. The real challenge was that I was working with a stream of data, rather than a big string I had full access to.</p>

<p>This meant keeping lots of additional state in the parser, as well as creating a very complicated piece of code. I like challenges, but I also like efficiently using my time, so I started looking for a shortcut.</p>

<p>And then it hit me. Most of the boyer-moore algorithm is designed to improve the performance of the worst-case scenario. The worst-case scenario for this problem is the case where you hit a character in your haystack that is also a character in the needle string. Boyer-moore deals with this case by knowing the offset of each character in the needle string, so it can maximize the number of characters to skip in any case.</p>

<p>But file uploads rarely cause these worst-case scenarios! With human text, character repetition is pretty high. But file uploads are binary data, so most bytes are likely to fall outside the ASCII range of characters usually used for the boundary.</p>

<p>That made the solution much simpler. All I had to do was generating a list of all characters in the boundary, and whenever I hit a character that was not in that list, I knew I could safely skip the full length of the boundary:</p>

<p><div class="clear"></div><div class="code debuggable_sh_js" style="white-space: wrap;white-space: nowrap;">
<span class="kw1">while</span> <span class="br0">&#40;</span>i + boundary.<span class="me1">length</span> &lt;= chunk.<span class="me1">length</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>chunk<span class="br0">&#91;</span>i + boundary.<span class="me1">length</span> - <span class="nu0">1</span><span class="br0">&#93;</span> <span class="kw1">in</span> boundaryChars<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="co1">// worst case, go back to byte by byte parsing until a non-matching char occurs</span><br />
&nbsp; &nbsp; <span class="kw1">break</span>;<br />
&nbsp; <span class="br0">&#125;</span><br />
&nbsp; i += boundary.<span class="me1">length</span>;<br />
<span class="br0">&#125;</span></div></p>

<p>This resulted in an incredible speed up, allowing to parse uploads at 500 mb/sec. The parsing can be even faster if a longer boundary sequence is used. Short boundaries and hitting the worst-case scenario frequently will slow things down.</p>

<p>The <a href="http://github.com/felixge/node-formidable/blob/master/benchmark/bench-multipart-parser.js">benchmark</a> I created is using an actual boundary created by Mozilla Firefox. Your milage may vary slightly.</p>

<p>The whole thing could still be optimized further, but at this point I believe it is fast enough to make other parts of the system more likely to become the bottleneck.</p>

<p><a href="http://github.com/felixge/node-formidable">Formidable</a> is licensed under the MIT license. Questions &amp; suggestions regarding the library, node.js or the parser would be most welcome.</p>

<p>--fg</p>

<p><img style="display: none;" src="http://debuggable.com/posts/tick/4c03862e-351c-4faa-bb67-4365cbdd56cb"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fparsing-file-uploads-at-500-mb-s-with-node-js%3A4c03862e-351c-4faa-bb67-4365cbdd56cb &amp;title=Parsing+file+uploads+at+500+mb%2Fs+with+node.js';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fparsing-file-uploads-at-500-mb-s-with-node-js%3A4c03862e-351c-4faa-bb67-4365cbdd56cb';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fparsing-file-uploads-at-500-mb-s-with-node-js%3A4c03862e-351c-4faa-bb67-4365cbdd56cb&amp;title=Parsing+file+uploads+at+500+mb%2Fs+with+node.js&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fparsing-file-uploads-at-500-mb-s-with-node-js%3A4c03862e-351c-4faa-bb67-4365cbdd56cb&amp;title=Parsing+file+uploads+at+500+mb%2Fs+with+node.js';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>
	<div class="related-posts">
		<h3>(Theoretically) Related Posts</h3>
				<ul class="first">
							<li><a href="/posts/parsing-xml-with-the-dom-library:480f4dfe-03e4-47f1-bf8c-47dacbdd56cb">Parsing XML With The DOM Library</a></li>
							<li><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb">Releasing node-mysql 2.0.0-alpha</a></li>
							<li><a href="/posts/node-js-dealing-with-uncaught-exceptions:4c933d54-1428-443c-928d-4e1ecbdd56cb">node.js - Dealing with uncaught exceptions </a></li>
							<li><a href="/posts/streaming-utf-8-with-node-js:4bf28e8b-a290-432f-a222-11c1cbdd56cb">Streaming UTF-8 (with node.js)</a></li>
							<li><a href="/posts/dessert-5-keep-a-custom-configuration-file:480f4dd5-6ee8-40ab-a6f0-413bcbdd56cb">Dessert #5 - Keep a custom configuration file</a></li>
					</ul>
		<ul>
							<li><a href="/posts/node_js:4ab4d9d7-b788-41d4-85c0-1b51cbdd56cb">node.js</a></li>
							<li><a href="/posts/parsing-xml-using-simplexml:480f4dfe-6a58-4a17-a133-455acbdd56cb">Parsing XML using SimpleXML</a></li>
							<li><a href="/posts/streaming-file-uploads-with-node-js:4ac094b2-b6c8-4a7f-bd07-28accbdd56cb">Streaming file uploads with node.js</a></li>
							<li><a href="/posts/unit-testing-with-node-js:4b647d40-34e4-435a-a880-3b04cbdd56cb">Unit testing with node.js</a></li>
							<li><a href="/posts/an-ajax-file-upload-progressbar:480f4dd5-ec84-4f60-b69f-470bcbdd56cb">An Ajax file upload progressbar</a></li>
					</ul>
	</div>
	<div class="clear">&nsbp;</div>

			<p>You can <a href="#comment_form">skip to the end</a> and add a comment.</p>
	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/parsing-file-uploads-at-500-mb-s-with-node-js:4c03862e-351c-4faa-bb67-4365cbdd56cb">6 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/parsing-file-uploads-at-500-mb-s-with-node-js:4c03862e-351c-4faa-bb67-4365cbdd56cb#CommentAddForm">Add Comment</a>	</div>
	<div class="post_comments">
	<div class="clear"></div>
									<div id="comment-4c03b3ba-0818-4254-80b4-0238cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=b9a573370661f5f8316f7886980ade72&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							John Smith&nbsp;						</strong>
						<strong>said 
						on May 31, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>What about raw file upload (without multipart handling) a la CouchDB (<a rel="nofollow" href="http://wiki.apache.org/couchdb/HTTP_Document_API#Standalone_Attachments).">http://wiki.apache.org/couchdb/HTTP_Document_API#Standalone_Attachments).</a> I know you can't do it with a browser but i'm curious of the speed :)</p>
<p>Nice article by the way !</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4c03b560-7c50-4f2f-9a31-0238cbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://debuggable.com/felix" rel="nofollow">Felix Geisend√∂rfer</a>						</strong>
						<strong>said 
						on May 31, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>John Smith: If the HTTP body contains nothing but the uploaded file, node.js should be able to receive it as fast as your operating system can read from the network since there is no need to parse anything (other than the initial http headers).</p>
<p>However, that would not allow for additional fields or more than one file to be uploaded at a time - so it's not really comparable to multipart.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4c04070f-8a4c-47f8-a64f-5361cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=aa0667f46a39aebc1b0f58f46dcdc957&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://gr.ayre.st" rel="nofollow">Karl G</a>						</strong>
						<strong>said 
						on May 31, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Very clever with the range check.</p>
<p>I actually faced a similar problem this past week and wound up using the <a rel="nofollow" href="http://en.wikipedia.org/wiki/KMP_algorithm">KMP Algorithm</a>, which is straightforward both to implement and to convert to streaming. I looked into Boyer-Moore but I knew I'd never hit the KMP worst case for my problem domain and KMP is much simpler. Wound up being ~80 lines of Java.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4c453bdb-0ae8-4c96-9e9b-3a0fcbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=03dfa65e1a3a447b6411eb0f224dc514&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Allen H&nbsp;						</strong>
						<strong>said 
						on Jul 20, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Very cool. I'm looking at a similar project right now but it would involve unzipping very large (200mb+) text files containing event data and then parsing that. Any thoughts on approach - would you do anything differently if you were dealing with the whole file at once?</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4c454c63-79c4-42d9-907b-5494cbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://debuggable.com/felix" rel="nofollow">Felix Geisend√∂rfer</a>						</strong>
						<strong>said 
						on Jul 20, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Allen H: I would use a command line tool to do the unzipping, iterating over the text file could be done with node. I doubt you'd need a sophisticated parser for it, since you'll deal with CSV/TSV right?</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-4c45ad32-8458-4923-991f-348bcbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=03dfa65e1a3a447b6411eb0f224dc514&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Allen H&nbsp;						</strong>
						<strong>said 
						on Jul 20, 2010:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Ya, CSV. Thanks!</p>
				</div>
				<div class="clear"></div>
							</div>
	  	
				<div class="divider"></div>
		<a name="comment_form"></a>
		<p>This post is too old. We do not allow comments here anymore in order to fight spam. If you have real feedback or questions for the post, please <a href="/contact">contact us</a>.</p>
	</div></div>
	
</div>
<div class="grid_4 prefix_1 omega" id="sidebar">
	<cake:nocache>
			</cake:nocache>

	<h3>RSS Feeds</h3>
	<div id="bug">
		<img src="/img/rss_bug.png" alt="" />	</div>
	<div class="rss">
		<p class="bug-message"></p>
		<a href="http://feeds.feedburner.com/debuggable">Blog RSS</a><br/>
		<a href="http://feeds.feedburner.com/debuggable-comments">Comments RSS</a><br/><br/>
		<img width="88" height="26" alt="" style="border: 0pt none ;" src="http://feeds.feedburner.com/~fc/debuggable?bg=FF9933&amp;fg=444444&amp;anim=0"/>
		<div class="clear"></div>
	</div>

	<h3>Recent Posts</h3>
	<ul>
<li class=""><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb">Releasing node-mysql 2.0.0-alpha</a></li><li class=""><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb">How to write jQuery plugins</a></li><li class=""><a href="/posts/vim-workshop-in-berlin-april-20:4f702b83-ce24-429c-9403-0e39cbdd56cb">Vim Workshop in Berlin (April 20)</a></li><li class=""><a href="/posts/npm-an-intervention:4f44dd25-a114-4361-ada1-6cefcbdd56cb">NPM - An intervention</a></li><li class="active"><a href="/posts/testing-node-js-modules-with-travis-ci:4ec62298-aec4-4ee3-8b5a-2c96cbdd56cb">Testing node.js modules with Travis CI</a></li><li class=""><a href="/posts/private-npm-modules:4e68cc7d-1ac4-42d9-995a-343dcbdd56cb">Private npm modules</a></li></ul>
	<h3>Archive</h3>
	<p class="small align">
		<strong>443 Posts</strong>, <strong>4608 Comments</strong><br /><br />
		We are on air since 2006. Take a tour through the
		<a href="/posts/archive">blog archive</a>.
	</p>
	<div class="search">
	<form id="PostSearchForm" method="post" action="/posts/search"><fieldset style="display:none;"><input type="hidden" name="_method" value="POST" /></fieldset><input name="data[Post][keywords]" type="text" value="" id="PostKeywords" /><input type="submit" class="button" value="Search" /></form>	<div class="clear"></div>
</div>
	<h3>Recent Comments</h3>
	<div class="recent-comments">
		<div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd32b85-220c-4fc8-84b2-378fcbdd56cb">William: thanks, fixed ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=b47010beec892f11619d1e81f0c94f11&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd30119-06fc-4712-aecd-7fa5cbdd56cb">Hi Felix,

The Upgra ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=99b59e8a9cfe2c5575f0fa90f7f30307&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f99a4a2-9ad8-4476-b208-611acbdd56cb">Maybe you can write so ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=8364689a1eefb5eceb6a4f38bbf95731&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f9651b9-eb88-4096-94c1-0fc2cbdd56cb">This is very nice plug ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=7e3d69d16d3b845e89198512355b2ac9&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f8bb75a-96cc-4197-8e93-7c63cbdd56cb">Nice article!

Somet ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f83326b-8c28-43fc-b70d-097ecbdd56cb">That&#039;s fine ognian, th ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=994516a664c2bdc728d18c47e935bc14&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f832a25-5818-4d38-9e39-097ecbdd56cb">Really nice work! I wa ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c15ca-c7c4-48e3-a4db-27decbdd56cb">@J√∂rn: Sorry, thought  ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d5d83832be2b6c70d1968635f68a1b4a&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c11aa-6f9c-448c-abdb-2066cbdd56cb">Thanks didn&#039;t quite un ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7bf934-d4e8-4885-9a2c-7a93cbdd56cb">Well you could expose  ..</a></div><div class="clear_left"></div>	</div>
	<div class="clear_left"></div>
	<h3>Keep an eye on</h3>
<ul class="links external">
	<li><a href="http://transloadit.com" title="Video encoding, image resizing and more for your web or mobile app">Transloadit</a></li><li><a href="http://tus.io" title="Resumable file uploading, upload progress bar, faster upload speed">tus - resumable file upload protocol</a></li><li><a href="http://kevin.vanzonneveld.net/">Kevin van Zonneveld</a></li><li><a href="http://www.littlehart.net/atthekeyboard/">Chris Hartjes</a></li><li><a href="http://mark-story.com">Mark Story</a></li><li><a href="http://www.webbosaurus.de">Webbosaurus</a></li></ul>
	<a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number' title='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'><img src='http://static.jsconf.us/promotejshs.png' height='150' width='180' alt='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'/></a>
</div>

						<div class="clear">&nbsp;</div>
		</div>

		<div id="footer">
			<div class="container_16">
				<ul id="footer_navigation">
					<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>				</ul>
				<p>&copy; 2008 - 2015, Debuggable Ltd. All rights reserved.
				<i>Designed by <a href="http://www.fluidcore.net" target="_blank">fluidCORE</a>.</i>
			</div>
		</div>
	</div>
	<script type="text/javascript" src="/js/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/5627ea2806458e56fb8a5f4b231a44c2.php"></script><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-3306079-3']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script');
ga.src = ('https:' == document.location.protocol ?
    'https://ssl' : 'http://www') +
    '.google-analytics.com/ga.js';
ga.setAttribute('async', 'true');
document.documentElement.firstChild.appendChild(ga);
})();
</script></body>
</html>
