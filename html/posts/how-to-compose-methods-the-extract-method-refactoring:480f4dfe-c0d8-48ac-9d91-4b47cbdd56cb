<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
	<title>How To Compose Methods: The Extract Method Refactoring &raquo; Debuggable - Node.js Consulting</title>

	<link href="http://feeds.feedburner.com/debuggable" type="application/rss+xml" rel="alternate" title="RSS 2.0" />	<link rel="pingback" href="Debuggable.com/pingback" />
	<link rel="stylesheet" type="text/css" href="/css/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/4026ee2275e22a4e5ec8aea13747c557.php" /></head>
	<body>
		<div class="container_16">
			<h1 id="logo-text"><a href="/">debuggable</a></h1>
			<ul id="navigation">
				<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>			</ul>
			<div class="clear">&nbsp;</div>

			<div id="blueprint">
				<a href="/contact" class="contact">Contact Us</a>			</div>

			<div class="clear">&nbsp;</div>
			<div class="grid_11 alpha" id="content">
	<cake:nocache>
			<div class="messages empty"></div>
	</cake:nocache>
	<div class="post">
	<h2><a href="/posts/how-to-compose-methods-the-extract-method-refactoring:480f4dfe-c0d8-48ac-9d91-4b47cbdd56cb">How To Compose Methods: The Extract Method Refactoring</a></h2>	<div class="posted-on">
		<p>Posted on 28/6/07 by 
		<a href="/tim">Tim Kosch√ºtzki</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/tim_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p><strong>When you have a code fragment that can be grouped together, turn the fragment into a method whose name explains the purpose of the method. Eliminate all conflicts with local variables as you go.</strong></p>
<h1>Motivation</h1>
<p>Extract Method is one of the refactorings that you will do most often. It just happens too often that as a deadline comes near people tend to take their programming not as seriously as they should. The result? Godclasses and god methods, that try to do too much. If you manage to break classes down into smaller classes and methods into smaller methods you will be better off for several reasons: your code will read like a series of comments; you give other methods a better chance to use your code; you will make your code a lot more testable. Oh and ou will feel a lot more comfortable about your code.</p>
<p>Finally, you will also make your code a lot easier accessible for fellow coders and improve your overall reputation within your company. The problem with short methods is the naming. You really have to pay attention to your naming. With many short methods you will end up with really long names that may be longer than the code in their body. That's perfect, though - don't worry about this. If your method names speak for themselves you are on your way to success.</p>
<p>"So, how long should a method be?" I hear you asking. To me, length is not an issue. They key is the closeness of the method name and the method body. If extracting improves clarity then do it. Even do it, when the new name of the method is longer than its new body.</p>
<h1>Mechanics</h1>
<ol>
<li>Create a new method and name it after the new intention of it (name it by what it does and not by how it does it).</li>
<li>Copy the code to extract into the new method.</li>
<li>Check the extracted code for any variables that are local in scope to the source method.</li>
<li>If any temporary variables are only used within your target method, make them local variables there.</li>
<li>Make the local-variable checks: See if <a href="http://php-coding-practices.com/refactoring/composing-methods/composing-methods-inline-temp/">Inline Temp</a> or <a href="http://php-coding-practices.com/refactoring/composing-methods/composing-methods-replace-temp-with-query/">Replace Temp With Query</a><br />
make sense. If one variable is modified, you can most often treat the extracted code as a query and assign the result to the variable concerned. If there are several such variables, don't extract the method and try to encapsulate the temporary variables first.</li>
<li>Pass local-scope variables from the source method as parameters into the target method.</li>
<li>Replace the extracted code in the source method with a call to the target method.</li>
<li>Test.</li>
</ol>
<h1>Examples</h1>
<h2>No Local variables</h2>
<p>In its simplest case, extract method can be done on the fly and is trivilially easy:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">function</span> printHeader <span class="br0">&#123;</span><br />
&nbsp; <span class="re0">$output</span> = &lt; &lt;&lt;HTML<br />
&lt;!DOCTYPE html <span class="kw2">PUBLIC</span> <span class="st0">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="st0">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;<br />
&lt;html xmlns=<span class="st0">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;<br />
&lt;head profile=<span class="st0">&quot;http://gmpg.org/xfn/11&quot;</span>&gt;<br />
<br />
&nbsp; &lt;title&gt; PHP Coding Practices - Become an expert PHP Programmer&lt;/title&gt;<br />
&nbsp; &lt;meta http-equiv=<span class="st0">&quot;Content-Type&quot;</span> content=<span class="st0">&quot;text/html; charset=UTF-8&quot;</span> /&gt;&nbsp;<br />
&nbsp; &lt;meta name=<span class="st0">&quot;generator&quot;</span> content=<span class="st0">&quot;WordPress 2.1.1&quot;</span> /&gt; &lt;!-- leave this <span class="kw1">for</span> stats please --&gt;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &lt;meta name=<span class="st0">&quot;verify-v1&quot;</span> content=<span class="st0">&quot;beuH5Tc0J6zi6YCVt6RnxwIeqR/Zq1WhRwgi7I5hNZo=&quot;</span> /&gt;<br />
&nbsp; &lt;meta name=<span class="st0">&quot;robots&quot;</span> content=<span class="st0">&quot;index,follow&quot;</span> /&gt;<br />
&lt;meta name=<span class="st0">&quot;language&quot;</span> content=<span class="st0">&quot;en&quot;</span> /&gt;<br />
&lt;meta name=<span class="st0">&quot;author&quot;</span> content=<span class="st0">&quot;Tim Koschuetzki&quot;</span> /&gt;<br />
<br />
&lt;link rel=<span class="st0">&quot;shortcut icon&quot;</span> href=<span class="st0">&quot;favicon.ico&quot;</span> type=<span class="st0">&quot;image/x-icon&quot;</span> /&gt;<br />
&lt;link rel=<span class="st0">&quot;stylesheet&quot;</span> href=<span class="st0">&quot;http://php-coding-practices.com/wp-content/themes/digg-3-col/style.css&quot;</span> type=<span class="st0">&quot;text/css&quot;</span> media=<span class="st0">&quot;screen&quot;</span> /&gt;<br />
&nbsp; &lt;link rel=<span class="st0">&quot;alternate&quot;</span> type=<span class="st0">&quot;application/rss+xml&quot;</span> title=<span class="st0">&quot;RSS 2.0&quot;</span> href=<span class="st0">&quot;http://php-coding-practices.com/feed/&quot;</span> /&gt;<br />
&nbsp; &lt;link rel=<span class="st0">&quot;alternate&quot;</span> type=<span class="st0">&quot;text/xml&quot;</span> title=<span class="st0">&quot;RSS .92&quot;</span> href=<span class="st0">&quot;http://php-coding-practices.com/feed/rss/&quot;</span> /&gt;<br />
&nbsp; &lt;link rel=<span class="st0">&quot;alternate&quot;</span> type=<span class="st0">&quot;application/atom+xml&quot;</span> title=<span class="st0">&quot;Atom 0.3&quot;</span> href=<span class="st0">&quot;http://php-coding-practices.com/feed/atom/&quot;</span> /&gt;<br />
&nbsp; &lt;link rel=<span class="st0">&quot;pingback&quot;</span> href=<span class="st0">&quot;http://php-coding-practices.com/xmlrpc.php&quot;</span> /&gt;<br />
<br />
&nbsp; &nbsp; &lt;link rel=<span class="st0">'archives'</span> title=<span class="st0">'June 2007'</span> href=<span class="st0">'http://php-coding-practices.com/2007/06/'</span> /&gt;<br />
&nbsp; &lt;link rel=<span class="st0">'archives'</span> title=<span class="st0">'May 2007'</span> href=<span class="st0">'http://php-coding-practices.com/2007/05/'</span> /&gt;<br />
&nbsp; &lt;link rel=<span class="st0">'archives'</span> title=<span class="st0">'April 2007'</span> href=<span class="st0">'http://php-coding-practices.com/2007/04/'</span> /&gt;<br />
<br />
&nbsp; &lt;link rel=<span class="st0">'archives'</span> title=<span class="st0">'March 2007'</span> href=<span class="st0">'http://php-coding-practices.com/2007/03/'</span> /&gt;<br />
&nbsp; &nbsp; <br />
&lt;!-- META Tags added by Add-Meta-Tags WordPress plugin. Get it at: http:<span class="co1">//www.g-loaded.eu/ --&gt;</span><br />
&lt;meta name=<span class="st0">&quot;description&quot;</span> content=<span class="st0">&quot;We provide easy-to-read, fun and practical articles about php best coding practices. Implement the tips given and you will become an expert php programmer.&quot;</span> /&gt;<br />
&lt;meta name=<span class="st0">&quot;keywords&quot;</span> content=<span class="st0">&quot;php coding practices, best practices, php webdevelopment, coding guidelines, coding standards, coding principles, security, test driven development, unit tests, coding practice principle secure&quot;</span> /&gt;<br />
HTML;<br />
&nbsp; <a href="http://www.php.net/echo"><span class="kw3">echo</span></a> <span class="re0">$output</span>;<br />
<span class="br0">&#125;</span></div>
<p>This function prints the header of http://php-coding-practices.com. We could as easily define it as:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">function</span> printHeader <span class="br0">&#123;</span><br />
&nbsp; <span class="re0">$output</span> = buildDoctype<span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
&nbsp; <span class="re0">$output</span> .= buildTitle<span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
&nbsp; <span class="re0">$output</span> .= buildRelations<span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
&nbsp; <span class="re0">$output</span> .= buildMetaTags<span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
&nbsp; <br />
&nbsp; <a href="http://www.php.net/echo"><span class="kw3">echo</span></a> <span class="re0">$output</span>;<br />
<span class="br0">&#125;</span><br />
<br />
<span class="kw2">function</span> buildDoctype<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="re0">$output</span> = &lt; &lt;&lt;HTML<br />
&nbsp; &nbsp; &lt;!DOCTYPE html <span class="kw2">PUBLIC</span> <span class="st0">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="st0">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;<br />
&nbsp; &nbsp; &lt;html xmlns=<span class="st0">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;<br />
&nbsp; &nbsp; &lt;head profile=<span class="st0">&quot;http://gmpg.org/xfn/11&quot;</span>&gt;<br />
HTML;<br />
&nbsp; <span class="kw1">return</span> <span class="re0">$output</span>;<br />
<span class="br0">&#125;</span><br />
<br />
<span class="kw2">function</span> buildTitle<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="re0">$output</span> = &lt; &lt;&lt;HTML<br />
<span class="re1">&nbsp; &nbsp; &lt;title&gt; PHP Coding Practices - Become an expert PHP Programmer</span><br />
HTML;<br />
&nbsp; <span class="kw1">return</span> <span class="re0">$output</span>;<br />
<span class="br0">&#125;</span><br />
<br />
<span class="kw2">function</span> buildRelations<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="re0">$output</span> = &lt; &lt;&lt;HTML<br />
&nbsp; &nbsp; &lt;link rel=<span class="st0">&quot;shortcut icon&quot;</span> href=<span class="st0">&quot;favicon.ico&quot;</span> type=<span class="st0">&quot;image/x-icon&quot;</span> /&gt;<br />
&nbsp; &nbsp; &lt;link rel=<span class="st0">&quot;stylesheet&quot;</span> href=<span class="st0">&quot;http://php-coding-practices.com/wp-content/themes/digg-3-col/style.css&quot;</span> type=<span class="st0">&quot;text/css&quot;</span> media=<span class="st0">&quot;screen&quot;</span> /&gt;<br />
&nbsp; &nbsp; &lt;link rel=<span class="st0">&quot;alternate&quot;</span> type=<span class="st0">&quot;application/rss+xml&quot;</span> title=<span class="st0">&quot;RSS 2.0&quot;</span> href=<span class="st0">&quot;http://php-coding-practices.com/feed/&quot;</span> /&gt;<br />
&nbsp; &nbsp; &lt;link rel=<span class="st0">&quot;alternate&quot;</span> type=<span class="st0">&quot;text/xml&quot;</span> title=<span class="st0">&quot;RSS .92&quot;</span> href=<span class="st0">&quot;http://php-coding-practices.com/feed/rss/&quot;</span> /&gt;<br />
&nbsp; &nbsp; &lt;link rel=<span class="st0">&quot;alternate&quot;</span> type=<span class="st0">&quot;application/atom+xml&quot;</span> title=<span class="st0">&quot;Atom 0.3&quot;</span> href=<span class="st0">&quot;http://php-coding-practices.com/feed/atom/&quot;</span> /&gt;<br />
&nbsp; &nbsp; &lt;link rel=<span class="st0">&quot;pingback&quot;</span> href=<span class="st0">&quot;http://php-coding-practices.com/xmlrpc.php&quot;</span> /&gt;<br />
&nbsp; <br />
&nbsp; &nbsp; &nbsp; &lt;link rel=<span class="st0">'archives'</span> title=<span class="st0">'June 2007'</span> href=<span class="st0">'http://php-coding-practices.com/2007/06/'</span> /&gt;<br />
&nbsp; &nbsp; &lt;link rel=<span class="st0">'archives'</span> title=<span class="st0">'May 2007'</span> href=<span class="st0">'http://php-coding-practices.com/2007/05/'</span> /&gt;<br />
&nbsp; &nbsp; &lt;link rel=<span class="st0">'archives'</span> title=<span class="st0">'April 2007'</span> href=<span class="st0">'http://php-coding-practices.com/2007/04/'</span> /&gt;<br />
&nbsp; <br />
&nbsp; &nbsp; &lt;link rel=<span class="st0">'archives'</span> title=<span class="st0">'March 2007'</span> href=<span class="st0">'http://php-coding-practices.com/2007/03/'</span> /&gt;<br />
&nbsp; <br />
HTML;<br />
&nbsp; <span class="kw1">return</span> <span class="re0">$output</span>;<br />
<span class="br0">&#125;</span><br />
<br />
<span class="kw2">function</span> buildMetaTags<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="re0">$output</span> = &lt; &lt;&lt;HTML<br />
&nbsp; &nbsp; &lt;meta http-equiv=<span class="st0">&quot;Content-Type&quot;</span> content=<span class="st0">&quot;text/html; charset=UTF-8&quot;</span> /&gt;&nbsp;<br />
&nbsp; &nbsp; &lt;meta name=<span class="st0">&quot;generator&quot;</span> content=<span class="st0">&quot;WordPress 2.1.1&quot;</span> /&gt; &lt;!-- leave this <span class="kw1">for</span> stats please --&gt;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;meta name=<span class="st0">&quot;verify-v1&quot;</span> content=<span class="st0">&quot;beuH5Tc0J6zi6YCVt6RnxwIeqR/Zq1WhRwgi7I5hNZo=&quot;</span> /&gt;<br />
&nbsp; &nbsp; &lt;meta name=<span class="st0">&quot;robots&quot;</span> content=<span class="st0">&quot;index,follow&quot;</span> /&gt;<br />
&nbsp; &nbsp; &lt;meta name=<span class="st0">&quot;language&quot;</span> content=<span class="st0">&quot;en&quot;</span> /&gt;<br />
&nbsp; &nbsp; &lt;meta name=<span class="st0">&quot;author&quot;</span> content=<span class="st0">&quot;Tim Koschuetzki&quot;</span> /&gt;<br />
&nbsp; &nbsp; &lt;meta name=<span class="st0">&quot;description&quot;</span> content=<span class="st0">&quot;We provide easy-to-read, fun and practical articles about php best coding practices. Implement the tips given and you will become an expert php programmer.&quot;</span> /&gt;<br />
&nbsp; &nbsp; &lt;meta name=<span class="st0">&quot;keywords&quot;</span> content=<span class="st0">&quot;php coding practices, best practices, php webdevelopment, coding guidelines, coding standards, coding principles, security, test driven development, unit tests, coding practice principle secure&quot;</span> /&gt;<br />
HTML;<br />
&nbsp; <span class="kw1">return</span> <span class="re0">$output</span>;<br />
<span class="br0">&#125;</span></div>
<p>Looks much cleaner already, no? Now if we wanted to use variables to build the site title or to load a css file based on user input, then that would be a lot easier than before.</p>
<h2>Using Local Variables</h2>
<p>The problem with local variables are parameters passed into the original method and temporaries built in the original method. Local variables are only in scope within the source method and they sometimes cause problems or prevent you from doing the refactoring altogether.</p>
<p>The easiest case is when the locals are only read, but not changed. In this case you can just pass them in as parameters:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">function</span> printSumOfAnyOtherArrayValue<span class="br0">&#40;</span><span class="re0">$array</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="re0">$result</span> = <span class="nu0">0</span>;<br />
&nbsp; <span class="re0">$i</span> = <span class="nu0">0</span>;<br />
&nbsp; <span class="kw1">foreach</span><span class="br0">&#40;</span><span class="re0">$array</span> <span class="kw1">as</span> <span class="re0">$value</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="re0">$i</span>++;<br />
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="re0">$i</span> % <span class="nu0">2</span> == <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="re0">$result</span> += <span class="re0">$value</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; <span class="br0">&#125;</span><br />
&nbsp; <br />
&nbsp; <a href="http://www.php.net/echo"><span class="kw3">echo</span></a> <span class="st0">&quot;Some HTML Formatting for the result: {$result}&quot;</span>; <span class="co1">// $result is the local in this case</span><br />
<span class="br0">&#125;</span></div>
<p>I can extract the printing of the result into its own method:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">function</span> printSumOfAnyOtherArrayValue<span class="br0">&#40;</span><span class="re0">$array</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="re0">$result</span> = <span class="nu0">0</span>;<br />
&nbsp; <span class="re0">$i</span> = <span class="nu0">0</span>;<br />
&nbsp; <span class="kw1">foreach</span><span class="br0">&#40;</span><span class="re0">$array</span> <span class="kw1">as</span> <span class="re0">$value</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="re0">$i</span>++;<br />
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="re0">$i</span> % <span class="nu0">2</span> == <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="re0">$result</span> += <span class="re0">$value</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; <span class="br0">&#125;</span><br />
&nbsp; <br />
&nbsp; printResult<span class="br0">&#40;</span><span class="re0">$result</span><span class="br0">&#41;</span>;<br />
<span class="br0">&#125;</span><br />
<br />
<span class="kw2">function</span> printResult<span class="br0">&#40;</span><span class="re0">$result</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <a href="http://www.php.net/echo"><span class="kw3">echo</span></a> <span class="st0">&quot;Some HTML Formatting for the result: {$result}&quot;</span>;<br />
<span class="br0">&#125;</span></div>
<h2>Reassigning A Local Variables</h2>
<p>It's the assignment to locale variables that becomes complicated. If you see an assignment to a parameter you should immediately remove it.</p>
<p>For temps that are assigned to, there are two cases. The simpler cases is that in which the variable is a temp used only in the extracted code. In this case you can remove it into the extracted code.</p>
<p>If the variable is not used after the code is extracted, you can make the change in just the extracted code. If it is used afterward, you need to make the extracted code return the changed value of the variable. Check the following code that illustrates this:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">function</span> printSumOfAnyOtherArrayValue<span class="br0">&#40;</span><span class="re0">$array</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="re0">$result</span> = <span class="nu0">0</span>;<br />
&nbsp; <span class="re0">$i</span> = <span class="nu0">0</span>;<br />
&nbsp; <span class="kw1">foreach</span><span class="br0">&#40;</span><span class="re0">$array</span> <span class="kw1">as</span> <span class="re0">$value</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="re0">$i</span>++;<br />
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="re0">$i</span> % <span class="nu0">2</span> == <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="re0">$result</span> += <span class="re0">$value</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; <span class="br0">&#125;</span><br />
&nbsp; <br />
&nbsp; printResult<span class="br0">&#40;</span><span class="re0">$result</span><span class="br0">&#41;</span>;<br />
<span class="br0">&#125;</span><br />
<br />
<span class="kw2">function</span> printResult<span class="br0">&#40;</span><span class="re0">$result</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <a href="http://www.php.net/echo"><span class="kw3">echo</span></a> <span class="st0">&quot;Some HTML Formatting for the result: {$result}&quot;</span>;<br />
<span class="br0">&#125;</span></div>
<p>Now I extract the calculation:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">function</span> printSumOfAnyOtherArrayValue<span class="br0">&#40;</span><span class="re0">$array</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="re0">$result</span> = calculateSumOfAnyOtherArrayValue<span class="br0">&#40;</span><span class="re0">$array</span><span class="br0">&#41;</span>;<br />
&nbsp; printResult<span class="br0">&#40;</span><span class="re0">$result</span><span class="br0">&#41;</span>;<br />
<span class="br0">&#125;</span><br />
<span class="kw2">function</span> calculateSumOfAnyOtherArrayValue<span class="br0">&#40;</span><span class="re0">$array</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="re0">$result</span> = <span class="nu0">0</span>;<br />
&nbsp; <span class="re0">$i</span> = <span class="nu0">0</span>;<br />
&nbsp; <span class="kw1">foreach</span><span class="br0">&#40;</span><span class="re0">$array</span> <span class="kw1">as</span> <span class="re0">$value</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="re0">$i</span>++;<br />
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="re0">$i</span> % <span class="nu0">2</span> == <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="re0">$result</span> += <span class="re0">$value</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; <span class="br0">&#125;</span><br />
&nbsp; <span class="kw1">return</span> <span class="re0">$result</span>;<br />
<span class="br0">&#125;</span><br />
&nbsp; <br />
<span class="kw2">function</span> printResult<span class="br0">&#40;</span><span class="re0">$result</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <a href="http://www.php.net/echo"><span class="kw3">echo</span></a> <span class="st0">&quot;Some HTML Formatting for the result: {$result}&quot;</span>;<br />
<span class="br0">&#125;</span></div>
<p>The $result variable is used in both places - so I need to return it from calculateSumOfAnyOtherArrayValue(). Now we can rewrite our printSumOfAnyOtherArrayValue() method to:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">function</span> printSumOfAnyOtherArrayValue<span class="br0">&#40;</span><span class="re0">$array</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; printResult<span class="br0">&#40;</span>calculateSumOfAnyOtherArrayValue<span class="br0">&#40;</span><span class="re0">$array</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
<span class="br0">&#125;</span></div>
<p>If something more involved should happen to the $result variable, like an initial value depending on some class attribute, we would pass it to calculateSumOfAnyOtherArrayValue() as  a parameter:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">function</span> printSumOfAnyOtherArrayValue<span class="br0">&#40;</span><span class="re0">$array</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="re0">$result</span> = <span class="re0">$this</span>-&gt;<span class="me1">start</span>;<br />
&nbsp; <span class="re0">$result</span> = calculateSumOfAnyOtherArrayValue<span class="br0">&#40;</span><span class="re0">$array</span>,<span class="re0">$result</span><span class="br0">&#41;</span>;<br />
&nbsp; printResult<span class="br0">&#40;</span><span class="re0">$result</span><span class="br0">&#41;</span>;<br />
<span class="br0">&#125;</span><br />
<span class="kw2">function</span> calculateSumOfAnyOtherArrayValue<span class="br0">&#40;</span><span class="re0">$array</span>, <span class="re0">$initialValue</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="re0">$result</span> = <span class="re0">$initialValue</span>;<br />
&nbsp; <span class="re0">$i</span> = <span class="nu0">0</span>;<br />
&nbsp; <span class="kw1">foreach</span><span class="br0">&#40;</span><span class="re0">$array</span> <span class="kw1">as</span> <span class="re0">$value</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="re0">$i</span>++;<br />
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="re0">$i</span> % <span class="nu0">2</span> == <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="re0">$result</span> += <span class="re0">$value</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; <span class="br0">&#125;</span><br />
&nbsp; <span class="kw1">return</span> <span class="re0">$result</span>;<br />
<span class="br0">&#125;</span></div>
<p>After some testing, we can refactor this and make it even better:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">function</span> printSumOfAnyOtherArrayValue<span class="br0">&#40;</span><span class="re0">$array</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="re0">$result</span> = calculateSumOfAnyOtherArrayValue<span class="br0">&#40;</span><span class="re0">$array</span>,<span class="re0">$this</span>-&gt;<span class="me1">start</span><span class="br0">&#41;</span>;<br />
&nbsp; printResult<span class="br0">&#40;</span><span class="re0">$result</span><span class="br0">&#41;</span>;<br />
<span class="br0">&#125;</span></div>
<p>Now this looks neat no? Now the calculation of the actual value can be very easily changed. We could just call another calculation method, or strategy, if you want to speak in terms of <a href="http://php-coding-practices.com/category/design-patterns/">Design Patterns</a>.</p>
<h1>What Happens When More Than One Variable Needs To Be Returned?</h1>
<p>Here you have several options. The way I prefer is to have a method for each return value. Usually you can arrange things for that and you will be fine. However, if you somehow can't do it and things look awkward, return an array of return values instead and live with it. Document it as some *nasty* stuff, though, and refactor it again with the next opportunity.<br />
</head></html></head></html><br />
<img style="display: none;" src="http://debuggable.com/posts/tick/480f4dfe-c0d8-48ac-9d91-4b47cbdd56cb"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fhow-to-compose-methods-the-extract-method-refactoring%3A480f4dfe-c0d8-48ac-9d91-4b47cbdd56cb &amp;title=How+To+Compose+Methods%3A+The+Extract+Method+Refactoring';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fhow-to-compose-methods-the-extract-method-refactoring%3A480f4dfe-c0d8-48ac-9d91-4b47cbdd56cb';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fhow-to-compose-methods-the-extract-method-refactoring%3A480f4dfe-c0d8-48ac-9d91-4b47cbdd56cb&amp;title=How+To+Compose+Methods%3A+The+Extract+Method+Refactoring&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fhow-to-compose-methods-the-extract-method-refactoring%3A480f4dfe-c0d8-48ac-9d91-4b47cbdd56cb&amp;title=How+To+Compose+Methods%3A+The+Extract+Method+Refactoring';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>
	<div class="related-posts">
		<h3>(Theoretically) Related Posts</h3>
				<ul class="first">
							<li><a href="/posts/composing-methods-inline-temp:480f4dfe-73c0-49ec-ad00-4ec6cbdd56cb">Composing Methods: Inline Temp</a></li>
							<li><a href="/posts/composing-methods-split-temporary-variable:480f4dfe-1e28-4e32-b4b3-458ccbdd56cb">Composing Methods: Split Temporary Variable</a></li>
							<li><a href="/posts/how-to-execute-only-specific-test-methods-in-cakephp-unit-tests:4858fa7b-7194-4652-9c7f-47784834cda3">How To Execute Only Specific Test Methods in CakePHP Unit Tests</a></li>
							<li><a href="/posts/composing-methods-substitute-algorithmn:480f4dfe-30e4-407a-97bf-468dcbdd56cb">Composing Methods: Substitute Algorithmn</a></li>
							<li><a href="/posts/principles-in-refactoring:480f4dfe-7c6c-4591-8560-4c1ecbdd56cb">Principles in Refactoring</a></li>
					</ul>
		<ul>
							<li><a href="/posts/composing-methods-replace-temp-with-query:480f4dfe-bd20-435d-8a18-4495cbdd56cb">Composing Methods: Replace Temp With Query</a></li>
							<li><a href="/posts/composing-methods-remove-assignments-to-parameters:480f4dfe-5bd4-4ef7-8c05-4b5ecbdd56cb">Composing Methods: Remove Assignments to Parameters</a></li>
							<li><a href="/posts/composing-methods-introduce-explaining-variable:480f4dfe-23f4-4fa4-b586-413fcbdd56cb">Composing Methods: Introduce Explaining Variable</a></li>
							<li><a href="/posts/refactoring-a-first-example:480f4dfe-c26c-4b1b-8649-4b5ccbdd56cb">Refactoring - A first example</a></li>
					</ul>
	</div>
	<div class="clear">&nsbp;</div>

			<p>You can <a href="#comment_form">skip to the end</a> and add a comment.</p>
	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/how-to-compose-methods-the-extract-method-refactoring:480f4dfe-c0d8-48ac-9d91-4b47cbdd56cb">4 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/how-to-compose-methods-the-extract-method-refactoring:480f4dfe-c0d8-48ac-9d91-4b47cbdd56cb#CommentAddForm">Add Comment</a>	</div>
	<div class="post_comments">
	<div class="clear"></div>
									<div id="comment-480f4e01-76c0-49c4-8df9-4317cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://php-coding-practices.com/refactoring/composing-methods/composing-methods-introduce-explaining-variable/" rel="nofollow">Composing Methods: Introduce Explaining Variable | PHP Coding Pr</a>						</strong>
						<strong>said 
						on Jul 02, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>[...] you ask me you should prefer Extract Method if you can, because more smaller methods are usually more readable and (re-)usable. However, there [...]</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4e02-34dc-47f7-bb63-41cbcbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://php-coding-practices.com/refactoring/composing-methods/composing-methods-remove-assignments-to-parameters/" rel="nofollow">Composing Methods: Remove Assignments to Parameters | PHP Coding</a>						</strong>
						<strong>said 
						on Jul 06, 2007:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>[...] If you are on PHP5 or PHP4 (using the by-reference operator), look in the calling method to see if the parameter is used again afterward and try to understand what is changed where in your code and document that. Make sure you only return one value from the method. If more than one call-by-reference parameter is assigned to and returned, try to use a data clump or Extract Method. [...]</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-49a3f2b7-3844-4a3b-8c21-771b4834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=b94f048f22e3c3adaca93ba27bd33a1b&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.winner-realestate.com/en/listing.php" rel="nofollow">Winer Real</a>						</strong>
						<strong>said 
						on Feb 24, 2009:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>I have lot of trouble forcing cote to move from php4 to php5 is hard to find this simple solution thanks.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-49a4e727-e340-4338-9d4f-1fc24834cda3" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=f0b8fa14cbee5edfdeeac6b8f9ad062d&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://sanisoft.com/blog/" rel="nofollow">Tarique Sani</a>						</strong>
						<strong>said 
						on Feb 25, 2009:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Tim this is one of your best writings in recent past /me applauds</p>
				</div>
				<div class="clear"></div>
							</div>
	  	
				<div class="divider"></div>
		<a name="comment_form"></a>
		<p>This post is too old. We do not allow comments here anymore in order to fight spam. If you have real feedback or questions for the post, please <a href="/contact">contact us</a>.</p>
	</div></div>
	
</div>
<div class="grid_4 prefix_1 omega" id="sidebar">
	<cake:nocache>
			</cake:nocache>

	<h3>RSS Feeds</h3>
	<div id="bug">
		<img src="/img/rss_bug.png" alt="" />	</div>
	<div class="rss">
		<p class="bug-message"></p>
		<a href="http://feeds.feedburner.com/debuggable">Blog RSS</a><br/>
		<a href="http://feeds.feedburner.com/debuggable-comments">Comments RSS</a><br/><br/>
		<img width="88" height="26" alt="" style="border: 0pt none ;" src="http://feeds.feedburner.com/~fc/debuggable?bg=FF9933&amp;fg=444444&amp;anim=0"/>
		<div class="clear"></div>
	</div>

	<h3>Recent Posts</h3>
	<ul>
<li class=""><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb">Releasing node-mysql 2.0.0-alpha</a></li><li class=""><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb">How to write jQuery plugins</a></li><li class=""><a href="/posts/vim-workshop-in-berlin-april-20:4f702b83-ce24-429c-9403-0e39cbdd56cb">Vim Workshop in Berlin (April 20)</a></li><li class=""><a href="/posts/npm-an-intervention:4f44dd25-a114-4361-ada1-6cefcbdd56cb">NPM - An intervention</a></li><li class="active"><a href="/posts/testing-node-js-modules-with-travis-ci:4ec62298-aec4-4ee3-8b5a-2c96cbdd56cb">Testing node.js modules with Travis CI</a></li><li class=""><a href="/posts/private-npm-modules:4e68cc7d-1ac4-42d9-995a-343dcbdd56cb">Private npm modules</a></li></ul>
	<h3>Archive</h3>
	<p class="small align">
		<strong>443 Posts</strong>, <strong>4608 Comments</strong><br /><br />
		We are on air since 2006. Take a tour through the
		<a href="/posts/archive">blog archive</a>.
	</p>
	<div class="search">
	<form id="PostSearchForm" method="post" action="/posts/search"><fieldset style="display:none;"><input type="hidden" name="_method" value="POST" /></fieldset><input name="data[Post][keywords]" type="text" value="" id="PostKeywords" /><input type="submit" class="button" value="Search" /></form>	<div class="clear"></div>
</div>
	<h3>Recent Comments</h3>
	<div class="recent-comments">
		<div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd32b85-220c-4fc8-84b2-378fcbdd56cb">William: thanks, fixed ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=b47010beec892f11619d1e81f0c94f11&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd30119-06fc-4712-aecd-7fa5cbdd56cb">Hi Felix,

The Upgra ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=99b59e8a9cfe2c5575f0fa90f7f30307&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f99a4a2-9ad8-4476-b208-611acbdd56cb">Maybe you can write so ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=8364689a1eefb5eceb6a4f38bbf95731&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f9651b9-eb88-4096-94c1-0fc2cbdd56cb">This is very nice plug ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=7e3d69d16d3b845e89198512355b2ac9&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f8bb75a-96cc-4197-8e93-7c63cbdd56cb">Nice article!

Somet ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f83326b-8c28-43fc-b70d-097ecbdd56cb">That&#039;s fine ognian, th ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=994516a664c2bdc728d18c47e935bc14&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f832a25-5818-4d38-9e39-097ecbdd56cb">Really nice work! I wa ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c15ca-c7c4-48e3-a4db-27decbdd56cb">@J√∂rn: Sorry, thought  ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d5d83832be2b6c70d1968635f68a1b4a&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c11aa-6f9c-448c-abdb-2066cbdd56cb">Thanks didn&#039;t quite un ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7bf934-d4e8-4885-9a2c-7a93cbdd56cb">Well you could expose  ..</a></div><div class="clear_left"></div>	</div>
	<div class="clear_left"></div>
	<h3>Keep an eye on</h3>
<ul class="links external">
	<li><a href="http://transloadit.com" title="Video encoding, image resizing and more for your web or mobile app">Transloadit</a></li><li><a href="http://tus.io" title="Resumable file uploading, upload progress bar, faster upload speed">tus - resumable file upload protocol</a></li><li><a href="http://kevin.vanzonneveld.net/">Kevin van Zonneveld</a></li><li><a href="http://www.littlehart.net/atthekeyboard/">Chris Hartjes</a></li><li><a href="http://mark-story.com">Mark Story</a></li><li><a href="http://www.webbosaurus.de">Webbosaurus</a></li></ul>
	<a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number' title='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'><img src='http://static.jsconf.us/promotejshs.png' height='150' width='180' alt='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'/></a>
</div>

						<div class="clear">&nbsp;</div>
		</div>

		<div id="footer">
			<div class="container_16">
				<ul id="footer_navigation">
					<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>				</ul>
				<p>&copy; 2008 - 2015, Debuggable Ltd. All rights reserved.
				<i>Designed by <a href="http://www.fluidcore.net" target="_blank">fluidCORE</a>.</i>
			</div>
		</div>
	</div>
	<script type="text/javascript" src="/js/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/5627ea2806458e56fb8a5f4b231a44c2.php"></script><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-3306079-3']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script');
ga.src = ('https:' == document.location.protocol ?
    'https://ssl' : 'http://www') +
    '.google-analytics.com/ga.js';
ga.setAttribute('async', 'true');
document.documentElement.firstChild.appendChild(ga);
})();
</script></body>
</html>
