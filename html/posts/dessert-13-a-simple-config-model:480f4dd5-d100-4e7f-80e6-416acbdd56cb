<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
	<title>Dessert #13 - A simple Config Model &raquo; Debuggable - Node.js Consulting</title>

	<link href="http://feeds.feedburner.com/debuggable" type="application/rss+xml" rel="alternate" title="RSS 2.0" />	<link rel="pingback" href="Debuggable.com/pingback" />
	<link rel="stylesheet" type="text/css" href="/css/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/4026ee2275e22a4e5ec8aea13747c557.php" /></head>
	<body>
		<div class="container_16">
			<h1 id="logo-text"><a href="/">debuggable</a></h1>
			<ul id="navigation">
				<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>			</ul>
			<div class="clear">&nbsp;</div>

			<div id="blueprint">
				<a href="/contact" class="contact">Contact Us</a>			</div>

			<div class="clear">&nbsp;</div>
			<div class="grid_11 alpha" id="content">
	<cake:nocache>
			<div class="messages empty"></div>
	</cake:nocache>
	<div class="post">
	<h2><a href="/posts/dessert-13-a-simple-config-model:480f4dd5-d100-4e7f-80e6-416acbdd56cb">Dessert #13 - A simple Config Model</a></h2>	<div class="posted-on">
		<p>Posted on 20/9/06 by 
		<a href="/felix">Felix Geisendörfer</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/felix_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p>A lot of you probably like the idea of storing some of your applications configuration in a database since this way you can easily tweak things at run time versus having to edit configuration files on the server.</p>
<p>For me I found it pretty useful to just have a simple table called configs which contains two fields: "name" and "value". "name" is the primary key and it's type is varchar(255). The "value" fields type is text. After setting this up, I created a simple Model called Config and added two convenient little function named get & store to it which I can call from my controllers.</p>
<p>The code for the Config Model is this:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">class</span> Config <span class="kw2">extends</span> AppModel <br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="kw2">var</span> <span class="re0">$name</span> = <span class="st0">'Config'</span>; &nbsp; &nbsp;<br />
&nbsp; &nbsp; <span class="kw2">var</span> <span class="re0">$primaryKey</span> = <span class="st0">'name'</span>;<br />
&nbsp; &nbsp; <span class="kw2">var</span> <span class="re0">$validate</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'name'</span> =&gt; VALID_NOT_EMPTY<span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; <span class="kw2">function</span> get<span class="br0">&#40;</span><span class="re0">$name</span>, <span class="re0">$default</span> = <span class="kw2">null</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$config</span> = <span class="re0">$this</span>-&gt;<span class="me1">findByName</span><span class="br0">&#40;</span><span class="re0">$name</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><a href="http://www.php.net/isset"><span class="kw3">isset</span></a><span class="br0">&#40;</span><span class="re0">$config</span><span class="br0">&#91;</span><span class="st0">'Config'</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="st0">'value'</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="re0">$config</span><span class="br0">&#91;</span><span class="st0">'Config'</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="st0">'value'</span><span class="br0">&#93;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="re0">$default</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; <span class="kw2">function</span> store<span class="br0">&#40;</span><span class="re0">$name</span>, <span class="re0">$value</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">save</span><span class="br0">&#40;</span><a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'name'</span> =&gt; <span class="re0">$name</span>, <span class="st0">'value'</span> =&gt; <span class="re0">$value</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
<span class="br0">&#125;</span></div>
<p>And usage is as simple as this:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">class</span> AppController <span class="kw2">extends</span> Controller <br />
<span class="br0">&#123;</span> &nbsp; &nbsp;<br />
&nbsp; &nbsp; <span class="kw2">var</span> <span class="re0">$uses</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'Config'</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; <span class="kw2">function</span> beforeFilter<span class="br0">&#40;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$this</span>-&gt;<span class="me1">theme</span> = <span class="re0">$this</span>-&gt;<span class="me1">Config</span>-&gt;<span class="me1">get</span><span class="br0">&#40;</span><span class="st0">'theme'</span>, <span class="st0">'summer'</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
<span class="br0">&#125;</span></div>
<p>So in the example above the beforeFilter tries to get the value of 'theme' out of the configs table and in case that fails (theme isn't set), it will return 'summer' as default value.</p>
<p>--Felix Geisendörfer aka the_undefined<br />
<img style="display: none;" src="http://debuggable.com/posts/tick/480f4dd5-d100-4e7f-80e6-416acbdd56cb"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fdessert-13-a-simple-config-model%3A480f4dd5-d100-4e7f-80e6-416acbdd56cb &amp;title=Dessert+%2313+-+A+simple+Config+Model';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fdessert-13-a-simple-config-model%3A480f4dd5-d100-4e7f-80e6-416acbdd56cb';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fdessert-13-a-simple-config-model%3A480f4dd5-d100-4e7f-80e6-416acbdd56cb&amp;title=Dessert+%2313+-+A+simple+Config+Model&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fdessert-13-a-simple-config-model%3A480f4dd5-d100-4e7f-80e6-416acbdd56cb&amp;title=Dessert+%2313+-+A+simple+Config+Model';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>
	<div class="related-posts">
		<h3>(Theoretically) Related Posts</h3>
				<ul class="first">
							<li><a href="/posts/modelsave-now-returns-an-array:480f4dd6-0a7c-4026-ad5a-49c8cbdd56cb">Model::save() now returns an array!</a></li>
							<li><a href="/posts/update-to-the-rss-feed-parser-model:480f4dd5-0988-4bc8-98a8-455ecbdd56cb">Update to the RSS feed parser Model</a></li>
							<li><a href="/posts/dessert-12-debugging-requestaction:480f4dd5-bca4-4e86-820c-4f4dcbdd56cb">Dessert #12 - Debugging requestAction</a></li>
							<li><a href="/posts/remember-the-days-before-spam-a-cakephp-model-for-akismet:480f4dd5-d358-4f51-ac83-45f1cbdd56cb">Remember the days before spam? A CakePHP Model for Akismet  </a></li>
							<li><a href="/posts/dessert-8-render-custom-errors:480f4dd5-6fcc-4a19-8da5-46c2cbdd56cb">Dessert #8 - Render custom errors</a></li>
					</ul>
		<ul>
							<li><a href="/posts/dessert-9-graceful-error-handling:480f4dd5-7294-4510-b014-47e5cbdd56cb">Dessert #9 - Graceful Error Handling</a></li>
							<li><a href="/posts/update-on-cakephp-google-analytics-apimodel:480f4dd5-7044-47bc-945a-4d90cbdd56cb">Update on CakePHP Google Analytics API/Model</a></li>
							<li><a href="/posts/dessert-1-the-7-crucials-of-crud:480f4dd5-cbcc-479c-a754-48d0cbdd56cb">Dessert #1 - The 7 crucials of CRUD</a></li>
							<li><a href="/posts/how-to-properly-create-a-model-instance-manually:480f4dd6-4424-4c89-9564-4647cbdd56cb">How to properly create a Model instance manually</a></li>
							<li><a href="/posts/dessert-3-generate-a-random-password:480f4dd5-f280-4051-b815-452dcbdd56cb">Dessert #3 - Generate a random password</a></li>
					</ul>
	</div>
	<div class="clear">&nsbp;</div>

			<p>You can <a href="#comment_form">skip to the end</a> and add a comment.</p>
	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/dessert-13-a-simple-config-model:480f4dd5-d100-4e7f-80e6-416acbdd56cb">12 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/dessert-13-a-simple-config-model:480f4dd5-d100-4e7f-80e6-416acbdd56cb#CommentAddForm">Add Comment</a>	</div>
	<div class="post_comments">
	<div class="clear"></div>
									<div id="comment-480f4ddd-3bec-49f1-a625-429fcbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=cb57e13b63e8130e9efc693bc0d1c4ca&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://cakephp.org/" rel="nofollow">Nate</a>						</strong>
						<strong>said 
						on Sep 20, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>What about a way to enforce unique key names?  It looks like your store() method would just create mutliple records of the same name.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4ddd-f79c-44bb-a131-425ecbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/felix" rel="nofollow">Felix Geisendörfer</a>						</strong>
						<strong>said 
						on Sep 20, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>My database table doesn't have an id field, it's just name+value and name is the primary key. So since I told CakePHP about this setup by using $primaryKey, it will automatically either use INSERT if the config value hasn't been set before, or update if it already exists. Didn't have any problems with it so far.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4ddb-a984-4562-88a6-49a1cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=9e4fda9e9d351d5387ba6bf78e8a3237&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://jamesc.id.au" rel="nofollow">James</a>						</strong>
						<strong>said 
						on Sep 21, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Nice idea, however, I would assume that each get() would generate a separate query?</p>
<p>In my apps, I quite often need more than one config value in a page. What about the idea of setting it up with a function that gets all the configs from the database and storing them in the class. The get() function could then check to see if the value has already been read from the database, and if not, it will fetch it.</p>
<p>Although the initial select query could take a bit of time, it would mean only one query, regardless of how many config variables required.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4ddd-b90c-4113-8894-448fcbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/felix" rel="nofollow">Felix Geisendörfer</a>						</strong>
						<strong>said 
						on Sep 21, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>James: Yes, every get() generates one query. The application I work on right now has less then 10 config values, so no need to optimize here. If you plan to use this in a bigger application you might want to get the entire configs table upfront and cache it as you said.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4ddd-1e10-4499-be8b-4209cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=9e4fda9e9d351d5387ba6bf78e8a3237&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://jamesc.id.au" rel="nofollow">James</a>						</strong>
						<strong>said 
						on Sep 21, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>So you think doing multiple select queries is better (performance wise) than doing one intial select query for all 10 rows? I would have thought that provided you require more than 1 config value, it would be quicker to just select all rows in the config table and store them in an array?</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4ddd-253c-4f55-8812-483acbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/felix" rel="nofollow">Felix Geisendörfer</a>						</strong>
						<strong>said 
						on Sep 21, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Oh yes, performance is incredibly faster this way. Not the performance of the application, but the performance of myself getting the job done that is; ). I mean come on, how much traffic is the site you are working on right now going to get? If it's not in Alexa's top #50,000 there is almost not going to be any reason for optimzing things like that. We don't live in the days where code performance is the #1 criticial factor you should care about. CPU cycles are cheap these days, and unless you have a really good reason for doing so, you should never put performance concerns over simplicity & maintainability of your code. That's my oppinion.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4ddd-ee74-42b6-9b74-428bcbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=602221e0c40c93cfe5c1925a89f2d291&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://miphp.net/" rel="nofollow">Bret Kuhns</a>						</strong>
						<strong>said 
						on Sep 21, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>I've got to agree with Felix on that point, James. If you're concerned about the performance difference between one honkin' query versus multiple tiny queries, then have you ever considered the performance loss in using cakePHP itself? Writing regular PHP without a framework would certainly chug out pages faster, so you should give it a try some time :-D Or if you're like Felix and I, you can save yourself some time and use what makes your job easier. Saving a few microseconds for the user isn't life-changing, and let's not forget view caching...</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4ddd-6cec-4a79-89d8-4e23cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e7ec2e6e9a72b31c5115a11658525c10&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Brandon P&nbsp;						</strong>
						<strong>said 
						on Sep 21, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>My 3 cents :) ...</p>
<p>IMO, performance should be a PRIMARY concern when developing an application.  This is the reason why PHP gets s**t on from the programming community. PHP is seen as a lazy language wherein many programmers "wing" stuff within their apps to get by and have no reusability with their code.</p>
<p>Performance should start on the DB level and work up (for cake-style applications) to model, controller then view.  A well thought out and fast db schema can save you unforseen time when creating the actual components (MVC's).</p>
<p>Onto your clever config idea ... I think "Config" should be a component, not a model. To me, models are used for repetative, interactive use within a controller.</p>
<p>Config::startup () should read in all config values into a class var and then use Config::get(..) to retrieve the data from the local variable. Config::store(..) should use a simple query (yes, SIGH, an actual SQL query) to enter the data into the db.</p>
<p>Model's are nice, they offer a nice and easy abstraction to the database but you don't need to create a model for every table in your db -- especially for tables that are only referenced a few times.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4ddd-ec24-4ae1-b80f-44dfcbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=9e4fda9e9d351d5387ba6bf78e8a3237&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://jamesc.id.au" rel="nofollow">James</a>						</strong>
						<strong>said 
						on Sep 21, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Felix &amp; Bret, the number of potential visitors is very important in a case such as mine, where I am planning on developing an app that will be sold via the internet as a commercial web based application. Just because we are using the MVC approach is no excuse to write inefficient code! I think that regardless of our design methodology (eg MVC, procedural, etc), it is very important to optimise our code as much as possible. Also, if you run you inefficient site on a shared host, you are much more likely for your site to be suspended if your site is inefficient from a performance point of view.</p>
<p>Brandon, I agree with that you say that performance should be a PRIMARY concern. I'm not quite sure whether I agre with your component vs model idea, as I am quite new to MVC and CakePHP . What does everyone else think?</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4ddd-4394-41ad-ab34-4fcdcbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/felix" rel="nofollow">Felix Geisendörfer</a>						</strong>
						<strong>said 
						on Sep 21, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Brandon, James: I disagree with both of you guys bigtime. Performance as a primary concern as a general programming approach is so oldschool I can't believe anybody would suggest it. I'll get into a little bit more detail now, but you cannot make a general statment like this on my blog - no way : p.</p>
<p>I don't know about you guys, but I would assume you would agree with me that our all time is more or less valuable. You've probably also heard about ROI (Return on Investment), YAGNI (You Aren't Gonna Need It) and RAD (Rapid Application Development). I consider all of those 3 important to what I'm doing. So often I get into a situation where I have to decide whether I want to spent 3 hours on optimizing some piece of code which will cost, depending on the wage around $150 or if I'm gonna keep it simple and let the performance suffer. So let's say the performance loss forces me to switch the app from a $5 / month host to a $15 / month one. Applying some minor math (150 / 10) you'll find out that saving those 3 hours would actually pay for the first 2 years and 3 month of hosting the application. That's quite some time, and if performance is your #1 concern, you can easily spend a lot more hours on it. In a case like the one above I wouldn't even remotly consider spending time on optimization. CPU cycles are cheap these days and my labor is valuable, so why shouldn't I use it for more meaningful things like adding another feature?</p>
<p>Again, there are situations where you should focus on performance. I think your situation demands it James, but the site I'm doing right now will get 50-100 visitors / day, so I would have to be crazy to optimize it. And those people who give php programmers shit for being pragmatic are jealouse as hell. </p>
<p>I come from a Visual Basic background and used to do some game programming. You wouldn't believe the shit I got from C++ programmers when posting in game developer forums because I was using Visual Basic. They were talking to me like an idiot for using VB and told me to use a real language because the code your write in VB is doomed to be horrible, slow and so on. While I now would totally agree with them on all of those points I think they missed the major point: My applications were coming together 10x faster then the ones of the oh-so-skilled c++ developers. I was doing 2D and Visual Basic was fast enough for it. It was easy to use and scaled well. It was the RIGHT TOOL for the JOB. And the only problem the c++ dev's had with it was that all their ideology failed them in the real world.</p>
<p>I'm a big fan of the entire theory behind programming, and I often enjoy doing more work then I would need to do on some code to make it better. However, I do this out of the joy in programming and nothing else. When working on a project with a strict deadline I have to force myself into a little more pragmatic mode and focus on real world requirements. So again, if your real world requirement is to make a huge application or one that has a very small memory footprint for shared hosting, go for the optimization. If you work for a specific client where you can get a good estimate on traffic, be realistic about what need's to be optimized and what not.</p>
<p>So far so good, let me know if you still disagree.</p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4ddd-fc4c-4043-80bc-4a79cbdd56cb" class="blogcomment">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e7ec2e6e9a72b31c5115a11658525c10&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							Brandon P&nbsp;						</strong>
						<strong>said 
						on Sep 21, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Felix...<br />
I think James brings up a great point.  Building on top of his comments, most of a PHP/Cake programmers work comes from these quick, short jobs (usually only lasting maybe a week at most) where code optimization isn't necessary.  But falling into these bad habits will only make it harder to break away from them later down the road.  I couldn't tell you how many habits I had to get rid of when converting over to cake a year ago.</br></p>
<p>I respect you a lot when it come to programming and your "thinking outside the box" but I think you might not be looking at the larger picture here.  The major cost of software isn't development -- its maintenance and upgrading.  So by taking less time in development with concerns of performance (or other things) you will inevitably spend that time in the maintenance or upgrade phase of the project.  Through my experience it is much easier to do it in development when you don’t have to worry about it being an issue – ever.</p>
<p>Who is to say that your little app someday won't be implemented into a larger project?  Maybe one day, like James, you will want to package it up for commercial use. </p>
<p>I am not suggesting you go through and rethink ALL of your code but think about performance WHILE creating your code.  In this Config example there are a few, VERY SIMPLE, ways to increase the performance of the code without extraneous thought or time invested – that was my initial point I tried to make.</p>
<p>BTW...<br />
I think our site topped out at 32,000 on Alexa over this summer -- do I qualify, then, for being as passionate as I am about performance? :)</br></p>
				</div>
				<div class="clear"></div>
							</div>
	  						<div id="comment-480f4ddd-c8c0-4c87-97a1-4c50cbdd56cb" class="blogcomment admin">
				<span class="author">
					<a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=31&rating=R&d=identicon" alt="" /></a>					<div>
						<strong class="author-name">
							<a href="http://www.debuggable.com/felix" rel="nofollow">Felix Geisendörfer</a>						</strong>
						<strong>said 
						on Sep 23, 2006:</strong>
					</div>
				</span>
				<div class="clear"></div>
				<div class="body">
					<p>Brandon: I agree with the points you bring up, but I still think we are talking about 2 different scenarios ; ). To be a little bit more specific: I'm doing a web site for a Hotel. This Hotel has a limited amount of rooms available, and it doesn't look like they are going to expand at any point soon. So for this project I think it's very safe to estimate the traffic and optimize only to the point of meeting this requirement.</p>
<p>Ok, now you could say that: maybe, one of these days, I'll build a website for another Hotel, with more traffic, and then I might have to go through all of the code again and optimize it. Very true. But I can't know that. And if I would get stuck in that "What if ...?" kind of thinking, I would automatically build very bloated apps. Opimization is only one thing, but it goes on with the business logic: "What if" the client ever wants to change his booking procedure? "What if" he ever wants to change his database from MySql to Text files? "What if" he wants to add Theming to his site? "What if" ...! I mean as I already said, I think that probably both you should be concerened about optimization, because you have strong reasons for doing so. But if that reason does not exist, then I think it's a waste of time.</p>
<p>And as far as the stuff on this blog goes: Most of the code I post on here is not optimized as much as it could be. Whenever the optimization makes the code harder to understand, or distracts from the idea itself, I leave it out. So for little snippets like this, never expect them to be copy & paste ready without having to worry about anything else. I will make a comment on it if I think it's a completly thought out solution.</p>
<p>Oh and again: I believe the stuff in your last comment is true. It's just that because the majority of cars are red, it doesn't mean mine will be too ; ). Same goes for research about software development..</p>
				</div>
				<div class="clear"></div>
							</div>
	  	
				<div class="divider"></div>
		<a name="comment_form"></a>
		<p>This post is too old. We do not allow comments here anymore in order to fight spam. If you have real feedback or questions for the post, please <a href="/contact">contact us</a>.</p>
	</div></div>
	
</div>
<div class="grid_4 prefix_1 omega" id="sidebar">
	<cake:nocache>
			</cake:nocache>

	<h3>RSS Feeds</h3>
	<div id="bug">
		<img src="/img/rss_bug.png" alt="" />	</div>
	<div class="rss">
		<p class="bug-message"></p>
		<a href="http://feeds.feedburner.com/debuggable">Blog RSS</a><br/>
		<a href="http://feeds.feedburner.com/debuggable-comments">Comments RSS</a><br/><br/>
		<img width="88" height="26" alt="" style="border: 0pt none ;" src="http://feeds.feedburner.com/~fc/debuggable?bg=FF9933&amp;fg=444444&amp;anim=0"/>
		<div class="clear"></div>
	</div>

	<h3>Recent Posts</h3>
	<ul>
<li class=""><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb">Releasing node-mysql 2.0.0-alpha</a></li><li class=""><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb">How to write jQuery plugins</a></li><li class=""><a href="/posts/vim-workshop-in-berlin-april-20:4f702b83-ce24-429c-9403-0e39cbdd56cb">Vim Workshop in Berlin (April 20)</a></li><li class=""><a href="/posts/npm-an-intervention:4f44dd25-a114-4361-ada1-6cefcbdd56cb">NPM - An intervention</a></li><li class="active"><a href="/posts/testing-node-js-modules-with-travis-ci:4ec62298-aec4-4ee3-8b5a-2c96cbdd56cb">Testing node.js modules with Travis CI</a></li><li class=""><a href="/posts/private-npm-modules:4e68cc7d-1ac4-42d9-995a-343dcbdd56cb">Private npm modules</a></li></ul>
	<h3>Archive</h3>
	<p class="small align">
		<strong>443 Posts</strong>, <strong>4608 Comments</strong><br /><br />
		We are on air since 2006. Take a tour through the
		<a href="/posts/archive">blog archive</a>.
	</p>
	<div class="search">
	<form id="PostSearchForm" method="post" action="/posts/search"><fieldset style="display:none;"><input type="hidden" name="_method" value="POST" /></fieldset><input name="data[Post][keywords]" type="text" value="" id="PostKeywords" /><input type="submit" class="button" value="Search" /></form>	<div class="clear"></div>
</div>
	<h3>Recent Comments</h3>
	<div class="recent-comments">
		<div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd32b85-220c-4fc8-84b2-378fcbdd56cb">William: thanks, fixed ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=b47010beec892f11619d1e81f0c94f11&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd30119-06fc-4712-aecd-7fa5cbdd56cb">Hi Felix,

The Upgra ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=99b59e8a9cfe2c5575f0fa90f7f30307&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f99a4a2-9ad8-4476-b208-611acbdd56cb">Maybe you can write so ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=8364689a1eefb5eceb6a4f38bbf95731&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f9651b9-eb88-4096-94c1-0fc2cbdd56cb">This is very nice plug ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=7e3d69d16d3b845e89198512355b2ac9&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f8bb75a-96cc-4197-8e93-7c63cbdd56cb">Nice article!

Somet ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f83326b-8c28-43fc-b70d-097ecbdd56cb">That&#039;s fine ognian, th ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=994516a664c2bdc728d18c47e935bc14&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f832a25-5818-4d38-9e39-097ecbdd56cb">Really nice work! I wa ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c15ca-c7c4-48e3-a4db-27decbdd56cb">@Jörn: Sorry, thought  ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d5d83832be2b6c70d1968635f68a1b4a&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c11aa-6f9c-448c-abdb-2066cbdd56cb">Thanks didn&#039;t quite un ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7bf934-d4e8-4885-9a2c-7a93cbdd56cb">Well you could expose  ..</a></div><div class="clear_left"></div>	</div>
	<div class="clear_left"></div>
	<h3>Keep an eye on</h3>
<ul class="links external">
	<li><a href="http://transloadit.com" title="Video encoding, image resizing and more for your web or mobile app">Transloadit</a></li><li><a href="http://tus.io" title="Resumable file uploading, upload progress bar, faster upload speed">tus - resumable file upload protocol</a></li><li><a href="http://kevin.vanzonneveld.net/">Kevin van Zonneveld</a></li><li><a href="http://www.littlehart.net/atthekeyboard/">Chris Hartjes</a></li><li><a href="http://mark-story.com">Mark Story</a></li><li><a href="http://www.webbosaurus.de">Webbosaurus</a></li></ul>
	<a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number' title='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'><img src='http://static.jsconf.us/promotejshs.png' height='150' width='180' alt='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'/></a>
</div>

						<div class="clear">&nbsp;</div>
		</div>

		<div id="footer">
			<div class="container_16">
				<ul id="footer_navigation">
					<ul>
<li class=""><a href="/blog">Blog</a></li><li class="active"><a href="/">About</a></li></ul>				</ul>
				<p>&copy; 2008 - 2015, Debuggable Ltd. All rights reserved.
				<i>Designed by <a href="http://www.fluidcore.net" target="_blank">fluidCORE</a>.</i>
			</div>
		</div>
	</div>
	<script type="text/javascript" src="/js/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/5627ea2806458e56fb8a5f4b231a44c2.php"></script><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-3306079-3']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script');
ga.src = ('https:' == document.location.protocol ?
    'https://ssl' : 'http://www') +
    '.google-analytics.com/ga.js';
ga.setAttribute('async', 'true');
document.documentElement.firstChild.appendChild(ga);
})();
</script></body>
</html>
