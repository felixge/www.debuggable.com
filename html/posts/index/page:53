<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
	<title>Blog &raquo; Debuggable - Node.js Consulting</title>

	<link href="http://feeds.feedburner.com/debuggable" type="application/rss+xml" rel="alternate" title="RSS 2.0" />	<link rel="pingback" href="Debuggable.com/pingback" />
	<link rel="stylesheet" type="text/css" href="/css/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/4026ee2275e22a4e5ec8aea13747c557.php" /></head>
	<body>
		<div class="container_16">
			<h1 id="logo-text"><a href="/">debuggable</a></h1>
			<ul id="navigation">
				<ul>
<li class="active"><a href="/blog">Blog</a></li><li class=""><a href="/">About</a></li></ul>			</ul>
			<div class="clear">&nbsp;</div>

			<div id="blueprint">
				<a href="/contact" class="contact">Contact Us</a>			</div>

			<div class="clear">&nbsp;</div>
			<div class="grid_11 alpha" id="content">
	<cake:nocache>
			<div class="messages empty"></div>
	</cake:nocache>
	<div class="paging">
	<a href="/posts/index/page:52" class="prev">&laquo; Previous</a> <span><a href="/posts/index/page:49">49</a></span> | <span><a href="/posts/index/page:50">50</a></span> | <span><a href="/posts/index/page:51">51</a></span> | <span><a href="/posts/index/page:52">52</a></span> | <span class="current">53</span> | <span><a href="/posts/index/page:54">54</a></span> | <span><a href="/posts/index/page:55">55</a></span> | <span><a href="/posts/index/page:56">56</a></span> | <span><a href="/posts/index/page:57">57</a></span> <a href="/posts/index/page:54" class="next">Next &raquo;</a></div>
	<div class="post">
	<h2><a href="/posts/drake-drupal-cakephp-101b-released:480f4dd6-42a0-47a1-aa7c-4aadcbdd56cb">Drake :: Drupal-CakePHP 1.0.1b Released</a></h2>	<div class="posted-on">
		<p>Posted on 26/2/07 by 
		<a href="/felix">Felix Geisendörfer</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/felix_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p>Hey folks,</p>
<p>this is just a quick announcement that a completely new Drake has has been released by <a href="http://www.marianoiglesias.com.ar/">Mariano Iglesias</a>. For those of you who don't remember: I used to have some <a href="http://www.thinkingphp.org/2006/05/04/using-cakephp-in-external-php-systems-cmss-weblogs-etc/">fun with integrating CakePHP with other PHP applications around</a> such as drupal which in term created a project called Drake. I only released a couple versions and by looking at Mariano documentation for Drakes none of them were as easy to set up.</p>
<p>Here is his announcement from the google group:</p>
<blockquote style="background-color: #f6f6f6"><p>My fellow bakers,</p>
<p>After my experience with Jake, and thanks to Felix’s goodwill in giving the catchy name Drake for me to use, I’m pleased to announce the first beta release of Drake, a Drupal module that lets you execute your CakePHP applications inside Drupal.</p>
<p>Project home page: <a href="http://dev.sypad.com/projects/drake">http://dev.sypad.com/projects/drake</a></p>
<p>Documentation: <a href="http://dev.sypad.com/projects/drake/documentation ">http://dev.sypad.com/projects/drake/documentation </a></p>
<p>Download: <a href="http://drupal.org/project/drake ">http://drupal.org/project/drake </a></p>
<p>Demo (Cheesecake Photoblog on Drupal 5.1): http://dev.sypad.com/projects/drake/demo/drake</p>
<p>Bake on, with Drake ;)</p>
<p>-MI</p></blockquote>
<p>So if you like to work with an existing system such as Drupal go ahead and give it a try!</p>
<p>-- Felix Geisendörfer aka the_undefined<br />
<img style="display: none;" src="http://debuggable.com/posts/tick/480f4dd6-42a0-47a1-aa7c-4aadcbdd56cb"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fdrake-drupal-cakephp-101b-released%3A480f4dd6-42a0-47a1-aa7c-4aadcbdd56cb &amp;title=Drake+%3A%3A+Drupal-CakePHP+1.0.1b+Released';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fdrake-drupal-cakephp-101b-released%3A480f4dd6-42a0-47a1-aa7c-4aadcbdd56cb';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fdrake-drupal-cakephp-101b-released%3A480f4dd6-42a0-47a1-aa7c-4aadcbdd56cb&amp;title=Drake+%3A%3A+Drupal-CakePHP+1.0.1b+Released&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fdrake-drupal-cakephp-101b-released%3A480f4dd6-42a0-47a1-aa7c-4aadcbdd56cb&amp;title=Drake+%3A%3A+Drupal-CakePHP+1.0.1b+Released';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>

	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/drake-drupal-cakephp-101b-released:480f4dd6-42a0-47a1-aa7c-4aadcbdd56cb">6 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/drake-drupal-cakephp-101b-released:480f4dd6-42a0-47a1-aa7c-4aadcbdd56cb#CommentAddForm">Add Comment</a>	</div>
	</div>
<div class="post">
	<h2><a href="/posts/cake-12s-set-class-eats-arrays-for-breakfast:480f4dd6-d084-4fb7-bacc-49fdcbdd56cb">Cake 1.2's Set class eats nested arrays for breakfast!</a></h2>	<div class="posted-on">
		<p>Posted on 24/2/07 by 
		<a href="/felix">Felix Geisendörfer</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/felix_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p>Hey folks,</p>
<p>I was just taking a little trip through the CakePHP core code trying to wrap my head around Acl, Model behaviors and all sorts of stuff. While doing so I saw that the core code starts to be using the Set class more and more that was added a while ago. So far this has been a little dark spot for me in the core and from my previous quick looks at the class I've never been quite able to figure out what it's exact purpose was. Until now all I knew was "well it's probably some fancy array manipulation code that is somewhat obfuscated and undocumented". Oh boy, I wish I had spent more time on this earlier. It's probably one of coolest new features in 1.2 and nobody realizes it ; ).</p>
<p>So before starting to drool over it too much ahead of time, let's take a look at a simple example. You have an array of $users as it could have been returned from a findAll call to your User model:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$users</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
<span class="br0">&#40;</span><br />
&nbsp; &nbsp; <span class="nu0">0</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'User'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'id'</span> =&gt; <span class="nu0">1</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'name'</span> =&gt; <span class="st0">'Felix'</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span>&nbsp;&nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; , <span class="nu0">1</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'User'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'id'</span> =&gt; <span class="nu0">2</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'name'</span> =&gt; <span class="st0">'Bob'</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; , <span class="nu0">2</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'User'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'id'</span> =&gt; <span class="nu0">3</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'name'</span> =&gt; <span class="st0">'Jim'</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#41;</span><br />
<span class="br0">&#41;</span>;</div>
<p>What you really want however, is just a simple array containing all user 'name's: array('Felix', 'Bob', 'Jim'). Hmm. Up until today I'd probably have written some code like this to do it:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$userNames</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
<span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="re0">$users</span> <span class="kw1">as</span> <span class="re0">$user</span><span class="br0">&#41;</span><br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="re0">$userNames</span><span class="br0">&#91;</span><span class="br0">&#93;</span> = <span class="re0">$user</span><span class="br0">&#91;</span><span class="st0">'User'</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="st0">'name'</span><span class="br0">&#93;</span>;<br />
<span class="br0">&#125;</span></div>
<p>Simple enough, right? Not any more! Using the new Set class we can achieve the exact same outcome like this:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$userNames</span> = Set::<a href="http://www.php.net/extract"><span class="kw3">extract</span></a><span class="br0">&#40;</span><span class="re0">$users</span>, <span class="st0">'{n}.User.name'</span><span class="br0">&#41;</span>;</div>
<p>Doesn't blow you away yet? Well, let's look at another example. Let's say our User model as a hasMany associations to an Item model. Then we would get an array like this:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$users</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
<span class="br0">&#40;</span><br />
&nbsp; &nbsp; <span class="nu0">0</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'User'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'id'</span> =&gt; <span class="nu0">1</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'name'</span> =&gt; <span class="st0">'Felix'</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'Item'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="nu0">0</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'id'</span> =&gt; <span class="nu0">1</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'name'</span> =&gt; <span class="st0">'Mouse'</span>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="nu0">1</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'id'</span> =&gt; <span class="nu0">2</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'name'</span> =&gt; <span class="st0">'KeyBoard'</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span>&nbsp;&nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; , <span class="nu0">1</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'User'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'id'</span> =&gt; <span class="nu0">2</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'name'</span> =&gt; <span class="st0">'Bob'</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'Item'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="nu0">0</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'id'</span> =&gt; <span class="nu0">3</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'name'</span> =&gt; <span class="st0">'CD'</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; , <span class="nu0">2</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'User'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'id'</span> =&gt; <span class="nu0">3</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'name'</span> =&gt; <span class="st0">'Jim'</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'Item'</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="nu0">0</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'id'</span> =&gt; <span class="nu0">4</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'name'</span> =&gt; <span class="st0">'USB Stick'</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="nu0">1</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'id'</span> =&gt; <span class="nu0">5</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'name'</span> =&gt; <span class="st0">'MP3 Player'</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="nu0">2</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">array</span></a><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'id'</span> =&gt; <span class="nu0">6</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , <span class="st0">'name'</span> =&gt; <span class="st0">'Cellphone'</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#41;</span><br />
<span class="br0">&#41;</span>;</div>
<p>Now here is how I would have traditionally turned this into a 'User.name' => 'User.items' array:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$userItems</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
<span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="re0">$users</span> <span class="kw1">as</span> <span class="re0">$user</span><span class="br0">&#41;</span><br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="re0">$user</span><span class="br0">&#91;</span><span class="st0">'User'</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="st0">'Item'</span><span class="br0">&#93;</span> <span class="kw1">as</span> <span class="re0">$item</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$userItems</span><span class="br0">&#91;</span><span class="re0">$user</span><span class="br0">&#91;</span><span class="st0">'User'</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="st0">'name'</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="br0">&#93;</span> = <span class="re0">$item</span><span class="br0">&#91;</span><span class="st0">'name'</span><span class="br0">&#93;</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
<span class="br0">&#125;</span></div>
<p>But using the new Set class this is still pretty much a simple one-liner (split up in multiple lines so you don't have to scroll):</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$userItems</span> = array_combine<br />
<span class="br0">&#40;</span><br />
&nbsp; &nbsp; Set::<a href="http://www.php.net/extract"><span class="kw3">extract</span></a><span class="br0">&#40;</span><span class="re0">$users</span>, <span class="st0">'{n}.User.name'</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; , Set::<a href="http://www.php.net/extract"><span class="kw3">extract</span></a><span class="br0">&#40;</span><span class="re0">$users</span>, <span class="st0">'{n}.User.Item.{n}.name'</span><span class="br0">&#41;</span><br />
<span class="br0">&#41;</span>;</div>
<p>Both methods will output:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<a href="http://www.php.net/array"><span class="kw3">Array</span></a><br />
<span class="br0">&#40;</span><br />
&nbsp; &nbsp; <span class="br0">&#91;</span>Felix<span class="br0">&#93;</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">Array</span></a><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> =&gt; Mouse<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> =&gt; KeyBoard<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
<br />
&nbsp; &nbsp; <span class="br0">&#91;</span>Bob<span class="br0">&#93;</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">Array</span></a><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> =&gt; CD<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
<br />
&nbsp; &nbsp; <span class="br0">&#91;</span>Jim<span class="br0">&#93;</span> =&gt; <a href="http://www.php.net/array"><span class="kw3">Array</span></a><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> =&gt; USB Stick<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> =&gt; MP3 Player<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span> =&gt; Cellphone<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><br />
<span class="br0">&#41;</span></div>
<p>"But doesn't it cost more performance to loop through the array twice in the Set example?" I hear some of you cry. Yes it does. And? Have you built your application yet? Does it implement all features you are dreaming of? And most importantly: Do your web stats indicate you are going to have 1 million hits / day soon? If so go back into your code and remove the Set example with the less succinct foreach alternative. If not, listen to <a href="http://www.littlehart.net/atthekeyboard/">Chris Hartjes</a> who's motto for 2007 is <a href="http://www.littlehart.net/atthekeyboard/2007/01/02/just-build-it-damnit/">Just Build It, Damnit!</a>.</p>
<p>Anyway, here comes my last fun thing to do with Set::extract - parsing an RSS feed for all post titles. For my example I'll use the new XML class in Cake 1.2. Right now Set::extract only supports arrays but hopefully it will either natively support Xml objects at some point, or the Xml class get it's own extract function. For now I've written a little function that can turn an Xml instance into an array that looks like this:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">function</span> xmltoArray<span class="br0">&#40;</span><span class="re0">$node</span><span class="br0">&#41;</span><br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="re0">$array</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="re0">$node</span>-&gt;<span class="me1">children</span> <span class="kw1">as</span> <span class="re0">$child</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><a href="http://www.php.net/empty"><span class="kw3">empty</span></a><span class="br0">&#40;</span><span class="re0">$child</span>-&gt;<span class="me1">children</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$value</span> = <span class="re0">$child</span>-&gt;<span class="me1">value</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$value</span> = xmltoArray<span class="br0">&#40;</span><span class="re0">$child</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$key</span> = <span class="re0">$child</span>-&gt;<span class="me1">name</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>!<a href="http://www.php.net/isset"><span class="kw3">isset</span></a><span class="br0">&#40;</span><span class="re0">$array</span><span class="br0">&#91;</span><span class="re0">$key</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$array</span><span class="br0">&#91;</span><span class="re0">$key</span><span class="br0">&#93;</span> = <span class="re0">$value</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>!<a href="http://www.php.net/is_array"><span class="kw3">is_array</span></a><span class="br0">&#40;</span><span class="re0">$array</span><span class="br0">&#91;</span><span class="re0">$key</span><span class="br0">&#93;</span><span class="br0">&#41;</span> || !<a href="http://www.php.net/isset"><span class="kw3">isset</span></a><span class="br0">&#40;</span><span class="re0">$array</span><span class="br0">&#91;</span><span class="re0">$key</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$array</span><span class="br0">&#91;</span><span class="re0">$key</span><span class="br0">&#93;</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="re0">$array</span><span class="br0">&#91;</span><span class="re0">$key</span><span class="br0">&#93;</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$array</span><span class="br0">&#91;</span><span class="re0">$key</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="br0">&#93;</span> = <span class="re0">$value</span>;<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; <span class="kw1">return</span> <span class="re0">$array</span>;<br />
<span class="br0">&#125;</span></div>
<p>So now let's assume we would want to extract all post titles from my feed: <a href="http://feeds.feedburner.com/thinkingphp">http://feeds.feedburner.com/thinkingphp</a> we could leverage the Set class to make our code as succinct as:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
uses<span class="br0">&#40;</span><span class="st0">'Xml'</span><span class="br0">&#41;</span>;<br />
<br />
<span class="re0">$feed</span> = xmltoArray<span class="br0">&#40;</span><span class="kw2">new</span> XML<span class="br0">&#40;</span><span class="st0">'http://feeds.feedburner.com/thinkingphp'</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
<span class="re0">$postTitles</span> = Set::<a href="http://www.php.net/extract"><span class="kw3">extract</span></a><span class="br0">&#40;</span><span class="re0">$feed</span>, <span class="st0">'rss.channel.item.{n}.title'</span><span class="br0">&#41;</span>;</div>
<p>Which will give you a $postTitles array like this:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<a href="http://www.php.net/array"><span class="kw3">Array</span></a><br />
<span class="br0">&#40;</span><br />
&nbsp; &nbsp; <span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> =&gt; How-to: Use Html <span class="nu0">4.01</span> in CakePHP <span class="nu0">1.2</span><br />
&nbsp; &nbsp; <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> =&gt; Looking up foreign <a href="http://www.php.net/key"><span class="kw3">key</span></a> values using Model::<span class="me2">displayField</span><br />
&nbsp; &nbsp; <span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span> =&gt; Bug-fix update <span class="kw1">for</span> SVN/FTP Deployment Task<br />
&nbsp; &nbsp; <span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span> =&gt; Access your config files rapidly <span class="br0">&#40;</span>Win32 only<span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#91;</span><span class="nu0">4</span><span class="br0">&#93;</span> =&gt; Making error handling <span class="kw1">for</span> Model::<span class="me2">save</span> more beautiful in CakePHP<br />
&nbsp; &nbsp; <span class="br0">&#91;</span><span class="nu0">5</span><span class="br0">&#93;</span> =&gt; Full content RSS feed<br />
&nbsp; &nbsp; <span class="br0">&#91;</span><span class="nu0">6</span><span class="br0">&#93;</span> =&gt; Visual Sorting - Some Javascript fun I had last night<br />
<span class="br0">&#41;</span></div>
<p>Now that's beauty right there and a good way to end this post ; ). Take a look at the <a href="https://trac.cakephp.org/browser/branches/1.2.x.x/cake/libs/set.php">Set classes source</a> to find out about some other cool methods it has, but to me this is by far the coolest.</p>
<p>-- Felix Geisendörfer aka the_undefined<br />
<img style="display: none;" src="http://debuggable.com/posts/tick/480f4dd6-d084-4fb7-bacc-49fdcbdd56cb"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fcake-12s-set-class-eats-arrays-for-breakfast%3A480f4dd6-d084-4fb7-bacc-49fdcbdd56cb &amp;title=Cake+1.2%27s+Set+class+eats+nested+arrays+for+breakfast%21';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fcake-12s-set-class-eats-arrays-for-breakfast%3A480f4dd6-d084-4fb7-bacc-49fdcbdd56cb';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fcake-12s-set-class-eats-arrays-for-breakfast%3A480f4dd6-d084-4fb7-bacc-49fdcbdd56cb&amp;title=Cake+1.2%27s+Set+class+eats+nested+arrays+for+breakfast%21&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fcake-12s-set-class-eats-arrays-for-breakfast%3A480f4dd6-d084-4fb7-bacc-49fdcbdd56cb&amp;title=Cake+1.2%27s+Set+class+eats+nested+arrays+for+breakfast%21';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>

	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/cake-12s-set-class-eats-arrays-for-breakfast:480f4dd6-d084-4fb7-bacc-49fdcbdd56cb">32 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/cake-12s-set-class-eats-arrays-for-breakfast:480f4dd6-d084-4fb7-bacc-49fdcbdd56cb#CommentAddForm">Add Comment</a>	</div>
	</div>
<div class="post">
	<h2><a href="/posts/access-your-config-files-rapidly-win32-only:480f4dd6-3ed4-4725-b26e-40e5cbdd56cb">Access your config files rapidly (Win32 only)</a></h2>	<div class="posted-on">
		<p>Posted on 12/2/07 by 
		<a href="/felix">Felix Geisendörfer</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/felix_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p>For the past 2 days I've been setting up my new desktop pc. If you are like me and you run 9999 different apps, all of them with custom configurations and also need to setup php4+php5  and mysql4+mysql5 to run parallel you can probably feel my pain ; ). Anyway while setting up my WAMP stack, I had to tweak my configuration files all the time. At some point I got tired of looking for them after having previously closed them thinking I was done and decided to automate things. I knew <a href="http://www.autohotkey.com/">AutoHotkey</a> was capable of scripting custom GUI's for a while, but never got around to use it, so I thought I should give it a try. The result is a neat little script that opens a window where I can pick my configuration file and have it opened for me in notepad (which is <a href="http://notepad-plus.sourceforge.net/uk/site.htm">Notepad++</a> in my case):</p>
<p><img style="border: 1px solid black;" src="http://img486.imageshack.us/img486/7590/ahkconfigrs7.jpg" alt="Custom AutoHotkey Configuration File Loader" /></p>
<p>If this sounds like something you could need as well, here comes the source for it:</p>
<p>[text]#c::<br />
    Gosub, ConfigWindow.Show<br />
    return</p>
<p>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br />
; Class ConfigWindow<br />
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br />
ConfigWindow.Show:<br />
    Gui, +LabelConfigWindow.Gui. -MinimizeBox<br />
    Gui, Add, DropDownList, Choose1 vConfigFile x6 y7 w150, hosts|httpd.conf|httpd-vhosts.conf|php.ini (php4)|php.ini (php5)<br />
    Gui, Add, Button, Default gConfigWindow.Buttons.OpenFile.click x166 y7 w90 h20 , Open File</p>
<p>    Gui, Show, Center h35 w269, Select Configuration File<br />
    return</p>
<p>ConfigWindow.Buttons.OpenFile.click:<br />
    Gui, Submit</p>
<p>    if (ConfigFile = "hosts")<br />
    {<br />
        Run notepad C:\WINDOWS\system32\drivers\etc\%ConfigFile%<br />
    }<br />
    else if (ConfigFile = "httpd.conf")<br />
    {<br />
        Run notepad %A_ProgramFiles%\Apache\Apache2.2\conf\%ConfigFile%<br />
    }<br />
    else if (ConfigFile = "httpd-vhosts.conf")<br />
    {<br />
        Run notepad %A_ProgramFiles%\Apache\Apache2.2\conf\extra\%ConfigFile%<br />
    }<br />
    else if(ConfigFile = "php.ini (php4)")<br />
    {<br />
        Run notepad C:\windows\php.ini<br />
    }<br />
    else if(ConfigFile = "php.ini (php5)")<br />
    {<br />
        Run notepad C:\php\php5\php.ini<br />
    }</p>
<p>ConfigWindow.Close:<br />
ConfigWindow.Gui.Close:<br />
    Gui Destroy<br />
    return<br />
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;[/text]</p>
<p>All it does is to bind the hotkey [Windows-key]+[C] to a function that will generate the little GUI where you can select a configuration file and then load this file via notepad if the ok button is pressed. The source looks a little messy and this is probably partly due to the fact that I just started to get into Autohotkey scripting today (not to speak of my pathetic OOP attempts ^^), but I think the language itself isn't quite elegant to begin with either. Anyway, I certainly got the job done in less than 30 minutes and I'm very pleased with the results. So let me know what you think of little development helpers like this and how your favorite shortcut-hacks look like ; ).</p>
<p>-- Felix Geisendörfer aka the_undefined<br />
<img style="display: none;" src="http://debuggable.com/posts/tick/480f4dd6-3ed4-4725-b26e-40e5cbdd56cb"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Faccess-your-config-files-rapidly-win32-only%3A480f4dd6-3ed4-4725-b26e-40e5cbdd56cb &amp;title=Access+your+config+files+rapidly+%28Win32+only%29';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Faccess-your-config-files-rapidly-win32-only%3A480f4dd6-3ed4-4725-b26e-40e5cbdd56cb';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Faccess-your-config-files-rapidly-win32-only%3A480f4dd6-3ed4-4725-b26e-40e5cbdd56cb&amp;title=Access+your+config+files+rapidly+%28Win32+only%29&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Faccess-your-config-files-rapidly-win32-only%3A480f4dd6-3ed4-4725-b26e-40e5cbdd56cb&amp;title=Access+your+config+files+rapidly+%28Win32+only%29';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>

	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/access-your-config-files-rapidly-win32-only:480f4dd6-3ed4-4725-b26e-40e5cbdd56cb">1 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/access-your-config-files-rapidly-win32-only:480f4dd6-3ed4-4725-b26e-40e5cbdd56cb#CommentAddForm">Add Comment</a>	</div>
	</div>
<div class="post">
	<h2><a href="/posts/visual-sorting-some-javascript-fun-i-had-last-night:480f4dd6-e21c-4ac8-b2bc-4ebccbdd56cb">Visual Sorting - Some Javascript fun I had last night</a></h2>	<div class="posted-on">
		<p>Posted on 26/1/07 by 
		<a href="/felix">Felix Geisendörfer</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/felix_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p>Hey folks,</p>
<p>last night was one of those rare occupations where I decided to do a school assignment. Now, don't get me wrong, I'm definitely not one of the "school sucks - it's boring" people who have very little passion for acedemics. In fact, quite the opposite is true - I love to learn new things and I get exited about the work of great writers, composers, physicists, philosophers, etc. However the school that I go to is full of teachers who seem to be totally passionless about their profession. It's simply no fun if you ask a question and the teacher answers you: "I don't know, this is not part of the curriculum". So if it wasn't for the Diploma to get me into a good University, I would have probably tried to quit regular school a while back in order to teach myself.</p>
<p>Anyway, this was just some ranting I felt like sharing and somewhere in June I'll be finally done with this daily waste of time. Back to that school assignment I did: It was a project in my computer science class and we were given about 1 semester of time to finish it. So of course I didn't get started on it until last night. Now my initial motivation for doing it was that it would make up a significant percentage of points in that class, and my ego couldn't become friends with doing poorly in a computer class. So I started doing some research on the topic I picked: "Visualizing of sorting algorithms". Being spoiled by working with high level programming languages for most of my life I couldn't recall that I had ever needed to implement such an algorithm myself before. Well, it turned out to be less of an issue since Wikipedia had enough material on the topic, including some sample code that I could simply port to the language of my choice. In this case I decided to go with JavaScript. Now as I started to gather ideas and writing some code, the entire thing became more and more interesting. I was able to fully test my JavaScript object orientation skills and there were tons of tricky issues to overcome. I ended up getting so involved in the entire thing that I didn't get to bed before 05:30am (I usually get up at that time). But much to my surprise I felt great after waking up only ~3 hours later this morning - it seems like some good old inspired late night coding is still one of the best ways to raise your energy level ; ).</p>
<p>But enough talk, the result of my work can be seen here: <a href="http://demos.thinkingphp.org/visual_sorting/">Visual Sorting Demo</a>. It's all in German, but the text is of no importance anyway. What is important however is that this requires <a href="http://developer.mozilla.org/en/docs/New_in_JavaScript_1.7">JavaScript 1.7</a> which is only available in <strong>Firefox 2.0</strong> right now (afaik). I decided to give this new JS version a try because it has very cool new features (such as <a href="http://developer.mozilla.org/en/docs/New_in_JavaScript_1.7#Generators">Generators</a>), and I can worry less about compatibility as this doesn't need to run for everybody. I've learned a lot of things while writing this code, including how to do the jQuery trick of turning a given object into an Array and I hope I'll have some time to write in more detail about this in future. </p>
<p>For those of you who are too lazy to read the text and click at the link (you know who your are ^^)  or people without FF 2.0, here is a screenshot that should give you a good idea of what the result looks like:</p>
<p><a href="http://demos.thinkingphp.org/visual_sorting/"><img src="http://img250.imageshack.us/img250/9016/visualsortinghd0.png" style="width: 629px; margin: 0 auto 0 auto; border: none;" alt="Sorting Visualiziation" /></a></p>
<p>So anyway, I just felt like sharing the results of this little project and maybe somebody finds it interesting ; ).</p>
<p>-- Felix Geisendörfer aka the_undefined<br />
<img style="display: none;" src="http://debuggable.com/posts/tick/480f4dd6-e21c-4ac8-b2bc-4ebccbdd56cb"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fvisual-sorting-some-javascript-fun-i-had-last-night%3A480f4dd6-e21c-4ac8-b2bc-4ebccbdd56cb &amp;title=Visual+Sorting+-+Some+Javascript+fun+I+had+last+night';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fvisual-sorting-some-javascript-fun-i-had-last-night%3A480f4dd6-e21c-4ac8-b2bc-4ebccbdd56cb';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fvisual-sorting-some-javascript-fun-i-had-last-night%3A480f4dd6-e21c-4ac8-b2bc-4ebccbdd56cb&amp;title=Visual+Sorting+-+Some+Javascript+fun+I+had+last+night&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fvisual-sorting-some-javascript-fun-i-had-last-night%3A480f4dd6-e21c-4ac8-b2bc-4ebccbdd56cb&amp;title=Visual+Sorting+-+Some+Javascript+fun+I+had+last+night';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>

	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/visual-sorting-some-javascript-fun-i-had-last-night:480f4dd6-e21c-4ac8-b2bc-4ebccbdd56cb">6 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/visual-sorting-some-javascript-fun-i-had-last-night:480f4dd6-e21c-4ac8-b2bc-4ebccbdd56cb#CommentAddForm">Add Comment</a>	</div>
	</div>
<div class="post">
	<h2><a href="/posts/a-php-developers-guide-to-javascript-part-i:480f4dd6-8a0c-4f43-b2ba-474dcbdd56cb">A PHP developers guide to JavaScript - Part I</a></h2>	<div class="posted-on">
		<p>Posted on 30/12/06 by 
		<a href="/felix">Felix Geisendörfer</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/felix_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p>Hey folks,</p>
<p>after the <a href="http://www.thinkingphp.org/2006/12/17/long-time-no-post-where-ive-been-hiding/">overwhelming interest</a> in me writing a little bit about javascript on this blog, here comes my first post on that topic. It's actually the beginning of a little series (2 or 3 parts) that is going to be targeted at php developers who've only used JS by merging snippets/libraries together without really learning the language itself. For all of those posts please keep in mind that I'm mainly on the php site of town as well, but my recent trips to downtown javascript have hopefully taught me well ; ).</p>
<h2>The JS developer toolkit</h2>
<p>Coming from PHP you are probably spoiled with some good developer tools, especially Zend Studio or Ecplipse PHP. In javascript land there are not as many good editors out there. From the ones I've worked with I would recommend <a href="http://notepad-plus.sourceforge.net/uk/site.htm">Notepad++</a>. It's very light weight, supports numerous languages, can completely replace your windows notepad and I use it for all my JS (and CSS) needs right now. If you don't run the beautiful microsoft operating system (...) you might find <a href="http://www.aptana.com/">Aptana</a> interesting. It's based on eclipse and therefor runs on most major operating systems. It also has advanced support for code completion and some other gimmicks. Personally I don't use it because it's too memory hungry, especially when my php IDE is already opened. Other then that it's a really comfortable IDE to work with.</p>
<p>Now that you have an editor (no matter which one) you might want to start coding right away. But you shouldn't. Not because you couldn't, but because you still lack the most important JS (and web dev) tool that is available these days: <a href="http://www.getfirebug.com/">Firebug</a>. Without any question, it is the most advanced debugging tool out there. So please take some time to get to know it's features and learn how to use it, it will make your day.</p>
<h2>The Basics</h2>
<p>As all of you are already familiar with coding in php, I won't start at "Hello World", but I'll try to show some important differences in JS (from PHP) and point you to some resources for further reading. The first one would be <a href="http://start.gotapi.com/">gotAPI.com</a>. If you see me using a function you are not familiar with, that's always a good place too look it up. (Side note: It also has support for the CakePHP/jQuery API).</p>
<h3>Variables:</h3>
<p>Just like PHP, javascript is a weakly typed language. This means you won't have to declare variable types (even so you can) and all variable types are converted to strings automatically when needed. The symbol used for gluing different strings together is '+' and not '.' like in php.</p>
<div class="clear"></div>
<div class="code debuggable_sh_js" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">var</span> myVariableA = <span class="st0">'Thinking'</span>;<br />
<span class="kw2">var</span> myVariableB = <span class="st0">'PHP'</span><br />
<br />
<span class="co1">// Logs: ThinkingPHP</span><br />
console.<span class="me1">log</span><span class="br0">&#40;</span>myVariableA+myVariableB<span class="br0">&#41;</span>;</div>
<p>Oh and in case you wonder: 'console' is no default javascript object. It's only available when using firebug (or <a href="http://www.getfirebug.com/lite.html">Firebug Lite</a>). The usual JS way to get information is to use the alert() function. But the first time you produce and endless loop with an alert in it, you'll get to appreciate the console.log function offered by Firebug ; ). Another thing you just learned is that object functions/properties are accessed via '.' (as opposed to '->' in php), but more about this later.</p>
<h3>Arrays</h3>
<p>The good news is, javascript has decent support for indexed arrays. The bad news is, it's lacking associative arrays (that we php folks all know and love). But don't you worry, there is a workaround to fix this.</p>
<p>Working arrays in JS is very much like working with arrays in php. The only difference is that arrays (like everything else) in JS are actual objects not only variables containing literals. But that's a no-brainer, just have a look at the following examples:</p>
<div class="clear"></div>
<div class="code debuggable_sh_js" style="white-space: wrap;white-space: nowrap;">
<span class="co1">// Note: var myArray = []; works just as well).</span><br />
<span class="kw2">var</span> myArray = <span class="kw2">new</span> Array<span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
<br />
<span class="co1">// Assign three values to the array.</span><br />
myArray<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> = <span class="st0">'ThinkingPHP'</span>;<br />
myArray<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> = <span class="st0">'suddenly'</span>;<br />
myArray<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span> = <span class="st0">'thinks'</span>;<br />
<br />
<span class="co1">// Now to show you we are working with an object:</span><br />
console.<span class="me1">log</span><span class="br0">&#40;</span>myArray.<span class="me1">length</span><span class="br0">&#41;</span>; <span class="co1">// Will log: 3</span><br />
<br />
<span class="co1">// myArray[] = 'value'; does not work in javascipt, so we have to use Array.push</span><br />
myArray.<span class="me1">push</span><span class="br0">&#40;</span><span class="st0">'JavaScript'</span><span class="br0">&#41;</span>;<br />
<br />
<span class="co1">// Will log: ThinkingPHP suddenly thinks JavaScript.</span><br />
console.<span class="me1">log</span><span class="br0">&#40;</span>myArray.<span class="me1">join</span><span class="br0">&#40;</span><span class="st0">' '</span><span class="br0">&#41;</span>+<span class="st0">'.'</span><span class="br0">&#41;</span>;</div>
<p>Now without really getting to the objects part yet, the Arrays are a good example to show another default behavior of the javascript language:</p>
<div class="clear"></div>
<div class="code debuggable_sh_js" style="white-space: wrap;white-space: nowrap;">
<span class="co1">// This is notation to declare an array with one or more values (comma separated)</span><br />
<span class="kw2">var</span> varA = <span class="br0">&#91;</span><span class="st0">'Thinking'</span><span class="br0">&#93;</span>;<br />
<span class="kw2">var</span> varB = varA;<br />
<br />
<span class="co1">// Push PHP at the end of array varB</span><br />
varB.<span class="me1">push</span><span class="br0">&#40;</span><span class="st0">'PHP'</span><span class="br0">&#41;</span>;<br />
<br />
<span class="co1">// Display the results: [&quot;Thinking&quot;, &quot;PHP&quot;]</span><br />
console.<span class="me1">log</span><span class="br0">&#40;</span>varA<span class="br0">&#41;</span>;</div>
<p>In case the result of this little test surprises you, here is what happened: When executing 'var varB = varA;' you are not simply copying the value of variable 'varA', you are actually creating a reference to it. So if we would want to port this snippet to PHP, it would look like this:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$varA</span> = <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st0">'Thinking'</span><span class="br0">&#41;</span>;<br />
<span class="re0">$varB</span> = &amp;<span class="re0">$varA</span>;<br />
<br />
<span class="co1">// Push PHP at the end of array varB</span><br />
<a href="http://www.php.net/array_push"><span class="kw3">array_push</span></a><span class="br0">&#40;</span><span class="re0">$varB</span>, <span class="st0">'PHP'</span><span class="br0">&#41;</span>;<br />
<br />
<span class="co1">// Prints: Array ( [0] =&gt; Thinking [1] =&gt; PHP )</span><br />
<a href="http://www.php.net/print_r"><span class="kw3">print_r</span></a><span class="br0">&#40;</span><span class="re0">$varA</span><span class="br0">&#41;</span>;</div>
<p>So in case you actually wanted to create a copy of varA, this is how to do it in JS:</p>
<div class="clear"></div>
<div class="code debuggable_sh_js" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">var</span> varA = <span class="br0">&#91;</span><span class="st0">'Thinking'</span><span class="br0">&#93;</span>;<br />
<br />
<span class="co1">// Clone the array</span><br />
<span class="kw2">var</span> varB = <span class="kw2">new</span> Array<span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw2">var</span> i=<span class="nu0">0</span>; i&lt;varA.<span class="me1">length</span>; i++<span class="br0">&#41;</span><br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; varB<span class="br0">&#91;</span>i<span class="br0">&#93;</span> = varA<span class="br0">&#91;</span>i<span class="br0">&#93;</span>;<br />
<span class="br0">&#125;</span><br />
<br />
varB.<span class="me1">push</span><span class="br0">&#40;</span><span class="st0">'PHP'</span><span class="br0">&#41;</span>;<br />
<br />
<span class="co1">// Logs: [&quot;Thinking&quot;]</span><br />
console.<span class="me1">log</span><span class="br0">&#40;</span>varA<span class="br0">&#41;</span>;<br />
<br />
<span class="co1">// Logs [&quot;Thinking&quot;, &quot;PHP&quot;]</span><br />
console.<span class="me1">log</span><span class="br0">&#40;</span>varB<span class="br0">&#41;</span>;</div>
<p>Of course there are ways to do this in a more elegant way by creating a clone function, but let's keep it simple for now. Let's go back to what I said at the beginning of the array section: "Javscript does not support associative arrays". Yes, this is really a bummer at first. But the workaround is fairly simple, all it takes is to use objects instead:</p>
<h3>Objects</h3>
<p>One of the things that really have caused my to like javascript a lot recently is the great flexibility it offers. This really shows when working with objects the first time. In PHP you think of an object as an instance of a specific (fixed) class that basically consists of functions and properties. Well this is true for objects in JS as well. They have functions and properties. Where JS is different is the way you create an object. Unlike PHP where you define types of objects as classes, in javascript you often create objects on the fly. Another important point is that JS objects often do behave like associative arrays in php as well (but they are usually called hashes in JS).</p>
<p>Just consider the following example:</p>
<div class="clear"></div>
<div class="code debuggable_sh_js" style="white-space: wrap;white-space: nowrap;">
<span class="co1">// same as var myJsObject= {};</span><br />
<span class="kw2">var</span> myJsObject = <span class="kw2">new</span> Object<span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
<br />
<span class="co1">// This looks like a typical associative array in PHP</span><br />
myJsObject<span class="br0">&#91;</span><span class="st0">'varA'</span><span class="br0">&#93;</span> = <span class="st0">'Thinking'</span>;<br />
myJsObject<span class="br0">&#91;</span><span class="st0">'varB'</span><span class="br0">&#93;</span> = <span class="st0">'PHP'</span>;<br />
<br />
<span class="co1">// But what's that? We are attaching a function to the object on the fly</span><br />
myJsObject<span class="br0">&#91;</span><span class="st0">'ThinkingWhat'</span><span class="br0">&#93;</span> = <span class="kw2">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="co1">// 'this' refers to the class this function resides in here. However this is not always the case in JS, more about this later.</span><br />
&nbsp; &nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">varA</span>, <span class="kw1">this</span>.<span class="me1">varB</span><span class="br0">&#41;</span>;<br />
<span class="br0">&#125;</span><br />
<br />
<span class="co1">// Call the ThinkingWhat function</span><br />
myJsObject<span class="br0">&#91;</span><span class="st0">'ThinkingWhat'</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
<br />
<span class="co1">// is the same as</span><br />
myJsObject.<span class="me1">ThinkingWhat</span><span class="br0">&#40;</span><span class="br0">&#41;</span>;</div>
<p>Ok, I hope you are not too confused right now. You basically have to accept that in Javascript there is no difference between the object['propery'] and object.property notation. Another good example would be the little Array snippet we've already used:</p>
<div class="clear"></div>
<div class="code debuggable_sh_js" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">var</span> varA = <span class="br0">&#91;</span><span class="st0">'Thinking'</span><span class="br0">&#93;</span>;<br />
<span class="kw2">var</span> varB = varA;<br />
<br />
<span class="co1">// Instead of varB.push('PHP') we can write:</span><br />
varB<span class="br0">&#91;</span><span class="st0">'push'</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="st0">'PHP'</span><span class="br0">&#41;</span>;<br />
<br />
<span class="co1">// Display the results: [&quot;Thinking&quot;, &quot;PHP&quot;]</span><br />
console.<span class="me1">log</span><span class="br0">&#40;</span>varA<span class="br0">&#41;</span>;</div>
<p>Now that you know this little JS secret, it's time to show you another one. The object we created on the fly a second ago, could have equally well been written like this:</p>
<div class="clear"></div>
<div class="code debuggable_sh_js" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">var</span> myJsObject = <br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; varA: <span class="st0">'Thinking'</span>,<br />
&nbsp; &nbsp; varB: <span class="st0">'PHP'</span>,<br />
&nbsp; &nbsp; ThinkingWhat: <span class="kw2">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">varA</span>, <span class="kw1">this</span>.<span class="me1">varB</span><span class="br0">&#41;</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
<span class="br0">&#125;</span>;</div>
<p>The two syntaxes are equal to one another. One of the most popular usages of the second syntax right now is <a href="http://en.wikipedia.org/wiki/JSON">JSON</a>. So if you didn't know what JSON was so far, it's simply sending javascript objects via AJAX and then eval'ing them on the client site so they can directly be accessed. However, please keep in mind that in JSON you always have to put quotes around object properties (!).</p>
<h3>Functions</h3>
<p>Alright, even if you've not done much JS coding so far, you've probably seen a simple JS function before:</p>
<div class="clear"></div>
<div class="code debuggable_sh_js" style="white-space: wrap;white-space: nowrap;">
<span class="co1">// Logs: ThinkingPHP</span><br />
console.<span class="me1">log</span><span class="br0">&#40;</span>ThinkingWhat<span class="br0">&#40;</span><span class="st0">'PHP'</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
<br />
<span class="co1">// A simple function with one argument</span><br />
<span class="kw2">function</span> ThinkingWhat<span class="br0">&#40;</span>what<span class="br0">&#41;</span><br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="co1">// Return 'Thinking' plus the contents of the what argument</span><br />
&nbsp; &nbsp; <span class="kw1">return</span> <span class="st0">'Thinking'</span>+what;<br />
<span class="br0">&#125;</span></div>
<p>Now before I'll continue and reveal javascript's dark & nasty secret about functions (don't be scared, it's actually cool once you know how to deal with it), I want to show you a little bit more about passing arguments:</p>
<div class="clear"></div>
<div class="code debuggable_sh_js" style="white-space: wrap;white-space: nowrap;">
<span class="co1">// Logs: ThinkingPHP</span><br />
console.<span class="me1">log</span><span class="br0">&#40;</span>ThinkingWhat<span class="br0">&#40;</span><span class="st0">'PHP'</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
<br />
<span class="co1">// Logs: Thinkungundefined (and display no error)</span><br />
<span class="co1">// This means: Unlike in PHP, all function arguments in JS are optional on default (!)</span><br />
console.<span class="me1">log</span><span class="br0">&#40;</span>ThinkingWhat<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
<br />
<span class="co1">// A simple function with one argument</span><br />
<span class="kw2">function</span> ThinkingWhat<span class="br0">&#40;</span>what<span class="br0">&#41;</span><br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="co1">// Return 'Thinking' plus the contents of the what argument</span><br />
&nbsp; &nbsp; <span class="kw1">return</span> <span class="st0">'Thinking'</span>+what;<br />
<span class="br0">&#125;</span><br />
<br />
<span class="co1">// Logs: ThinkingPHP</span><br />
console.<span class="me1">log</span><span class="br0">&#40;</span>FreeThinking<span class="br0">&#40;</span><span class="st0">'Thinking'</span>, <span class="st0">'PHP'</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
<br />
<span class="kw2">function</span> FreeThinking<span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="co1">// In all functions the arguments object is available. It's an array </span><br />
&nbsp; &nbsp; <span class="kw1">return</span> arguments<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>+arguments<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;<br />
<span class="br0">&#125;</span></div>
<p>Alright, this should be simple to understand. The two main lessons learned here are that in JS all function arguments are optional on default, and you always have access to an arguments object inside a function. You can think of it similiar to "$arguments = func_get_args()" in PHP. Now one thing you might miss is the ability to assign default values to parameters (like you do with optional parameters in PHP). Here is what to do:</p>
<div class="clear"></div>
<div class="code debuggable_sh_js" style="white-space: wrap;white-space: nowrap;">
<span class="co1">// Logs: ThinkingPHP</span><br />
console.<span class="me1">log</span><span class="br0">&#40;</span>ThinkingWhat<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
<br />
<span class="co1">// Logs: ThinkungJS</span><br />
console.<span class="me1">log</span><span class="br0">&#40;</span>ThinkingWhat<span class="br0">&#40;</span><span class="st0">'JS'</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
<br />
<span class="co1">// A simple function with one argument</span><br />
<span class="kw2">function</span> ThinkingWhat<span class="br0">&#40;</span>what<span class="br0">&#41;</span><br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="co1">// If what doesn't contain a value (that would evaluate to true) then assign 'PHP' to it</span><br />
&nbsp; &nbsp; what = what || <span class="st0">'PHP'</span>;<br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; <span class="co1">// Return 'Thinking' plus the contents of the what argument</span><br />
&nbsp; &nbsp; <span class="kw1">return</span> <span class="st0">'Thinking'</span>+what;<br />
<span class="br0">&#125;</span></div>
<p>I really like the elegance this has. I know I often find myself writing if statements for checking empty variables and overwriting their contents with something else in PHP, so this is definitely a pretty cool feature of the JS language.</p>
<p>Ok, do you still remember me talking about the JS dirty little secret about functions? Well here it comes: The things what we just have looked at as 'functions' are actually a little bit more in JS. They are fully qualified class definitions (and btw. the only way to create them). This is probably the point were PHP developers feel odd and I agree that this takes a while to get used to. Nevertheless, check out this example to see how your innocent little function becomes a class:</p>
<div class="clear"></div>
<div class="code debuggable_sh_js" style="white-space: wrap;white-space: nowrap;">
<span class="co1">// Defines a class named Blog</span><br />
<span class="kw2">function</span> Blog<span class="br0">&#40;</span>url, author<span class="br0">&#41;</span><br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">url</span> &nbsp; &nbsp;= url;<br />
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">author</span> = author;<br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">visit</span> = <span class="kw2">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Redirects the user to the url of this blog</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; window.<span class="me1">location</span>.<span class="me1">href</span> = <span class="kw1">this</span>.<span class="me1">url</span>;<br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
<span class="br0">&#125;</span><br />
<br />
<span class="co1">// Creates an instance of the Blog class called ThinkingPHP</span><br />
<span class="kw2">var</span> ThinkingPHP = <span class="kw2">new</span> Blog<span class="br0">&#40;</span><span class="st0">'http://www.thinkingphp.org'</span>, <span class="st0">'Felix Geisendörfer'</span><span class="br0">&#41;</span>;<br />
<br />
<span class="co1">// Logs: 'http://www.thinkingphp.org'</span><br />
console.<span class="me1">log</span><span class="br0">&#40;</span>ThinkingPHP.<span class="me1">url</span><span class="br0">&#41;</span>;<br />
<br />
<span class="co1">// Navigates to 'http://www.thinkingphp.org'</span><br />
ThinkingPHP.<span class="me1">visit</span><span class="br0">&#40;</span><span class="br0">&#41;</span>;</div>
<p>Now as you can see the Blog function now doesn't just serve as a static function any longer. It has become the constructor and wrapper for the class Blog that contains two member variables (url and author) as well as one function (visit).</p>
<p>One of the most powerful JS features related to classes is the prototype property. It is a list of all members any given class has and can also be used to modify already created classes (and all instances of it). You've probably heard about the <a href="http://prototype.conio.net/">Prototype framework</a> which makes extensive usage of this feature by adding new functions to already existing DOM element classes. Personally I don't use this feature very often and prefer to not modify existing objects (that's also one of the reasons I prefer <a href="http://jquery.com/">jQuery</a> over Prototype), but here is how to work with the prototype property regardless of that:</p>
<div class="clear"></div>
<div class="code debuggable_sh_js" style="white-space: wrap;white-space: nowrap;">
<span class="co1">// Defines a class named Blog</span><br />
<span class="kw2">function</span> Blog<span class="br0">&#40;</span>url, author<span class="br0">&#41;</span><br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">url</span> &nbsp; &nbsp;= url;<br />
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">author</span> = author;<br />
<span class="br0">&#125;</span><br />
<br />
<span class="co1">// Creates an instance of the Blog class called ThinkingPHP</span><br />
<span class="kw2">var</span> ThinkingPHP = <span class="kw2">new</span> Blog<span class="br0">&#40;</span><span class="st0">'http://www.thinkingphp.org'</span>, <span class="st0">'Felix Geisendörfer'</span><span class="br0">&#41;</span>;<br />
<br />
<span class="co1">// This adds the function getAuthorFirstName to *all* Blog classes (also already created instances like ThinkingPHP)</span><br />
Blog.<span class="me1">prototype</span>.<span class="me1">getAuthorFirstName</span> = <span class="kw2">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="co1">// Splits the author string at ' ' and returns the first value of that array</span><br />
&nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">this</span>.<span class="me1">author</span>.<span class="me1">split</span><span class="br0">&#40;</span><span class="st0">' '</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>;<br />
<span class="br0">&#125;</span><br />
<br />
<span class="co1">// Logs: 'Felix'</span><br />
console.<span class="me1">log</span><span class="br0">&#40;</span>ThinkingPHP.<span class="me1">getAuthorFirstName</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;</div>
<p>As you can see, even so we added the getAuthorFirstName function after we created the ThinkingPHP instance of the Blog class, it's still available in the instance of it. If you wonder of the practical usage of this: I find this feature pretty useful to modify 3rd party JS classes without actually touching the source of them. Because just like you can add class members using their prototype property, you can also overwrite existing ones.</p>
<h3>This was part I</h3>
<p>Alright, this was the first part of my 'A PHP developers guide to JavaScript' series. I hope you guys enjoyed it and I was able to communicate the most important aspects of JS in an easy-to-understand manner. I'm sorry it took me so long to publish this, but writing this required several hours so I had to split it up over several days. If you find errors, have questions or want to suggest anything I'd appreciate a comment ; ).</p>
<p>For Part II, I plan to cover things like scope, events, some JS coding techniques and will probably also start talking about jQuery a little bit. Meanwhile I'd recommend everybody to read Sergio Pereira's <a href="http://www.sergiopereira.com/articles/advjs.html">Quick guide to somewhat advanced JavaScript</a> which I think has a lot of good information in it and is a little bit more detailed then my post on here.</p>
<p>Oh and before I forget: A Happy New Year to all of you! (Sorry I didn't care enough about Christmas to send out a greeting ^^). And also Happy Birthday to Daniel's <a href="http://cakebaker.42dh.com/">cakebaker blog</a> that <a href="http://cakebaker.42dh.com/2006/12/29/cakebaker-is-one-year-old/">just turned 1 year old</a>!</p>
<p>-- Felix Geisendörfer aka the_undefined<br />
<img style="display: none;" src="http://debuggable.com/posts/tick/480f4dd6-8a0c-4f43-b2ba-474dcbdd56cb"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fa-php-developers-guide-to-javascript-part-i%3A480f4dd6-8a0c-4f43-b2ba-474dcbdd56cb &amp;title=A+PHP+developers+guide+to+JavaScript+-+Part+I';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fa-php-developers-guide-to-javascript-part-i%3A480f4dd6-8a0c-4f43-b2ba-474dcbdd56cb';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fa-php-developers-guide-to-javascript-part-i%3A480f4dd6-8a0c-4f43-b2ba-474dcbdd56cb&amp;title=A+PHP+developers+guide+to+JavaScript+-+Part+I&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fa-php-developers-guide-to-javascript-part-i%3A480f4dd6-8a0c-4f43-b2ba-474dcbdd56cb&amp;title=A+PHP+developers+guide+to+JavaScript+-+Part+I';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>

	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/a-php-developers-guide-to-javascript-part-i:480f4dd6-8a0c-4f43-b2ba-474dcbdd56cb">18 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/a-php-developers-guide-to-javascript-part-i:480f4dd6-8a0c-4f43-b2ba-474dcbdd56cb#CommentAddForm">Add Comment</a>	</div>
	</div>
<div class="paging">
	<a href="/posts/index/page:52" class="prev">&laquo; Previous</a> <span><a href="/posts/index/page:49">49</a></span> | <span><a href="/posts/index/page:50">50</a></span> | <span><a href="/posts/index/page:51">51</a></span> | <span><a href="/posts/index/page:52">52</a></span> | <span class="current">53</span> | <span><a href="/posts/index/page:54">54</a></span> | <span><a href="/posts/index/page:55">55</a></span> | <span><a href="/posts/index/page:56">56</a></span> | <span><a href="/posts/index/page:57">57</a></span> <a href="/posts/index/page:54" class="next">Next &raquo;</a></div>	
</div>
<div class="grid_4 prefix_1 omega" id="sidebar">
	<cake:nocache>
			</cake:nocache>

	<h3>RSS Feeds</h3>
	<div id="bug">
		<img src="/img/rss_bug.png" alt="" />	</div>
	<div class="rss">
		<p class="bug-message"></p>
		<a href="http://feeds.feedburner.com/debuggable">Blog RSS</a><br/>
		<a href="http://feeds.feedburner.com/debuggable-comments">Comments RSS</a><br/><br/>
		<img width="88" height="26" alt="" style="border: 0pt none ;" src="http://feeds.feedburner.com/~fc/debuggable?bg=FF9933&amp;fg=444444&amp;anim=0"/>
		<div class="clear"></div>
	</div>

	<h3>Recent Posts</h3>
	<ul>
<li class=""><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb">Releasing node-mysql 2.0.0-alpha</a></li><li class=""><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb">How to write jQuery plugins</a></li><li class=""><a href="/posts/vim-workshop-in-berlin-april-20:4f702b83-ce24-429c-9403-0e39cbdd56cb">Vim Workshop in Berlin (April 20)</a></li><li class=""><a href="/posts/npm-an-intervention:4f44dd25-a114-4361-ada1-6cefcbdd56cb">NPM - An intervention</a></li><li class="active"><a href="/posts/testing-node-js-modules-with-travis-ci:4ec62298-aec4-4ee3-8b5a-2c96cbdd56cb">Testing node.js modules with Travis CI</a></li><li class=""><a href="/posts/private-npm-modules:4e68cc7d-1ac4-42d9-995a-343dcbdd56cb">Private npm modules</a></li></ul>
	<h3>Archive</h3>
	<p class="small align">
		<strong>443 Posts</strong>, <strong>4608 Comments</strong><br /><br />
		We are on air since 2006. Take a tour through the
		<a href="/posts/archive">blog archive</a>.
	</p>
	<div class="search">
	<form id="PostSearchForm" method="post" action="/posts/search"><fieldset style="display:none;"><input type="hidden" name="_method" value="POST" /></fieldset><input name="data[Post][keywords]" type="text" value="" id="PostKeywords" /><input type="submit" class="button" value="Search" /></form>	<div class="clear"></div>
</div>
	<h3>Recent Comments</h3>
	<div class="recent-comments">
		<div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd32b85-220c-4fc8-84b2-378fcbdd56cb">William: thanks, fixed ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=b47010beec892f11619d1e81f0c94f11&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd30119-06fc-4712-aecd-7fa5cbdd56cb">Hi Felix,

The Upgra ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=99b59e8a9cfe2c5575f0fa90f7f30307&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f99a4a2-9ad8-4476-b208-611acbdd56cb">Maybe you can write so ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=8364689a1eefb5eceb6a4f38bbf95731&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f9651b9-eb88-4096-94c1-0fc2cbdd56cb">This is very nice plug ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=7e3d69d16d3b845e89198512355b2ac9&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f8bb75a-96cc-4197-8e93-7c63cbdd56cb">Nice article!

Somet ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f83326b-8c28-43fc-b70d-097ecbdd56cb">That&#039;s fine ognian, th ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=994516a664c2bdc728d18c47e935bc14&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f832a25-5818-4d38-9e39-097ecbdd56cb">Really nice work! I wa ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c15ca-c7c4-48e3-a4db-27decbdd56cb">@Jörn: Sorry, thought  ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d5d83832be2b6c70d1968635f68a1b4a&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c11aa-6f9c-448c-abdb-2066cbdd56cb">Thanks didn&#039;t quite un ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7bf934-d4e8-4885-9a2c-7a93cbdd56cb">Well you could expose  ..</a></div><div class="clear_left"></div>	</div>
	<div class="clear_left"></div>
	<h3>Keep an eye on</h3>
<ul class="links external">
	<li><a href="http://transloadit.com" title="Video encoding, image resizing and more for your web or mobile app">Transloadit</a></li><li><a href="http://tus.io" title="Resumable file uploading, upload progress bar, faster upload speed">tus - resumable file upload protocol</a></li><li><a href="http://kevin.vanzonneveld.net/">Kevin van Zonneveld</a></li><li><a href="http://www.littlehart.net/atthekeyboard/">Chris Hartjes</a></li><li><a href="http://mark-story.com">Mark Story</a></li><li><a href="http://www.webbosaurus.de">Webbosaurus</a></li></ul>
	<a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number' title='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'><img src='http://static.jsconf.us/promotejshs.png' height='150' width='180' alt='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'/></a>
</div>

						<div class="clear">&nbsp;</div>
		</div>

		<div id="footer">
			<div class="container_16">
				<ul id="footer_navigation">
					<ul>
<li class="active"><a href="/blog">Blog</a></li><li class=""><a href="/">About</a></li></ul>				</ul>
				<p>&copy; 2008 - 2015, Debuggable Ltd. All rights reserved.
				<i>Designed by <a href="http://www.fluidcore.net" target="_blank">fluidCORE</a>.</i>
			</div>
		</div>
	</div>
	<script type="text/javascript" src="/js/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/5627ea2806458e56fb8a5f4b231a44c2.php"></script><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-3306079-3']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script');
ga.src = ('https:' == document.location.protocol ?
    'https://ssl' : 'http://www') +
    '.google-analytics.com/ga.js';
ga.setAttribute('async', 'true');
document.documentElement.firstChild.appendChild(ga);
})();
</script></body>
</html>
