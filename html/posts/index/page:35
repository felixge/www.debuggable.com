<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
	<title>Blog &raquo; Debuggable - Node.js Consulting</title>

	<link href="http://feeds.feedburner.com/debuggable" type="application/rss+xml" rel="alternate" title="RSS 2.0" />	<link rel="pingback" href="Debuggable.com/pingback" />
	<link rel="stylesheet" type="text/css" href="/css/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/4026ee2275e22a4e5ec8aea13747c557.php" /></head>
	<body>
		<div class="container_16">
			<h1 id="logo-text"><a href="/">debuggable</a></h1>
			<ul id="navigation">
				<ul>
<li class="active"><a href="/blog">Blog</a></li><li class=""><a href="/">About</a></li></ul>			</ul>
			<div class="clear">&nbsp;</div>

			<div id="blueprint">
				<a href="/contact" class="contact">Contact Us</a>			</div>

			<div class="clear">&nbsp;</div>
			<div class="grid_11 alpha" id="content">
	<cake:nocache>
			<div class="messages empty"></div>
	</cake:nocache>
	<div class="paging">
	<a href="/posts/index/page:34" class="prev">&laquo; Previous</a> <span><a href="/posts/index/page:31">31</a></span> | <span><a href="/posts/index/page:32">32</a></span> | <span><a href="/posts/index/page:33">33</a></span> | <span><a href="/posts/index/page:34">34</a></span> | <span class="current">35</span> | <span><a href="/posts/index/page:36">36</a></span> | <span><a href="/posts/index/page:37">37</a></span> | <span><a href="/posts/index/page:38">38</a></span> | <span><a href="/posts/index/page:39">39</a></span> <a href="/posts/index/page:36" class="next">Next &raquo;</a></div>
	<div class="post">
	<h2><a href="/posts/running-tests-from-the-commandline-in-cakephp:4821f908-da38-4987-909a-25c74834cda3">Running Tests from The Commandline in CakePHP</a></h2>	<div class="posted-on">
		<p>Posted on 8/5/08 by 
		<a href="/tim">Tim Koschützki</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/tim_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p>Hey folks,</p>
<p>I have contributed some new cool feature for you to the cake branch. A testsuite shell that allows you to run your tests from the commandline. It allows you to run all of the following:</p>
<ul>
<li>All core testcases at once</li>
<li>All core test groups</li>
<li>Each core test case individually</li>
<li>All application-specific testcases at once</li>
<li>All application-specific test groups</li>
<li>Each core test case individually</li>
</ul>
<p>It also supports plugins, which means you can run plugin cases and groups. </p>
<h3>How does it work?</h3>
<p>Actually it's very simple. You just call</p>
<pre class="terminal">
./cake testsuite category test_type file
</pre>
<p><strong>Category</strong> can either be "core", "app" or the name of a plugin.</p>
<p><strong>The Test Type</strong> can be "case", "group" or "all".</p>
<p><strong>The file</strong> is the name of the file with the folder prefix, but without the test.php / group.php suffix. Examples are: models/my_model, controllers/my_controller, etc.</p>
<h3>Can you show me examples of valid calls to the testshell?</h3>
<p>Yes, of course! Although I am going to directly copy this from the help screen from the testshell. Why should I reinvent the wheel? : P</p>
<pre class="terminal">
./cake testsuite app all
./cake testsuite core all
</pre>
<pre class="terminal">
./cake testsuite app case behaviors/debuggable
./cake testsuite app case models/my_model
./cake testsuite app case controllers/my_controller
</pre>
<pre class="terminal">
./cake testsuite core case file
./cake testsuite core case router
./cake testsuite core case set
</pre>
<pre class="terminal">
./cake testsuite app group mygroup
./cake testsuite core group acl
./cake testsuite core group socket
</pre>
<pre class="terminal">
./cake testsuite bugs case models/bug  // for the plugin 'bugs' and its test case 'bug'
./cake testsuite bugs group bug  // for the plugin bugs and its test group 'bug'
./cake testsuite bugs_me case models/bug  // for the plugin 'bugs_me' and its test case 'bug'
./cake testsuite bugs_me group bug  // for the plugin bugs_me and its test group 'bug'
</pre>
<h3>What does the output look like?</h3>
<pre class="terminal">
Welcome to CakePHP v1.2.0.6311 beta Console
---------------------------------------------------------------
App : app
Path: /Applications/MAMP/htdocs/cakephp/branch/app
---------------------------------------------------------------
CakePHP Test Shell
---------------------------------------------------------------
Running core case router
Individual test case: libs/router.test.php
1/1 test cases complete: 190 passes.

Macintosh-6:branch dakangelbge$ 
</pre>
<pre class="terminal">
elcome to CakePHP v1.2.0.6311 beta Console
---------------------------------------------------------------
App : app
Path: /Applications/MAMP/htdocs/cakephp/branch/app
---------------------------------------------------------------
CakePHP Test Shell
---------------------------------------------------------------
Running app all
All App Tests
2/2 test cases complete: 6 passes.

Macintosh-6:branch dakangelbge$
</pre>
<p>Got any questions? </p>
<p>PS: There is some hidden feature in it, which I am not going to reveal until another thing got written about first. ; ) Anybody who knows already please do not spoil the fun. : P</p>
<p><img style="display: none;" src="http://debuggable.com/posts/tick/4821f908-da38-4987-909a-25c74834cda3"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Frunning-tests-from-the-commandline-in-cakephp%3A4821f908-da38-4987-909a-25c74834cda3 &amp;title=Running+Tests+from+The+Commandline+in+CakePHP';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Frunning-tests-from-the-commandline-in-cakephp%3A4821f908-da38-4987-909a-25c74834cda3';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Frunning-tests-from-the-commandline-in-cakephp%3A4821f908-da38-4987-909a-25c74834cda3&amp;title=Running+Tests+from+The+Commandline+in+CakePHP&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Frunning-tests-from-the-commandline-in-cakephp%3A4821f908-da38-4987-909a-25c74834cda3&amp;title=Running+Tests+from+The+Commandline+in+CakePHP';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>

	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/running-tests-from-the-commandline-in-cakephp:4821f908-da38-4987-909a-25c74834cda3">14 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/running-tests-from-the-commandline-in-cakephp:4821f908-da38-4987-909a-25c74834cda3#CommentAddForm">Add Comment</a>	</div>
	</div>
<div class="post">
	<h2><a href="/posts/unit-testing-in-cakephp-part-1---introduction-to-unit-testing:48102610-c5d0-4398-a010-76974834cda3">Unit Testing in CakePHP Part 1 - Introduction to Unit Testing</a></h2>	<div class="posted-on">
		<p>Posted on 6/5/08 by 
		<a href="/tim">Tim Koschützki</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/tim_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p>So you want to read up on Unit Testing in CakePHP? That is great, testing can be such a help in finding bugs. It's a shame that so few clients dedicate a budget to it and then expect their application that contains a ton of complicated code to be stable nevertheless.</p>
<p>Surprisingly, many people do not know yet what unit testing is. In this first part of a whole series you can get a good grasp of what it is and is not.</p>
<h3>1.1 Introduction to Unit Testing</h3>
<p>According to Wikipedia, unit testing is an automated procedure to ensure your software units work properly. Units are the smallest testable parts of an application. Meaning, they are procedures or functions in procedural programming and object methods in object oriented programming. Classes are also commonly referred to as being the units of the system. Quite a few JUnit (the first testing framework of the XUnit family - made for Java) folks do not like the term "Unit Testing" at all, because they think it is overused. They like to refer to Unit Testing as "Programmer Testing". No, we are not testing programmer here. But programmers are testing their own source code. To me it does not matter. Seriously, I could not care less. No matter what you think a unit is, you will understand what I am talking about here. For the sake of clarity, I will refer to it as "Unit Testing".</p>
<p>The idea behind unit testing is that once you have a unit that you think works, you set up a testcase where you specify some input to the unit and compare the result of your unit with your expected result. You know about the expected result, because you know what your unit is doing (or you should know it). Well, you better know what your unit is supposed to do, or else you should not do programming in the first place... ; ) Then you run the tests and the CakePHP/&laquo;insert your framework here&raquo; testsuite tells you if they passed or if not, with some graceful message where the error occured.</p>
<p>Now you have that testcase. Now you add testcases for t h a t input and this one. The advantage of this is that once you wrote the tests down they are there (cool, huh?) and you can hold on to them. There is no need anymore for you to open the browser and test everything manually again when you change your system. Instead, you add functionality, run the automated unit tests again, if they pass you are good to go, if they don't pass you broke something. Well, what if you broke something but your tests don't catch it? That's something that UT cannot do for you. You must make sure you have a good test coverage (<a href="http://en.wikipedia.org/wiki/Code_coverage">http://en.wikipedia.org/wiki/Code_coverage</a>) for UT to work very well for you. However, having not enough tests is still much better than having no tests, so....</p>
<p>Typically, the order of the running of the tests should not matter. There might be special cases, but in well over 90% it does not. This should also be your goal, too, to have two different problems if two test cases fail. Keep them all isolated and you will sleep well. For most tests there is also not much configuration to be done. You specify the input, your expected result, crank the handle and evaluate how well you have done. You should typically be able to group tests together, too. When you run these groups you can get a good overview over large components of your system.</p>
<p>If you use a framework - like CakePHP - you should also be able to run all tests to see how well your system works.</p>
<p>Unit Testing also tells you when you are done with your work. If you get a green bar (ie all tests are passing) you are done  (except if there are more tests to add, heh). If you get a red bar, you got work to do. Simple.</p>
<h3>1.2 So How Does It Work?</h3>
<p>Unit Testing generally works with assertions that take two parameters - at least most of them do. The first one is your known expected result and the second one is the output of your unit based on your input. The testsuite then compares the expected result with the output of your unit. The CakePHP Testsuite in its current state strictly relies on http://simpletest.org and thereby inherits SimpleTest's assertions. Let's have a look at them:</p>
<table>
<thead>
<tr>
<th>Assertion</th>
<th>What it does</th>
<th>Example</th>
</tr>
</thead</p>
<tbody>
<tr>
<td>assertTrue($x)</td>
<td>Fail if $x is false</td>
<td>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$this</span>-&gt;<span class="me1">assertTrue</span><span class="br0">&#40;</span><span class="nu0">1</span> == <span class="kw2">true</span><span class="br0">&#41;</span>;</div>
</td>
</tr>
<tr>
<td>assertFalse($x)</td>
<td>Fail if $x is true</td>
<td>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$this</span>-&gt;<span class="me1">assertFalse</span><span class="br0">&#40;</span><span class="nu0">1</span> === <span class="kw2">true</span><span class="br0">&#41;</span>;</div>
</td>
</tr>
<tr>
<td>assertNull($x)</td>
<td>Fail if $x is set</td>
<td>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$variable</span> = <span class="kw2">null</span>;<br />
<br />
&nbsp; <span class="re0">$this</span>-&gt;<span class="me1">assertNull</span><span class="br0">&#40;</span><span class="re0">$variable</span><span class="br0">&#41;</span>;</div>
</td>
</tr>
<tr>
<td>assertNotNull($x)</td>
<td>Fail if $x not set</td>
<td>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$variable</span> = <span class="st0">'something but not null'</span>;<br />
<br />
&nbsp; <span class="re0">$this</span>-&gt;<span class="me1">assertNotNull</span><span class="br0">&#40;</span><span class="re0">$variable</span><span class="br0">&#41;</span>;</div>
</td>
</tr>
<tr>
<td>assertIsA($x, $t)</td>
<td>Fail if $x is not the class or type $t</td>
<td>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$tim</span> = <span class="kw2">new</span> Person;<br />
&nbsp; <span class="re0">$this</span>-&gt;<span class="me1">assertIsA</span><span class="br0">&#40;</span><span class="re0">$tim</span>, <span class="st0">'Person'</span><span class="br0">&#41;</span>;</div>
</td>
</tr>
<tr>
<td>assertNotA($x, $t)</td>
<td>Fail if $x is of the class or type $t</td>
<td>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$tim</span> = <span class="kw2">new</span> Person;<br />
&nbsp; <span class="re0">$this</span>-&gt;<span class="me1">assertNotA</span><span class="br0">&#40;</span><span class="re0">$tim</span>, <span class="st0">'Animal'</span><span class="br0">&#41;</span>; <span class="co1">// or maybe I am? o_O</span></div>
</td>
</tr>
<tr>
<td>assertEqual($x, $y)</td>
<td>Fail if $x == $y is false</td>
<td>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$fahrenheit</span> = <span class="nu0">50</span>;<br />
&nbsp; <span class="re0">$celsius</span> = <span class="br0">&#40;</span><span class="nu0">5</span>/<span class="nu0">9</span><span class="br0">&#41;</span>*<span class="br0">&#40;</span><span class="re0">$fahrenheit</span><span class="nu0">-32</span><span class="br0">&#41;</span>;<br />
&nbsp; <span class="re0">$this</span>-&gt;<span class="me1">assertEqual</span><span class="br0">&#40;</span><span class="nu0">10</span>, <span class="re0">$celsius</span><span class="br0">&#41;</span>;</div>
</td>
</tr>
<tr>
<td>assertNotEqual($x, $y)</td>
<td>Fail if $x == $y is true</td>
<td>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$this</span>-&gt;<span class="me1">assertNotEqual</span><span class="br0">&#40;</span><span class="st0">'5'</span>, <span class="nu0">5</span><span class="br0">&#41;</span>; <span class="co1">// fails, they are equal but not identical</span></div>
</td>
</tr>
<tr>
<td>assertWithinMargin($x, $y, $m)</td>
<td>Fail if abs($x - $y) < $m is false</td>
<td>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$this</span>-&gt;<span class="me1">assertWithinMargin</span><span class="br0">&#40;</span><span class="nu0">10</span>, <span class="nu0">50</span>, <span class="nu0">60</span><span class="br0">&#41;</span>; <span class="co1">// passes</span><br />
<br />
&nbsp; <span class="re0">$this</span>-&gt;<span class="me1">assertWithinMargin</span><span class="br0">&#40;</span><span class="nu0">10</span>, <span class="nu0">50</span>, <span class="nu0">30</span><span class="br0">&#41;</span>; <span class="co1">// fails</span></div>
</td>
</tr>
<tr>
<td>assertOutsideMargin($x, $y, $m)</td>
<td>Fail if abs($x - $y) < $m is true</td>
<td>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$this</span>-&gt;<span class="me1">assertOutsideMargin</span><span class="br0">&#40;</span><span class="nu0">10</span>, <span class="nu0">50</span>, <span class="nu0">60</span><span class="br0">&#41;</span>; <span class="co1">// fails</span><br />
&nbsp; <span class="re0">$this</span>-&gt;<span class="me1">assertOutsideMargin</span><span class="br0">&#40;</span><span class="nu0">10</span>, <span class="nu0">50</span>, <span class="nu0">30</span><span class="br0">&#41;</span>; <span class="co1">// true</span></div>
</td>
</tr>
<tr>
<td>assertIdentical($x, $y)</td>
<td>Fail if $x == $y is false or a type mismatch</td>
<td>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$this</span>-&gt;<span class="me1">assertIdentical</span><span class="br0">&#40;</span><span class="nu0">0</span>, <span class="kw2">false</span><span class="br0">&#41;</span>; <span class="co1">// will fail since 0 is not false</span></div>
</td>
</tr>
<tr>
<td>assertNotIdentical($x, $y)</td>
<td>Fail if $x == $y is true and types match</td>
<td>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$this</span>-&gt;<span class="me1">assertIdentical</span><span class="br0">&#40;</span><span class="nu0">10</span>, <span class="nu0">100</span>/<span class="nu0">10</span>*<span class="nu0">5</span> - <span class="nu0">40</span><span class="br0">&#41;</span>;</div>
</td>
</tr>
<tr>
<td>assertReference($x, $y)</td>
<td>Fail unless $x and $y are the same variable</td>
<td>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$a</span> = <span class="nu0">5</span>;<br />
&nbsp; <span class="re0">$b</span> =&amp; <span class="re0">$a</span>;<br />
&nbsp; <span class="re0">$this</span>-&gt;<span class="me1">assertReference</span><span class="br0">&#40;</span><span class="re0">$a</span>, <span class="re0">$b</span><span class="br0">&#41;</span>;</div>
</td>
</tr>
<tr>
<td>assertClone($x, $y)</td>
<td>Fail unless $x and $y are identical copies, that means they are identical but not referenced</td>
<td>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$a</span> = <span class="nu0">5</span>;<br />
&nbsp; <span class="re0">$b</span> = <span class="nu0">5</span>;<br />
&nbsp; <span class="re0">$this</span>-&gt;<span class="me1">assertClone</span><span class="br0">&#40;</span><span class="re0">$a</span>, <span class="re0">$b</span><span class="br0">&#41;</span>; <span class="co1">// passes, 5 equals 5, but $a and $b are not references to each other</span></div>
</td>
</tr>
<tr>
<td>assertPattern($p, $x)</td>
<td>Fail unless the regex $p matches $x</td>
<td>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$this</span>-&gt;<span class="me1">assertPattern</span><span class="br0">&#40;</span><span class="st0">'/hello/i'</span>, <span class="st0">'Hello world'</span><span class="br0">&#41;</span>;</div>
</td>
</tr>
<tr>
<td>assertNoPattern($p, $x)</td>
<td>Fail if the regex $p matches $x</td>
<td>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$this</span>-&gt;<span class="me1">assertNoPattern</span><span class="br0">&#40;</span><span class="st0">'/heppo/i'</span>, <span class="st0">'Hello world'</span><span class="br0">&#41;</span>; <span class="co1">// passes</span></div>
</td>
</tr>
<tr>
<td>expectError($x)</td>
<td>Swallows any upcoming matching error</td>
<td>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<a href="http://www.php.net/trigger_error"><span class="kw3">trigger_error</span></a><span class="br0">&#40;</span><span class="st0">'Catastrophe'</span><span class="br0">&#41;</span>;<br />
<br />
&nbsp; <span class="re0">$this</span>-&gt;<span class="me1">expectError</span><span class="br0">&#40;</span><span class="br0">&#41;</span>;</div>
</td>
</tr>
<tr>
<td>assert($e)</td>
<td>Fail on failed expectation object $e; use SimpleTest's built in expectation objects to have fun here</td>
<td>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;"><span class="kw2">&lt;?php</span><br />
<span class="kw2">class</span> TestOfNetworking <span class="kw2">extends</span> UnitTestCase <span class="br0">&#123;</span><br />
<br />
&nbsp; &nbsp; &nbsp; ...<br />
&nbsp; &nbsp; &nbsp; <span class="kw2">function</span> assertValidIp<span class="br0">&#40;</span><span class="re0">$ip</span>, <span class="re0">$message</span> = <span class="st0">'%s'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$this</span>-&gt;<span class="me1">assert</span><span class="br0">&#40;</span><span class="kw2">new</span> ValidIp<span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="re0">$ip</span>, <span class="re0">$message</span><span class="br0">&#41;</span>; <span class="co1">// uses validIp expectation</span><br />
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
<br />
&nbsp; &nbsp; &nbsp; <span class="kw2">function</span> testGetValidIp<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$server</span> = <span class="kw2">&amp;new</span> Server<span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$this</span>-&gt;<span class="me1">assertValidIp</span><span class="br0">&#40;</span><br />
<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$server</span>-&gt;<span class="me1">getIp</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,<br />
<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'Server IP address-&gt;%s'</span><span class="br0">&#41;</span>;<br />
<br />
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br />
&nbsp; <span class="br0">&#125;</span><br />
<span class="kw2">?&gt;</span></div>
</td>
</tr>
<p></tbdoy><br />
</table</p>
<p>So, with the custom assert() function, mentioned last in the table, you can build your own assertions keeping your code really clean. The others should be straightforward. If not, head on over to http://simpletest.org and read the documentation there.</p>
<p>When any of these assertions fail, you will be presented an error message telling you which test failed, on which line and what the error is. What if you want to supply your own error messages - for example to better mark an often failing test? You can do that in simpletest pretty easily. Just append your custom message as the last parameter to the assertion:</p>
<p>$this->assertTrue(1, 'This should pass');</p>
<p>You will notice that it replaces the automatic error message. If you want to embed your custom message within the automatic one, use %s:</p>
<p>$this->assertTrue(1, 'This should pass: %s');</p>
<h3>1.2 A quick SimpleTest example</h3>
<p>Okay so before we are going to jump onto the cake test wagon let's look at a real world simpletest example. That way it will be easier for us to deal with cake's testsuite later.</p>
<p>So here is the problem:</p>
<p>You want to calculate the costs for a given trip (to a cakefest). You get: $flightPrice, $hotelCosts and expenses for food and drinks ($otherExpenses). You know you will need more money since gwoo (the president of the Cake Software foundation) will come along persuading you to do <a href="http://www.youtube.com/watch?v=M0ZRiTPgTR8">sling shot</a> (and yes we had a lot of fun at Cakefest in Orlando :]) although you are already a little drunk. So we take on a 10% buffer that we add to the sum. Our total expenses are:</p>
<p>Formula: $total = 110% of ($flightPrice + $hotelCosts + $otherExpenses)</p>
<p>So, we might end up with:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;"><span class="kw2">&lt;?php</span><br />
<span class="kw1">require_once</span><span class="br0">&#40;</span><span class="st0">'simpletest/unit_tester.php'</span><span class="br0">&#41;</span>; <span class="co1">// install simpletest into /vendors after you downloaded it from http://simpletest.org</span><br />
<span class="kw1">require_once</span><span class="br0">&#40;</span><span class="st0">'simpletest/reporter.php'</span><span class="br0">&#41;</span>;<br />
<br />
<a href="http://www.php.net/define"><span class="kw3">define</span></a><span class="br0">&#40;</span><span class="st0">'BUFFER_RATE'</span>, <span class="nu0">0.1</span><span class="br0">&#41;</span>;<br />
<span class="kw2">function</span> calcTravelExpenses<span class="br0">&#40;</span><span class="re0">$flightPrice</span>, <span class="re0">$hotelCosts</span>, <span class="re0">$otherExpenses</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="re0">$sum</span> = <span class="re0">$flightPrice</span> + <span class="re0">$hotelCosts</span> + <span class="re0">$otherExpenses</span>;<br />
&nbsp; <span class="re0">$sum</span> = <span class="br0">&#40;</span>BUFFER_RATE<span class="br0">&#41;</span> * <span class="re0">$sum</span>;<br />
<span class="br0">&#125;</span><br />
<br />
<span class="kw2">class</span> TestOfTravelExpenses <span class="kw2">extends</span> UnitTestCase <span class="br0">&#123;</span><br />
&nbsp; <span class="kw2">function</span> testExceededTravelExpenses<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="re0">$this</span>-&gt;<span class="me1">assertEqual</span><span class="br0">&#40;</span><span class="nu0">1320</span>, calcTravelExpenses<span class="br0">&#40;</span><span class="nu0">600</span>, <span class="nu0">400</span>, <span class="nu0">200</span><span class="br0">&#41;</span>, <span class="st0">'Okay so this is a pretty exciting test %s message end'</span><span class="br0">&#41;</span>;<br />
&nbsp; <span class="br0">&#125;</span><br />
<span class="br0">&#125;</span><br />
<br />
<span class="re0">$test</span> = <span class="kw2">&amp;new</span> TestOfTravelExpenses<span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />
<span class="re0">$test</span>-&gt;<span class="me1">run</span><span class="br0">&#40;</span><span class="kw2">new</span> HtmlReporter<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />
<span class="kw2">?&gt;</span></div>
<p>When you run this you see you get a red bar with the message that "Integer" differs from "NUll". So 1320 is obviously an integer and the output of our function is NULL. Uh oh, okay, so there is no return statement! Let's add it:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">function</span> calcTravelExpenses<span class="br0">&#40;</span><span class="re0">$flightPrice</span>, <span class="re0">$hotelCosts</span>, <span class="re0">$otherExpenses</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; <span class="re0">$sum</span> = <span class="re0">$flightPrice</span> + <span class="re0">$hotelCosts</span> + <span class="re0">$otherExpenses</span>;<br />
&nbsp; <span class="re0">$sum</span> = <span class="br0">&#40;</span>BUFFER_RATE<span class="br0">&#41;</span> * <span class="re0">$sum</span>;<br />
&nbsp; <span class="kw1">return</span> <span class="re0">$sum</span>; <span class="co1">// here</span><br />
<span class="br0">&#125;</span></div>
<p>Now the value is not quite right. Ah okay, because we are taking 10% of the sum instead of 110%:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$sum</span> = <span class="br0">&#40;</span><span class="nu0">1</span>+BUFFER_RATE<span class="br0">&#41;</span> * <span class="re0">$sum</span>;</div>
<p>Green bar! Now that's a great feeling right? We can do all sorts of crazy <a href="http://debuggable.com/posts/what-is-refactoring:480f4dfd-f130-4e25-a1bd-4d98cbdd56cb">refactorings</a> now to our little function and still we will see if it works or not. And all of that automagically! Wohoo! Right, so what are the benefits of all this?</p>
<h3>1.3 Benefits of Unit Testing</h3>
<p>1. Unit Testing allows us to <a href="http://debuggable.com/posts/what-is-refactoring:480f4dfd-f130-4e25-a1bd-4d98cbdd56cb">refactor</a> our code later with real confidence. If we break something and have plenty of tests there should be a test failing, we fix it up and the entire system should work again (that means all units independently of each other). Great!</p>
<p>2. It forces you to think about what your code is really supposed to do. You finally get rid of the script kiddy attitude that hacks something together fast and does not even lose a second on thinking if his unit even returns an integer or if there could not be a division by zero error. I am not sure how it happens, but you will think about the edge cases, the most important cases, automatically. It's so difficult to think about them without automated tests, but with UT you approach the problem from a more theoretical and mathematical side.</p>
<p>3. Automatic testing is faster than browser testing. Period.</p>
<p>4. UT provides living documentation. If you develop in a team with several people and someone wrote a unit without phpdoc comments and you have no idea what it does, you can frequent the tests for it. Understanding code from tests is ultra easy and fast and most of the time better than any discussion. You could even picture the code in your head (if you are smart enough) just looking at the tests.</p>
<p>5. It helps you separate interface from implementation. Code that uses your code works with your interface, that is the unit name and the parameter signature and your return type. If you don't change that you can do what you want in the unit implementation. It's so great because it gives you so much freedom. Also as long as the original tests still run, you ensure backwards compatibility of your code, too.</p>
<p>6. Make the CakePHP Core Team happy. Many people submit tickets to CakePHP to make us aware of bugs. That's a good thing. However, if more people submitted tests alongside their bugreports that would help even more.</p>
<p>There are plenty of other benefits..</p>
<h3>1.4 Limitations of Unit Testing</h3>
<p>1. UT as such does not prove there are no errors in your system. It is not a theoretical / mathematical prove that a particular unit is bug free. Yes it shows the presence of errors if you have good and enough tests. However, it does not show the absence of errors.</p>
<p>2. Besides that, unit testing tests the units of your system independently of each other (for the most part). So if your system suffers from performance problems or integration problems, unit testing will not catch them. Also it will not prove that your system is not vulnerable to any security attack from the outside.</p>
<p>3. What's more? Well, many people don't implement unit testing yet, because it takes a rigorous amount of discipline to do it consistently. Especially in a team environment with clients paying, tight deadlines and all sorts of other interruptions, testing seems to be the first thing to cut on. However, in the long term it will prove to be much more productive to do it. The drawback stays, though: You write extra code that does not add any "real" features to your application. Don't get me wrong - I love to do it, but I can partly understand the clients, too. Would be cool if you could throw in your two bits on this one.</p>
<p>Conclusion: Do it! No I mean try it out. And if you only implement ten tests in your application, you are still much better off than without any tests.</p>
<h3>1.5 Test-driven Development</h3>
<p>So, when do you write the tests? From what you have read so far, you must have the idea that you write the tests after you wrote the code. However, with that "interface-over-implementation" and that "think-about-it-before-you-start-it" benefits, wouldn't it be cool to write the tests before you write the code? Test-driven Development - also known as TDD - does that.</p>
<p>Essentially TDD is a software development technique consisting of short iterations where new tests covering the desired improvement or new functionality are written first. Then you implement the production code necessary to pass the tests. TDD helps a lot, to make your code design nice and to accommodate changes you refactor.</p>
<p>The availability of tests before actual development ensures rapid feedback after any change. Remember that green-bar-means-you-are-done and red-bar-means-work? TDD ultimately boils down to those.</p>
<p>TDD is actually a method of designing your software instead of testing it. Why? Because with TDD you REALLY think about the stuff you do before you do it. If you have a problem you cannot tackle, you write the simplest possible test, make it work, and go from there. As you write more tests and as you think about how people should use your code (ie, what your interface shall look like), you design your software well automatically. Yeah, it's not always that easy, but you get the idea.</p>
<p>In TDD you have a rough cycle that should take just minutes, if not seconds: </p>
<p>Add a test -> see it failing -> make it work -> see the green bar -> refactor -> still see the green bar - > add a test -> see it failing -> ...</p>
<h3>1.6 Mock Objects</h3>
<p>Mock Objects are objects that simulate real objects that would normally be difficult to construct or time consuming to set up for a test. The most common use of mock objects is the mocking of a database connection object.</p>
<p>Setting up a test database at the start of each test would slow testing to a crawl and would require the installation of the database engine and test data on the test machine. If the connection can be simulated you can return data of your choosing. By that you not only win on the pragmatics of testing, but can also feed your code spurious data to see how it responds. You could simulate databases being down or other extremes without having to create a broken database for real. In other words, you get greater control of the test environment.</p>
<p>However, the mock objects not only play a part (by supplying chosen return values on demand) they are also sensitive to the messages sent to them (via expectations). By setting expected parameters for a method call they act as a guard that the calls upon them are made correctly. If expectations are not met they save you the effort of writing a failed test assertion by performing that duty on our behalf.</p>
<p>This can be very useful, because with standard Unit Testing you just test the interfaces of your objects. Mock Objects give you a means to test the inner implementation of them.</p>
<h3>1.7 Resources and Further Reading</h3>
<p>Process is at least as important as tools. The type of process that makes the heaviest use of a developer's testing tool is of course <a href="http://www.extremeprogramming.org/">Extreme Programming</a>. You should also read about <a href="http://www.agilealliance.com/articles/index">Agile Methodologies</a> in general. If you want to read up on test-driven Development, please do so <a href="http://www.testdriven.com/modules/news/">here</a>.</p>
<p>The original Unit Test Framework was <a href="http://www.junit.org/">JUnit</a>. Most people writing their own test tools seem to be cloning it in one way or the other. <a href="http://www.phpunit.de/">PHP Unit</a> is the XUnit ambassador for the PHP world. Together with <a href="http://simpletest.org">Simpletest</a> it forms the top testing framework in the php world.</p>
<h3>Wrap Up</h3>
<p>By now you should have an idea of what you can get out of Unit Testing and automated tests in general. I hope I have raised some questions or made controversial statements. As we discuss this article, some good things can be added to it I am sure.</p>
<p>In the next part of the series we will look at Cake's Testsuite.</p>
<p><img style="display: none;" src="http://debuggable.com/posts/tick/48102610-c5d0-4398-a010-76974834cda3"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Funit-testing-in-cakephp-part-1---introduction-to-unit-testing%3A48102610-c5d0-4398-a010-76974834cda3 &amp;title=Unit+Testing+in+CakePHP+Part+1+-+Introduction+to+Unit+Testing';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Funit-testing-in-cakephp-part-1---introduction-to-unit-testing%3A48102610-c5d0-4398-a010-76974834cda3';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Funit-testing-in-cakephp-part-1---introduction-to-unit-testing%3A48102610-c5d0-4398-a010-76974834cda3&amp;title=Unit+Testing+in+CakePHP+Part+1+-+Introduction+to+Unit+Testing&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Funit-testing-in-cakephp-part-1---introduction-to-unit-testing%3A48102610-c5d0-4398-a010-76974834cda3&amp;title=Unit+Testing+in+CakePHP+Part+1+-+Introduction+to+Unit+Testing';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>

	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/unit-testing-in-cakephp-part-1---introduction-to-unit-testing:48102610-c5d0-4398-a010-76974834cda3">19 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/unit-testing-in-cakephp-part-1---introduction-to-unit-testing:48102610-c5d0-4398-a010-76974834cda3#CommentAddForm">Add Comment</a>	</div>
	</div>
<div class="post">
	<h2><a href="/posts/fixturesshell-share-your-test-data:481c6041-392c-4757-85c1-7cc74834cda3">FixturesShell - Share your test data</a></h2>	<div class="posted-on">
		<p>Posted on 3/5/08 by 
		<a href="/felix">Felix Geisendörfer</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/felix_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p>Hey folks,</p>
<p>for some of the projects Tim and I recently got involved with I noticed that I needed a way to share a set of test data with the other people working on the project. The result is a simple shell leveraging CakePHP 1.2's fixtures. Usually those are used for unit testing your Models and Behaviors, but they also do a great job at sharing a common set of data within a project.</p>
<p>So if you're interested to try it, <a href="http://debuggable.com/open-source/fixtures-shell">check out the project page</a> and let me know what you think.</p>
<p>-- Felix Geisendörfer aka the_undefined<br />
<img style="display: none;" src="http://debuggable.com/posts/tick/481c6041-392c-4757-85c1-7cc74834cda3"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Ffixturesshell-share-your-test-data%3A481c6041-392c-4757-85c1-7cc74834cda3 &amp;title=FixturesShell+-+Share+your+test+data';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Ffixturesshell-share-your-test-data%3A481c6041-392c-4757-85c1-7cc74834cda3';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Ffixturesshell-share-your-test-data%3A481c6041-392c-4757-85c1-7cc74834cda3&amp;title=FixturesShell+-+Share+your+test+data&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Ffixturesshell-share-your-test-data%3A481c6041-392c-4757-85c1-7cc74834cda3&amp;title=FixturesShell+-+Share+your+test+data';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>

	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/fixturesshell-share-your-test-data:481c6041-392c-4757-85c1-7cc74834cda3">6 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/fixturesshell-share-your-test-data:481c6041-392c-4757-85c1-7cc74834cda3#CommentAddForm">Add Comment</a>	</div>
	</div>
<div class="post">
	<h2><a href="/posts/xhtml-is-a-joke:4819bf98-4978-4027-896e-2ea44834cda3">XHTML is a joke</a></h2>	<div class="posted-on">
		<p>Posted on 1/5/08 by 
		<a href="/felix">Felix Geisendörfer</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/felix_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p>Hey folks,</p>
<p>I don't know how often I had to discuss this with people over the past months, so let me say this once and for all:</p>
<blockquote><p>XHTML is a joke. It is an elitist trend against the very nature of the web and offers no advantages over HTML 4.01 strict!</p></blockquote>
<p>This is an old old discussion and there are <a href="http://www.webdevout.net/articles/beware-of-xhtml">great resources</a> that list all of the problems associated with using XHTML. All I want to address in this post are two problems I have with XHTML:</p>
<h3>1) Strict rendering is a STUPID idea</h3>
<p>I don't know if I am the only one that realizes this. But if all your favourite web sites were to be converted to XHTML strict most of them would be unusable half of the time because of tiny errors in views. XHTML promotes that <strong>the slightest mistake in your markup will cause your page to NOT RENDER!</strong> </p>
<p>To me this is the most ridiculous concept ever. The view / presentation is the least important layer in any application and XHTML says it should be able to completely crash your page. Give me a break, but this is madness.</p>
<p><strong>[Edit: 2008-05-02]</strong> When I say that the view is the least important layer than I mean that it should be most the forgiving layer because it does no business critical data processing.</p>
<p>Publishing content on the web should be easy for everybody. I am against anything raising the bar in that regard. Of course I wish MySpace never happened, but millions of people absolutely love the idea of expressing themselves in the most ridiculous ways. Heck, if I never had gotten into the web industry you can bet that I would have a 5mb MySpace page that brings any browser to its knees.</p>
<p>So let us come up with better standards, but please make them forgiving about mistakes within reasonable boundaries. The main reason we all use PHP (or any other dynamically typed language) is that we hate strict boundaries. We love flexibility in any form, and I strongly believe that flexible and forgiving standards are far superior in terms of enabling innovation compared to strict standards like XHTML.</p>
<h3>2) Presentation agnostic XHTML is an ILLUSION</h3>
<p>The biggest advantage people see in XHTML is that it is supposedly better at separating content from presentation. That is BS. XHTML pretty much supports the same set elements as HTML, including strictly presentational ones. But more importantly: If you ever tried to completely change the design of an XHTML page I know that you <strong>cheated and changed the markup</strong>.</p>
<p><strong>[Edit: 2008-05-02]</strong> The above is meant in the context of real world situations with dynamic content. CSS Zen Garden and similar sites are not realistic web environments. <a href="http://debuggable.com/posts/xhtml-is-a-joke:4819bf98-4978-4027-896e-2ea44834cda3#comment-481ad184-b028-4795-ade4-077e4834cda3">See comment below</a>.</p>
<p>So if you are under the impression that by using XHTML your pages automatically become presentation agnostic data sources that can be aggregated you are hallucinating. <a href="http://microformats.org/wiki/Main_Page">Microformats</a> and <a href="http://en.wikipedia.org/wiki/Web_scraping">web scraping</a> is what you should look into.</p>
<p><strong>Conclusion:</strong> I think XHTML did a ton of good for the web. It gave people a way to draw a line between traditional table driven HTML layouts and modern XHTML / CSS approaches. It spawned a wave of support for semantic markup and web standards. But looking at XHTML as a format by itself I see no advantages in it. I have big hopes for HTML5. Meanwhile I feel very happy with the feature set and philosophy provided by HTML 4.01 and will continue to use it.</p>
<p>Looking forward to feedback on this.</p>
<p>-- Felix Geisendörfer aka the_undefined<br />
<img style="display: none;" src="http://debuggable.com/posts/tick/4819bf98-4978-4027-896e-2ea44834cda3"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fxhtml-is-a-joke%3A4819bf98-4978-4027-896e-2ea44834cda3 &amp;title=XHTML+is+a+joke';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fxhtml-is-a-joke%3A4819bf98-4978-4027-896e-2ea44834cda3';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fxhtml-is-a-joke%3A4819bf98-4978-4027-896e-2ea44834cda3&amp;title=XHTML+is+a+joke&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fxhtml-is-a-joke%3A4819bf98-4978-4027-896e-2ea44834cda3&amp;title=XHTML+is+a+joke';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>

	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/xhtml-is-a-joke:4819bf98-4978-4027-896e-2ea44834cda3">49 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/xhtml-is-a-joke:4819bf98-4978-4027-896e-2ea44834cda3#CommentAddForm">Add Comment</a>	</div>
	</div>
<div class="post">
	<h2><a href="/posts/code-coverage-analysis-soon-in-cakephp---test-how-well-you-test:4814f6a0-fe60-4f50-be0b-07194834cda3">Code Coverage Analysis soon in CakePHP - Test How Well You Test</a></h2>	<div class="posted-on">
		<p>Posted on 27/4/08 by 
		<a href="/tim">Tim Koschützki</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/tim_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p>Hey folks,</p>
<p>the last week I have been dealing with an implementation of code coverage analysis for the upcoming release 1.2 of CakePHP. For those of you who do not yet know what code coverage is, here is a short excerpt from Wikipedia:</p>
<blockquote><p>
Code coverage is a measure used in software testing. It describes the degree to which the source code of a program has been tested. It is a form of testing that inspects the code directly and is therefore a form of white box testing.
</p></blockquote>
<p>There are several different kinds of criteria to code coverage. The two most important ones are line coverage (or statement coverage as wikipedia puts it) and path coverage. Line coverage basically analyzes if each line of the subject-under-test has been executed during the test. Path coverage examines if every possible route through the code has been executed. Since I rely on <a href="http://xdebug.org">Xdebug</a> for the implementation we are talking line coverage here.</p>
<p>So how is it going to work? Pretty simple actually. Whenever you run a CakePHP test case Cake assembles information in the background about which lines of your subject-under-test are called. Then it will display all code lines from the subject-under-test and mark those that were "covered" (ie executed by the testcase) and which were not. Lines that play no role for the code coverage percentage, such as multiline comments, will be displayed in a different color with less contrast.</p>
<p>How could an example report look like? Here you go:</p>
<p><img src="http://thinkingphp.org/img/code_coverage_html_view.png" /></p>
<p>I have also implemented a diff-style report. It just lists all the lines that are not covered by your tests and then seven lines before and after each of those. With that view you can really focus on the uncovered lines, but see enough lines around them in order to be able to write a reasonable test case to get the uncovered lines covered.</p>
<p>This is what the diff view looks like for the cakephp core router.test.php:</p>
<p><img src="http://thinkingphp.org/img/code_coverage_html_diff_view.png" /></p>
<p>Within the dev team we are currently discussing these two views. If you favor one of these, can recommend another one or just want to voice your opinion on the looks of them, please do so by commenting on this post. </p>
<p>For your information: Code coverage analysis currently only works for separate test cases only. However, the plan for this week is to get aggregate code coverage working. This means that your group tests are analyzed and the coverage percentage is displayed for each of the test subjects involved.</p>
<p>This is a very valuable tool when developing tests for your cakephp application. Although we are talking line coverage here and not path coverage it is still a pretty good indicator of how thorough your tests are. It might as well encourage some more people to start writing tests if they see a neat report after they have done so. :]</p>
<p>-- Tim Koschuetzki aka DarkAngelBGE<br />
<img style="display: none;" src="http://debuggable.com/posts/tick/4814f6a0-fe60-4f50-be0b-07194834cda3"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fcode-coverage-analysis-soon-in-cakephp---test-how-well-you-test%3A4814f6a0-fe60-4f50-be0b-07194834cda3 &amp;title=Code+Coverage+Analysis+soon+in+CakePHP+-+Test+How+Well+You+Test';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fcode-coverage-analysis-soon-in-cakephp---test-how-well-you-test%3A4814f6a0-fe60-4f50-be0b-07194834cda3';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fcode-coverage-analysis-soon-in-cakephp---test-how-well-you-test%3A4814f6a0-fe60-4f50-be0b-07194834cda3&amp;title=Code+Coverage+Analysis+soon+in+CakePHP+-+Test+How+Well+You+Test&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fcode-coverage-analysis-soon-in-cakephp---test-how-well-you-test%3A4814f6a0-fe60-4f50-be0b-07194834cda3&amp;title=Code+Coverage+Analysis+soon+in+CakePHP+-+Test+How+Well+You+Test';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>

	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/code-coverage-analysis-soon-in-cakephp---test-how-well-you-test:4814f6a0-fe60-4f50-be0b-07194834cda3">17 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/code-coverage-analysis-soon-in-cakephp---test-how-well-you-test:4814f6a0-fe60-4f50-be0b-07194834cda3#CommentAddForm">Add Comment</a>	</div>
	</div>
<div class="paging">
	<a href="/posts/index/page:34" class="prev">&laquo; Previous</a> <span><a href="/posts/index/page:31">31</a></span> | <span><a href="/posts/index/page:32">32</a></span> | <span><a href="/posts/index/page:33">33</a></span> | <span><a href="/posts/index/page:34">34</a></span> | <span class="current">35</span> | <span><a href="/posts/index/page:36">36</a></span> | <span><a href="/posts/index/page:37">37</a></span> | <span><a href="/posts/index/page:38">38</a></span> | <span><a href="/posts/index/page:39">39</a></span> <a href="/posts/index/page:36" class="next">Next &raquo;</a></div>	
</div>
<div class="grid_4 prefix_1 omega" id="sidebar">
	<cake:nocache>
			</cake:nocache>

	<h3>RSS Feeds</h3>
	<div id="bug">
		<img src="/img/rss_bug.png" alt="" />	</div>
	<div class="rss">
		<p class="bug-message"></p>
		<a href="http://feeds.feedburner.com/debuggable">Blog RSS</a><br/>
		<a href="http://feeds.feedburner.com/debuggable-comments">Comments RSS</a><br/><br/>
		<img width="88" height="26" alt="" style="border: 0pt none ;" src="http://feeds.feedburner.com/~fc/debuggable?bg=FF9933&amp;fg=444444&amp;anim=0"/>
		<div class="clear"></div>
	</div>

	<h3>Recent Posts</h3>
	<ul>
<li class=""><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb">Releasing node-mysql 2.0.0-alpha</a></li><li class=""><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb">How to write jQuery plugins</a></li><li class=""><a href="/posts/vim-workshop-in-berlin-april-20:4f702b83-ce24-429c-9403-0e39cbdd56cb">Vim Workshop in Berlin (April 20)</a></li><li class=""><a href="/posts/npm-an-intervention:4f44dd25-a114-4361-ada1-6cefcbdd56cb">NPM - An intervention</a></li><li class="active"><a href="/posts/testing-node-js-modules-with-travis-ci:4ec62298-aec4-4ee3-8b5a-2c96cbdd56cb">Testing node.js modules with Travis CI</a></li><li class=""><a href="/posts/private-npm-modules:4e68cc7d-1ac4-42d9-995a-343dcbdd56cb">Private npm modules</a></li></ul>
	<h3>Archive</h3>
	<p class="small align">
		<strong>443 Posts</strong>, <strong>4608 Comments</strong><br /><br />
		We are on air since 2006. Take a tour through the
		<a href="/posts/archive">blog archive</a>.
	</p>
	<div class="search">
	<form id="PostSearchForm" method="post" action="/posts/search"><fieldset style="display:none;"><input type="hidden" name="_method" value="POST" /></fieldset><input name="data[Post][keywords]" type="text" value="" id="PostKeywords" /><input type="submit" class="button" value="Search" /></form>	<div class="clear"></div>
</div>
	<h3>Recent Comments</h3>
	<div class="recent-comments">
		<div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd32b85-220c-4fc8-84b2-378fcbdd56cb">William: thanks, fixed ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=b47010beec892f11619d1e81f0c94f11&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd30119-06fc-4712-aecd-7fa5cbdd56cb">Hi Felix,

The Upgra ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=99b59e8a9cfe2c5575f0fa90f7f30307&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f99a4a2-9ad8-4476-b208-611acbdd56cb">Maybe you can write so ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=8364689a1eefb5eceb6a4f38bbf95731&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f9651b9-eb88-4096-94c1-0fc2cbdd56cb">This is very nice plug ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=7e3d69d16d3b845e89198512355b2ac9&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f8bb75a-96cc-4197-8e93-7c63cbdd56cb">Nice article!

Somet ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f83326b-8c28-43fc-b70d-097ecbdd56cb">That&#039;s fine ognian, th ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=994516a664c2bdc728d18c47e935bc14&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f832a25-5818-4d38-9e39-097ecbdd56cb">Really nice work! I wa ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c15ca-c7c4-48e3-a4db-27decbdd56cb">@Jörn: Sorry, thought  ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d5d83832be2b6c70d1968635f68a1b4a&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c11aa-6f9c-448c-abdb-2066cbdd56cb">Thanks didn&#039;t quite un ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7bf934-d4e8-4885-9a2c-7a93cbdd56cb">Well you could expose  ..</a></div><div class="clear_left"></div>	</div>
	<div class="clear_left"></div>
	<h3>Keep an eye on</h3>
<ul class="links external">
	<li><a href="http://transloadit.com" title="Video encoding, image resizing and more for your web or mobile app">Transloadit</a></li><li><a href="http://tus.io" title="Resumable file uploading, upload progress bar, faster upload speed">tus - resumable file upload protocol</a></li><li><a href="http://kevin.vanzonneveld.net/">Kevin van Zonneveld</a></li><li><a href="http://www.littlehart.net/atthekeyboard/">Chris Hartjes</a></li><li><a href="http://mark-story.com">Mark Story</a></li><li><a href="http://www.webbosaurus.de">Webbosaurus</a></li></ul>
	<a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number' title='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'><img src='http://static.jsconf.us/promotejshs.png' height='150' width='180' alt='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'/></a>
</div>

						<div class="clear">&nbsp;</div>
		</div>

		<div id="footer">
			<div class="container_16">
				<ul id="footer_navigation">
					<ul>
<li class="active"><a href="/blog">Blog</a></li><li class=""><a href="/">About</a></li></ul>				</ul>
				<p>&copy; 2008 - 2015, Debuggable Ltd. All rights reserved.
				<i>Designed by <a href="http://www.fluidcore.net" target="_blank">fluidCORE</a>.</i>
			</div>
		</div>
	</div>
	<script type="text/javascript" src="/js/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/5627ea2806458e56fb8a5f4b231a44c2.php"></script><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-3306079-3']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script');
ga.src = ('https:' == document.location.protocol ?
    'https://ssl' : 'http://www') +
    '.google-analytics.com/ga.js';
ga.setAttribute('async', 'true');
document.documentElement.firstChild.appendChild(ga);
})();
</script></body>
</html>
