<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
	<title>Blog &raquo; Debuggable - Node.js Consulting</title>

	<link href="http://feeds.feedburner.com/debuggable" type="application/rss+xml" rel="alternate" title="RSS 2.0" />	<link rel="pingback" href="Debuggable.com/pingback" />
	<link rel="stylesheet" type="text/css" href="/css/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/4026ee2275e22a4e5ec8aea13747c557.php" /></head>
	<body>
		<div class="container_16">
			<h1 id="logo-text"><a href="/">debuggable</a></h1>
			<ul id="navigation">
				<ul>
<li class="active"><a href="/blog">Blog</a></li><li class=""><a href="/">About</a></li></ul>			</ul>
			<div class="clear">&nbsp;</div>

			<div id="blueprint">
				<a href="/contact" class="contact">Contact Us</a>			</div>

			<div class="clear">&nbsp;</div>
			<div class="grid_11 alpha" id="content">
	<cake:nocache>
			<div class="messages empty"></div>
	</cake:nocache>
	<div class="paging">
	<a href="/posts/index/page:44" class="prev">&laquo; Previous</a> <span><a href="/posts/index/page:41">41</a></span> | <span><a href="/posts/index/page:42">42</a></span> | <span><a href="/posts/index/page:43">43</a></span> | <span><a href="/posts/index/page:44">44</a></span> | <span class="current">45</span> | <span><a href="/posts/index/page:46">46</a></span> | <span><a href="/posts/index/page:47">47</a></span> | <span><a href="/posts/index/page:48">48</a></span> | <span><a href="/posts/index/page:49">49</a></span> <a href="/posts/index/page:46" class="next">Next &raquo;</a></div>
	<div class="post">
	<h2><a href="/posts/besiege-empty-isset-co-with-this-great-syntax-cheatsheet:480f4dfe-4aa4-4651-a09f-4977cbdd56cb">Besiege Empty(), Isset() & Co. With This Great Syntax Cheatsheet</a></h2>	<div class="posted-on">
		<p>Posted on 22/6/07 by 
		<a href="/tim">Tim Koschützki</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/tim_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p>Today I stumbled upon <a href="http://www.blueshoes.org/en/developer/php_cheat_sheet/">this great php syntax sheet cheat</a> that displays to you all possible outputs of gettype(), empty(), is_null(), isSet() and (bool) for a whole range of different syntaxes for value assignments etc. This is definitely a must-read when you are like me and simply cannot grasp how these functions operate on different datatypes for different values!</p>
<p>The cheatsheet also contains valuable information about the different types of comparisons between strings, strings and integers, strings and floats, etc. using the equality operator (==) and the identity operator (===).  You get the idea. </p>
<p>Awesome work there!<br />
<img style="display: none;" src="http://debuggable.com/posts/tick/480f4dfe-4aa4-4651-a09f-4977cbdd56cb"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fbesiege-empty-isset-co-with-this-great-syntax-cheatsheet%3A480f4dfe-4aa4-4651-a09f-4977cbdd56cb &amp;title=Besiege+Empty%28%29%2C+Isset%28%29+%26+Co.+With+This+Great+Syntax+Cheatsheet';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fbesiege-empty-isset-co-with-this-great-syntax-cheatsheet%3A480f4dfe-4aa4-4651-a09f-4977cbdd56cb';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fbesiege-empty-isset-co-with-this-great-syntax-cheatsheet%3A480f4dfe-4aa4-4651-a09f-4977cbdd56cb&amp;title=Besiege+Empty%28%29%2C+Isset%28%29+%26+Co.+With+This+Great+Syntax+Cheatsheet&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fbesiege-empty-isset-co-with-this-great-syntax-cheatsheet%3A480f4dfe-4aa4-4651-a09f-4977cbdd56cb&amp;title=Besiege+Empty%28%29%2C+Isset%28%29+%26+Co.+With+This+Great+Syntax+Cheatsheet';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>

	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/besiege-empty-isset-co-with-this-great-syntax-cheatsheet:480f4dfe-4aa4-4651-a09f-4977cbdd56cb">0 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/besiege-empty-isset-co-with-this-great-syntax-cheatsheet:480f4dfe-4aa4-4651-a09f-4977cbdd56cb#CommentAddForm">Add Comment</a>	</div>
	</div>
<div class="post">
	<h2><a href="/posts/win-all-the-chicks-by-sticking-to-coding-standards:480f4dfe-e794-46fe-982b-4b3ccbdd56cb">Win All The Chicks By Sticking To Coding Standards</a></h2>	<div class="posted-on">
		<p>Posted on 19/6/07 by 
		<a href="/tim">Tim Koschützki</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/tim_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p><strong>Coding Standards are extremely important in programming environments. They not only allow you to build a consistent code base, but also make your overall life a lot easier. Join me and find out how you can lay out the foundation for your new car/house/chick.</strong></p>
<h1>Five Reasons Why You Should Stick To Coding Standards</h1>
<h2>1. You Will Have A Consistent Codebase</h2>
<p>Coding Standards help you have a consistent code base. If everything looks similar, you will easily feel home looking at your code. Try it out today and you will see for yourself that you feel much more motivated if everything looks clean and in shape. Programming is such a sophisticated task. Don't work hard - work smart! Use every tool available to make your life easier. Enforcing code conventions is one such tool.</p>
<h2>2. You May Not Get The Help You Deserve</h2>
<p>If you are in irc channels or on forums, you will be represented by your code. If you are in desperate need of help, people will want to see some of your code. If your code looks cumbersome and inconsistent, people will ask you "gwaa..refactor that code first young grashopper!", which takes time to repost on the forum (for example). Do it right the first time, save some time, present yourself in a better way and finally get the help you deserve.</p>
<h2>3. Clean Code Prevents Hair Loss</h2>
<p><img class="inset" src="http://php-coding-practices.com/wp-content/uploads/2007/06/hairloss2.thumbnail.jpg" alt="hairloss2.jpg" /> I cannot count the number of times when I looked for a small typo in a PHP script back when I was very young and coding conventions meant as little as possible to me (half of that). Coding Conventions help your debugging. They allow you to scan your code and find parse errors and notices (possibly from uninitialized variables) a lot faster. In short, coding standards prevent hair loss later in your life. Studies tell that a programmer is using up at least one third of his time with debugging. Why should you make it unnecessarily uneasy?</p>
<h2>4. Others Will Recognize Your Will To Write Good Code</h2>
<p>This trully goes alongside 2. However, I want to emphasize it a bit more: If the person above you is a bit angry, because you forgot (again) to triple-test your code before you checked it in (or at least forgot to make all automatic tests pass), coding standards can help you rebuild your reputation. I notice it often in my workplace. When somebody checked some untested code in, he will try to really enforce coding conventions in his code so the person above us recognizes it. Of course, your chief programmer may be different, but generally, this should help a bit.</p>
<h2>5. Coding Standards Will Help You With Your Next [Car|House|Chick]</h2>
<p>If you can debug code faster, feel home editing your code, get all the help you deserve and people recognize your good intentions you will feel a lot more relaxed. You will have fun with your work, with your colleagues and all other things in your life. This is the ultimate foundation for more money, general success, your new car or a new woman in your life. Okay, the latter may apply only to those who are feeling unlucky with their partner. :)</p>
<p>Use Coding Conventions and be happier in your life. :)</p>
<h1>Which Coding Conventions Do You Recommend?</h1>
<p>For this article I have looked at some sources for coding standards - especially to find out new ways of improving my own code. However, the ones that I use most often, at least in private projects (at my workplace I have to use others), are <a href="https://trac.cakephp.org/wiki/Developement/CodingStandards">the ones from The CakePHP Foundation</a>. Quelle surprise! </p>
<p>This document is simple and down to the point. For most coding situations there is a good way explained which formatting and intendation you should use. Please look at it and tell me what you think. I am eager to learn about new ways to organize my code. So should you.</p>
<p>Happy (clean) coding all!<br />
<img style="display: none;" src="http://debuggable.com/posts/tick/480f4dfe-e794-46fe-982b-4b3ccbdd56cb"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fwin-all-the-chicks-by-sticking-to-coding-standards%3A480f4dfe-e794-46fe-982b-4b3ccbdd56cb &amp;title=Win+All+The+Chicks+By+Sticking+To+Coding+Standards';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fwin-all-the-chicks-by-sticking-to-coding-standards%3A480f4dfe-e794-46fe-982b-4b3ccbdd56cb';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fwin-all-the-chicks-by-sticking-to-coding-standards%3A480f4dfe-e794-46fe-982b-4b3ccbdd56cb&amp;title=Win+All+The+Chicks+By+Sticking+To+Coding+Standards&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fwin-all-the-chicks-by-sticking-to-coding-standards%3A480f4dfe-e794-46fe-982b-4b3ccbdd56cb&amp;title=Win+All+The+Chicks+By+Sticking+To+Coding+Standards';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>

	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/win-all-the-chicks-by-sticking-to-coding-standards:480f4dfe-e794-46fe-982b-4b3ccbdd56cb">3 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/win-all-the-chicks-by-sticking-to-coding-standards:480f4dfe-e794-46fe-982b-4b3ccbdd56cb#CommentAddForm">Add Comment</a>	</div>
	</div>
<div class="post">
	<h2><a href="/posts/screencast-using-vendor-branching-and-cakephp:480f4dd6-6cac-44cb-b685-4d6bcbdd56cb">Screencast #1: Using vendor branching and CakePHP</a></h2>	<div class="posted-on">
		<p>Posted on 17/6/07 by 
		<a href="/felix">Felix Geisendörfer</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/felix_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p>Hi folks,</p>
<p>a long time ago I promised to do a screencast on unit testing. So as I sat down and tried to record it I noticed that it was quite an ambitious project. If you've never tried it then let me tell you: Doing a good screen cast is difficult. I've got deep respect for the people capable of doing so and I am in no way feeling qualified to join their league as of right now ; ). So I ended up giving up on the unit testing screencast for now and decided to start with something easier to get some experience first before trying to do difficult programming and entertaining talk at the same time as my early results where disastrous ... ^^. </p>
<p>So here I go with my very first screencast to be published. The topic is how to use vendor branching with CakePHP which is one of <a href="http://www.thinkingphp.org/2006/09/15/dessert-4-keep-your-cake-fresh-use-svn-head/">many ways to keep your CakePHP version up to date</a>.</p>
<p>To follow this screencast and try things at home you'll need:</p>
<ul>
<li>Windows OS (Sorry my dear Linux + Mac users, crank up your emulators)</li>
<li>TortoiseSVN: The best subversion client there is, <a href="http://tortoisesvn.tigris.org/">download here</a>.</li>
<li>Basic SVN knowledge, tolerance for my German accent and localized version of Windows</li>
<li>Most likely have to leave your RSS reader and <a href="http://www.thinkingphp.org/2007/06/17/screencast-using-vendor-branching-and-cakephp/">visit this post directly</a></li>
</ul>
<p>Feedback is welcome and I recommend you to watch in fullscreen mode as the screencast was recorded in 800x600 and I only had room for 720x540 here on my blog.</p>
<p>So here comes <a href="http://www.thinkingphp.org/2007/06/17/screencast-using-vendor-branching-and-cakephp/">the screencast</a> (16:45 minutes, 120 MB):</p>
<p id="preview">The player will show in this paragraph</p>
<script type="text/javascript" src="/js/vendors/swfobject.js"></script>
<script type="text/javascript">var s1 = new SWFObject('/swf/player.swf','player','400','300','9'); s1.addParam('allowfullscreen','true'); s1.addParam('allowscriptaccess','always'); s1.addParam('flashvars','file=http://static.thinkingphp.org/screencasts/1.flv'); s1.write('preview');</script>
<p>If you want to download the FLV file, please use this link: <a href="http://static.thinkingphp.org/screencasts/1.flv">Download screencast</a></p>
<p>-- Felix Geisendörfer aka the_undefined<br />
<img style="display: none;" src="http://debuggable.com/posts/tick/480f4dd6-6cac-44cb-b685-4d6bcbdd56cb"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fscreencast-using-vendor-branching-and-cakephp%3A480f4dd6-6cac-44cb-b685-4d6bcbdd56cb &amp;title=Screencast+%231%3A+Using+vendor+branching+and+CakePHP';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fscreencast-using-vendor-branching-and-cakephp%3A480f4dd6-6cac-44cb-b685-4d6bcbdd56cb';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fscreencast-using-vendor-branching-and-cakephp%3A480f4dd6-6cac-44cb-b685-4d6bcbdd56cb&amp;title=Screencast+%231%3A+Using+vendor+branching+and+CakePHP&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fscreencast-using-vendor-branching-and-cakephp%3A480f4dd6-6cac-44cb-b685-4d6bcbdd56cb&amp;title=Screencast+%231%3A+Using+vendor+branching+and+CakePHP';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>

	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/screencast-using-vendor-branching-and-cakephp:480f4dd6-6cac-44cb-b685-4d6bcbdd56cb">24 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/screencast-using-vendor-branching-and-cakephp:480f4dd6-6cac-44cb-b685-4d6bcbdd56cb#CommentAddForm">Add Comment</a>	</div>
	</div>
<div class="post">
	<h2><a href="/posts/composing-methods-replace-temp-with-query:480f4dfe-bd20-435d-8a18-4495cbdd56cb">Composing Methods: Replace Temp With Query</a></h2>	<div class="posted-on">
		<p>Posted on 14/6/07 by 
		<a href="/tim">Tim Koschützki</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/tim_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p><strong>When you are using a temporary variable to hold the result of an expression, extract the expression into a method. Then replace all references to the temp with the new method. The new method can then be used in other methods.</strong></p>
<h1>Motivation</h1>
<p>The problem with temps is that they are temporary and local. Since they can be seen only in the context of the method they are in, temps tend to encourage longer methods, which is something we want to avoid. By replacing the temp with a query method you can easily ensure that all other methods of your PHP class can get the information that was previously held by the temporary variable.</p>
<p>Of course there are different forms of this. In one case the expression that generates the contents for the temp is free of side effects. You can simply copy that expression to the query method. Other cases are trickier.. for example if the temp is to collect a result, for example by summing over a loop, you need to copy some logic (the entire loop) into the query method. Sometimes a loop is to calculate multiple values. Here you need to duplicate the loop for each temp and then use "Replace Temp With Query" on each of them. As you can guess, there is a thin border to <a href="http://php-coding-practices.com/agile-software-development/problems-with-repeatitive-source-code-or-better-dont-repeat-yourself/">repetitive source code</a>.</p>
<h1>Mechanics</h1>
<p>Here is a simple case:</p>
<ol>
<li>Look for a temporary variable that is assigned to once.</li>
<li>Extract the right-hand side of the assignment into a method. Initially mark the method as private - you can easily relax the protection later.</li>
<li>Ensure the extracted method is free of side-effects, meaning it does not modify any object.</li>
<li>Run your tests.</li>
<li>Use <a href="http://php-coding-practices.com/refactoring/composing-methods/composing-methods-inline-temp/" title="Inline Temp">Inline Temp</a> on the temporary variable.</li>
</ol>
<h1>Code Examples</h1>
<h2>Before</h2>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">function</span> calcTax<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp;<span class="re0">$basePrice</span> = <span class="re0">$this</span>-&gt;<span class="me1">amount</span> * <span class="re0">$this</span>-&gt;<span class="me1">quantity</span>;<br />
&nbsp; &nbsp;<span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$basePrice</span> &gt; <span class="nu0">3000</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">return</span> <span class="re0">$basePrice</span> * <span class="nu0">0.93</span>;<br />
&nbsp; &nbsp;<span class="kw1">else</span><br />
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">return</span> <span class="re0">$basePrice</span> * <span class="nu0">0.95</span>;<br />
<span class="br0">&#125;</span></div>
<h2>After</h2>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="kw2">function</span> calcTax<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp;<span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$this</span>-&gt;<span class="me1">basePrice</span><span class="br0">&#40;</span><span class="br0">&#41;</span> &gt; <span class="nu0">3000</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">basePrice</span><span class="br0">&#40;</span><span class="br0">&#41;</span> * <span class="nu0">0.93</span>;<br />
&nbsp; &nbsp;<span class="kw1">else</span><br />
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">basePrice</span><span class="br0">&#40;</span><span class="br0">&#41;</span> * <span class="nu0">0.95</span>;<br />
<span class="br0">&#125;</span><br />
<br />
<span class="kw2">function</span> basePrice<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">amount</span> * <span class="re0">$this</span>-&gt;<span class="me1">quantity</span>;<br />
<span class="br0">&#125;</span></div>
<p>As you see we perform the calculation of the base price several times here. You may be concerned with performance issues. However, be aware that nine times out of ten it will not matter. When it does matter, you will fix the problem during your optimisation stage. With your code being refactored you will often find even better optimisation strategies which you would have missed without refactoring, so the refactoring pays for itself already. If you are at the worst case, you can easily put the temp back, anyway.</p>
<p>Have a good one, folks! :)<br />
<img style="display: none;" src="http://debuggable.com/posts/tick/480f4dfe-bd20-435d-8a18-4495cbdd56cb"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fcomposing-methods-replace-temp-with-query%3A480f4dfe-bd20-435d-8a18-4495cbdd56cb &amp;title=Composing+Methods%3A+Replace+Temp+With+Query';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fcomposing-methods-replace-temp-with-query%3A480f4dfe-bd20-435d-8a18-4495cbdd56cb';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fcomposing-methods-replace-temp-with-query%3A480f4dfe-bd20-435d-8a18-4495cbdd56cb&amp;title=Composing+Methods%3A+Replace+Temp+With+Query&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fcomposing-methods-replace-temp-with-query%3A480f4dfe-bd20-435d-8a18-4495cbdd56cb&amp;title=Composing+Methods%3A+Replace+Temp+With+Query';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>

	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/composing-methods-replace-temp-with-query:480f4dfe-bd20-435d-8a18-4495cbdd56cb">2 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/composing-methods-replace-temp-with-query:480f4dfe-bd20-435d-8a18-4495cbdd56cb#CommentAddForm">Add Comment</a>	</div>
	</div>
<div class="post">
	<h2><a href="/posts/introduction-to-php-security-vulnerabilities:480f4dfe-97f8-4975-ab28-4eb0cbdd56cb">Introduction To PHP Security Vulnerabilities</a></h2>	<div class="posted-on">
		<p>Posted on 12/6/07 by 
		<a href="/tim">Tim Koschützki</a>				</p>
		<div class="thumb">
			<img alt="" src="/img/tim_thumb.jpg"/>		</div>
	</div>
	<div class="body">
				<p><strong>PHP has allowed people with all sorts of backgrounds to put their ideas on the web. With several hundred million webpages programmed in PHP, security plays a big deal for us webprogrammers. In this introduction I will outline the most common security vulnerabilities in PHP scripts. Tutorials on how one can prevent them will be dealt with in articles dedicated to each vulnerability.</strong></p>
<h1>All Input is Tainted</h1>
<p><!--adsense#singlepost_banner468horiz--></p>
<p>As a programming language, PHP generates output (HTML, Headers, Files and the like) based on User Input supplied by the url, cookies, the session data, forms, file uploads.<br />
It is an absolute must that you regard every input supplied by a user as potentially unrelieable. When you operate on user-provided input, you have to validate it before you use it in your system.</p>
<p>By the time input reaches PHP, it's passed through the user's browser, any number of proxy servers and firewalls, filtering tools on your server and possibly other processing modules.<br />
Any of those have an opportunity to corrupt your input - be it intentional or not. As the input ultimately comes from your user, it could have been corrupted in pure malice to push the limits of your application or undeliberately.<br />
There is no universal solution that validates all input. We will learn about the most common ones in a later article where we examine all security vulnerabilities explained here in detail.</p>
<h1>Cross-Site Scripting</h1>
<p><!--adsense#singlepost_banner468horiz--></p>
<p>Cross-Site Scripting (XSS) is one of the most common vulnerabilities of web applications. In such an attack the hacker stores unwanted code, be it Javascript, CSS or HTML, in the victim's database.<br />
Later, when the content is fetched from the database and displayed to the visitor, it alters the page or runs some code that either distorts the overall layout, exploits and steals user's cookies or redirects confidential information like the session id to third-party sites and software.</p>
<p>XSS is very popular and easy-to-do. It only requires basic knowledge of javascript and / or HTML and CSS. There are two forms of XSS exploits: <em>direct action</em> and <em>stored action</em>. The former gains insight about the application whereas the latter, the more dangerous one, tries to steal identities for subsequent exploits towards site users or the site itself.</p>
<p>The simplest XSS attack would be inserting a &lt;blink&gt; tag into a form which has no html tag validation. It could make the entire website to blink awkwardly. :)</p>
<h1>SQL Injection</h1>
<p>SQL Injection is also a very popular vulnerability that is caused by inconsequent input validation. Unlike XSS Sql Injection is directed at the site itself and can be extremely dangerous, resulting in your entire database being deleted.</p>
<p>The goal of SQL Injection is the insertion of arbitrary data into a string of which the hacker knows that is going to be used in an SQL statement - for example the username of a login form. The malicious query may retrieve<br />
data that otherwise requires authentication, modify or even remove data from the database.</p>
<h2>Example</h2>
<p>Suppose you have such a login form with a name and a password input field. Now when the form is sent via POST, think about what the following code does:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<a href="http://www.php.net/mysql_query"><span class="kw3">mysql_query</span></a><span class="br0">&#40;</span><span class="st0">&quot;SELECT * FROM users WHERE name='{$_POST['name']}'&quot;</span><span class="br0">&#41;</span>;</div>
<p>At first glance it looks okay. However, when the hacker puts "john'; DELETE FROM users;'true" into the name field, the following Query will be executed:</p>
<p>[sql]<br />
SELECT * FROM users WHERE name='john'; DELETE FROM users;'true'<br />
[/sql]</p>
<p>The execution of this query causes all users to be deleted. Now using MySQL's query stacking option will prevent the system from executing multiple sql queries at one mysql_query() call. However, other database systems like PostgreSQL might not.</p>
<h1>Code Injection</h1>
<p>Code Injection can be the most dangerous attack that can affect a PHP script. This attack is also caused by a lack of input validation.</p>
<p>The core of this attack method is most often PHP's register_globals ini setting, which allows to register variables supplied by $_POST, $_GET and the like as direct PHP variables. Most servers turn register_globals off<br />
by default, which is good. However, some still keep it on.</p>
<p>If a script loads an external script based on user input (that is not validated), an attacker can hijack the site's infrastructure by supplying an arbitrary local or remote filename.<br />
If register_globals is  on, this may cause code to be injected into the site, which modifies the database, explores data, scripts and files or compromises the entire system.</p>
<p>Take every possible opportunity to eliminate this vulnerability. In a subsequent article I will show you how it is done.</p>
<h1>Command Injection</h1>
<p>Command Injection exploits PHP's dependency on external resources. For example for some task the myriad of php functions and extensions is not enough and you depend on a local windows or linux command.</p>
<p>The external command-line utility doc2pdf is commonly used to convert uploaded Word-documents into pdf files. The name of the uploaded file in the following script is not validated and thus may contain all sorts of funny characters:</p>
<div class="clear"></div>
<div class="code debuggable_sh_php" style="white-space: wrap;white-space: nowrap;">
<span class="re0">$dest</span> = <a href="http://www.php.net/basename"><span class="kw3">basename</span></a><span class="br0">&#40;</span><span class="re0">$_FILES</span><span class="br0">&#91;</span><span class="st0">'uploaded'</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="st0">'name'</span><span class="br0">&#93;</span>,<span class="st0">'.doc'</span><span class="br0">&#41;</span>;<br />
<a href="http://www.php.net/shell_exec"><span class="kw3">shell_exec</span></a><span class="br0">&#40;</span><span class="st0">&quot;doc2pdf {$_FILES['upload']['tmp_name']} {$dest].pdf&quot;</span><span class="br0">&#41;</span>;</div>
<p>One of such funny characters are semicolons which separate commands on the command line. If the filename was "somefile; locate * |rm -rf" the shell converts somefile and then removes all files writeable by the web server.<br />
We will see in a later article how you can avoid such an attack.</p>
<h1>Session And Cookie Security</h1>
<p>Sessions are very helpful to track a user. Sessions maintain an online identity. Therefore, it's disastrous if people steal that identity, performing all sorts of actions that only the original identity had priviledges to perform.</p>
<p>As PHP heads more and more into Enterprise Applications where sensitive data is present, session security is absolutely essential. By exploring how sessions work you can forsee possible attacks. We will see in a dedicated article how this is done and how securing Cookies is done.</p>
<h1>Securing File Access</h1>
<p>All PHP scripts depend on other files in one form or the other. No matter the size of your application it is vital to maintain the proper access restrictions. Failing to protect files can make it very easy for hackers to compromise the entire system.</p>
<p>In most cases the PHP interpreter has the same user ID as the webserver. Files uploaded by scripts are owned by the developer's user account. Due to differing users, it's not possible to set secure file permissions (0600 for files and 0700 for directories), since the permissions<br />
would prevent the server from being bale to access those files. Do we have to make these files world-readable? We will see in a later article.</p>
<h1>Conclusion</h1>
<p>These are the most common PHP vulnerabilities., shortly outlined in a compact article. I will write dedicated articles about each of those later where you learn how to prevent them. Those articles will be packed<br />
with many code examples, I am sure many of you have not seen yet. Stay tuned!<br />
<img style="display: none;" src="http://debuggable.com/posts/tick/480f4dfe-97f8-4975-ab28-4eb0cbdd56cb"></p>
	</div>
	<div class="clear">&nbsp;</div>
	<div class="social">
	<p class="subscribe">Did you like this blog post? If so, please consider <a href="http://feeds.feedburner.com/debuggable">subscribing to the Blog RSS feed</a>.</p>

	<ul>
	<li class="sociablefirst">
				<a class="linkedin" title="LinkedIn" href="javascript:window.location='http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fintroduction-to-php-security-vulnerabilities%3A480f4dfe-97f8-4975-ab28-4eb0cbdd56cb &amp;title=Introduction+To+PHP+Security+Vulnerabilities';" rel="nofollow">
			<img class="sociable-hovers" alt="Linked In" title="Linked In" src="/img/social_icons/linkedin.png"/>
		</a>
	</li>
	<li>
		<a class="sphinn" title="Sphinn" href="javascript:window.location='http://sphinn.com/index.php?c=post&amp;m=submit&amp;link=http%3A%2F%2Fdebuggable.com%2Fposts%2Fintroduction-to-php-security-vulnerabilities%3A480f4dfe-97f8-4975-ab28-4eb0cbdd56cb';" rel="nofollow">
		<img class="sociable-hovers" alt="Sphinn" title="Sphinn" src="/img/social_icons/sphinn.png"/>
		</a>
	</li>
	<li>
		<a class="digg" title="Digg" href="javascript:window.location='http://digg.com/submit?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fintroduction-to-php-security-vulnerabilities%3A480f4dfe-97f8-4975-ab28-4eb0cbdd56cb&amp;title=Introduction+To+PHP+Security+Vulnerabilities&amp;bodytext=+..&amp;media=News&amp;topic=Programming';" rel="nofollow">
		<img class="sociable-hovers" alt="Digg" title="Digg" src="/img/social_icons/digg.png"/>
		</a>
	</li>
	<li>
	<a class="del.icio.us" title="del.icio.us" href="javascript:window.location='http://delicious.com/post?url=http%3A%2F%2Fdebuggable.com%2Fposts%2Fintroduction-to-php-security-vulnerabilities%3A480f4dfe-97f8-4975-ab28-4eb0cbdd56cb&amp;title=Introduction+To+PHP+Security+Vulnerabilities';" rel="nofollow">
		<img class="sociable-hovers" alt="Delicious" title="Delicious" src="/img/social_icons/delicious.png"/>
	</a>
	</li>
	<li class="sociablelast">
		<a class="stumbleupon" title="StumbleUpon" href="javascript:window.location='http://www.stumbleupon.com/submit?url=http%253A%252F%252Fyoast.com%252F40-wordpress-optimisation-tips%252F&amp;title=40%2520WordPress%2520Optimisation%2520tips';" rel="nofollow">
		<img class="sociable-hovers" alt="StumbleUpon" title="StumbleUpon" src="/img/social_icons/stumbleupon.png"/>
		</a>
	</li>
	</ul>
</div>

	
	<div class="post-footer">
		<img src="/css/img/comments.png" alt="Comments"> <a href="/posts/introduction-to-php-security-vulnerabilities:480f4dfe-97f8-4975-ab28-4eb0cbdd56cb">7 Comments</a> &nbsp; | &nbsp; 
		<img src="/css/img/add_comment.png" alt="Add Comment"> <a href="/posts/introduction-to-php-security-vulnerabilities:480f4dfe-97f8-4975-ab28-4eb0cbdd56cb#CommentAddForm">Add Comment</a>	</div>
	</div>
<div class="paging">
	<a href="/posts/index/page:44" class="prev">&laquo; Previous</a> <span><a href="/posts/index/page:41">41</a></span> | <span><a href="/posts/index/page:42">42</a></span> | <span><a href="/posts/index/page:43">43</a></span> | <span><a href="/posts/index/page:44">44</a></span> | <span class="current">45</span> | <span><a href="/posts/index/page:46">46</a></span> | <span><a href="/posts/index/page:47">47</a></span> | <span><a href="/posts/index/page:48">48</a></span> | <span><a href="/posts/index/page:49">49</a></span> <a href="/posts/index/page:46" class="next">Next &raquo;</a></div>	
</div>
<div class="grid_4 prefix_1 omega" id="sidebar">
	<cake:nocache>
			</cake:nocache>

	<h3>RSS Feeds</h3>
	<div id="bug">
		<img src="/img/rss_bug.png" alt="" />	</div>
	<div class="rss">
		<p class="bug-message"></p>
		<a href="http://feeds.feedburner.com/debuggable">Blog RSS</a><br/>
		<a href="http://feeds.feedburner.com/debuggable-comments">Comments RSS</a><br/><br/>
		<img width="88" height="26" alt="" style="border: 0pt none ;" src="http://feeds.feedburner.com/~fc/debuggable?bg=FF9933&amp;fg=444444&amp;anim=0"/>
		<div class="clear"></div>
	</div>

	<h3>Recent Posts</h3>
	<ul>
<li class=""><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb">Releasing node-mysql 2.0.0-alpha</a></li><li class=""><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb">How to write jQuery plugins</a></li><li class=""><a href="/posts/vim-workshop-in-berlin-april-20:4f702b83-ce24-429c-9403-0e39cbdd56cb">Vim Workshop in Berlin (April 20)</a></li><li class=""><a href="/posts/npm-an-intervention:4f44dd25-a114-4361-ada1-6cefcbdd56cb">NPM - An intervention</a></li><li class="active"><a href="/posts/testing-node-js-modules-with-travis-ci:4ec62298-aec4-4ee3-8b5a-2c96cbdd56cb">Testing node.js modules with Travis CI</a></li><li class=""><a href="/posts/private-npm-modules:4e68cc7d-1ac4-42d9-995a-343dcbdd56cb">Private npm modules</a></li></ul>
	<h3>Archive</h3>
	<p class="small align">
		<strong>443 Posts</strong>, <strong>4608 Comments</strong><br /><br />
		We are on air since 2006. Take a tour through the
		<a href="/posts/archive">blog archive</a>.
	</p>
	<div class="search">
	<form id="PostSearchForm" method="post" action="/posts/search"><fieldset style="display:none;"><input type="hidden" name="_method" value="POST" /></fieldset><input name="data[Post][keywords]" type="text" value="" id="PostKeywords" /><input type="submit" class="button" value="Search" /></form>	<div class="clear"></div>
</div>
	<h3>Recent Comments</h3>
	<div class="recent-comments">
		<div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=23968f0ca75b13463d2db5343e5c2096&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd32b85-220c-4fc8-84b2-378fcbdd56cb">William: thanks, fixed ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=b47010beec892f11619d1e81f0c94f11&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/releasing-node-mysql-2-0-0-alpha:4fb21c18-7f84-4e8c-a1ef-599bcbdd56cb#comment-4fd30119-06fc-4712-aecd-7fa5cbdd56cb">Hi Felix,

The Upgra ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=99b59e8a9cfe2c5575f0fa90f7f30307&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f99a4a2-9ad8-4476-b208-611acbdd56cb">Maybe you can write so ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=8364689a1eefb5eceb6a4f38bbf95731&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f9651b9-eb88-4096-94c1-0fc2cbdd56cb">This is very nice plug ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=7e3d69d16d3b845e89198512355b2ac9&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f8bb75a-96cc-4197-8e93-7c63cbdd56cb">Nice article!

Somet ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f83326b-8c28-43fc-b70d-097ecbdd56cb">That&#039;s fine ognian, th ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=994516a664c2bdc728d18c47e935bc14&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f832a25-5818-4d38-9e39-097ecbdd56cb">Really nice work! I wa ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c15ca-c7c4-48e3-a4db-27decbdd56cb">@Jörn: Sorry, thought  ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=d5d83832be2b6c70d1968635f68a1b4a&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7c11aa-6f9c-448c-abdb-2066cbdd56cb">Thanks didn&#039;t quite un ..</a></div><div class="clear_left"></div><div class="comment"><a href="http://en.gravatar.com/site/signup" class="gravatar"><img src="http://www.gravatar.com/avatar.php?gravatar_id=e57a2bc121063a81e8e6a04aa85cc54f&size=15&rating=R&d=identicon" alt="" /></a><a href="/posts/how-to-write-jquery-plugins:4f72ab2e-7310-4a74-817a-0a04cbdd56cb#comment-4f7bf934-d4e8-4885-9a2c-7a93cbdd56cb">Well you could expose  ..</a></div><div class="clear_left"></div>	</div>
	<div class="clear_left"></div>
	<h3>Keep an eye on</h3>
<ul class="links external">
	<li><a href="http://transloadit.com" title="Video encoding, image resizing and more for your web or mobile app">Transloadit</a></li><li><a href="http://tus.io" title="Resumable file uploading, upload progress bar, faster upload speed">tus - resumable file upload protocol</a></li><li><a href="http://kevin.vanzonneveld.net/">Kevin van Zonneveld</a></li><li><a href="http://www.littlehart.net/atthekeyboard/">Chris Hartjes</a></li><li><a href="http://mark-story.com">Mark Story</a></li><li><a href="http://www.webbosaurus.de">Webbosaurus</a></li></ul>
	<a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number' title='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'><img src='http://static.jsconf.us/promotejshs.png' height='150' width='180' alt='JavaScript JS Documentation: JS Number Example: Using the Number object to assign values to numeric variables, JavaScript Number Example: Using the Number object to assign values to numeric variables'/></a>
</div>

						<div class="clear">&nbsp;</div>
		</div>

		<div id="footer">
			<div class="container_16">
				<ul id="footer_navigation">
					<ul>
<li class="active"><a href="/blog">Blog</a></li><li class=""><a href="/">About</a></li></ul>				</ul>
				<p>&copy; 2008 - 2015, Debuggable Ltd. All rights reserved.
				<i>Designed by <a href="http://www.fluidcore.net" target="_blank">fluidCORE</a>.</i>
			</div>
		</div>
	</div>
	<script type="text/javascript" src="/js/aggregate/58a4727fb2207154ddd0739cbc3b15104ad6cd03/5627ea2806458e56fb8a5f4b231a44c2.php"></script><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-3306079-3']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script');
ga.src = ('https:' == document.location.protocol ?
    'https://ssl' : 'http://www') +
    '.google-analytics.com/ga.js';
ga.setAttribute('async', 'true');
document.documentElement.firstChild.appendChild(ga);
})();
</script></body>
</html>
